<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>abstract_value_cloner.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>abstract__value__cloner_8cc.html</filename>
    <includes id="abstract__value__cloner_8h" name="abstract_value_cloner.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_value_cloner.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>abstract_value_cloner.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>abstract__value__cloner_8h.html</filename>
    <includes id="copyable__unique__ptr_8h" name="copyable_unique_ptr.h" local="yes" imported="no">maliput/drake/common/copyable_unique_ptr.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <class kind="class">maliput::drake::systems::internal::AbstractValueCloner</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>abstract_values.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>abstract__values_8cc.html</filename>
    <includes id="abstract__values_8h" name="abstract_values.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_values.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>abstract_values.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>abstract__values_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <class kind="class">maliput::drake::systems::AbstractValues</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>antiderivative_function.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>antiderivative__function_8cc.html</filename>
    <includes id="antiderivative__function_8h" name="antiderivative_function.h" local="yes" imported="no">maliput/drake/systems/analysis/antiderivative_function.h</includes>
  </compound>
  <compound kind="file">
    <name>antiderivative_function.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>antiderivative__function_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="scalar__dense__output_8h" name="scalar_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_dense_output.h</includes>
    <includes id="scalar__initial__value__problem_8h" name="scalar_initial_value_problem.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_initial_value_problem.h</includes>
    <class kind="class">maliput::drake::systems::AntiderivativeFunction</class>
    <class kind="struct">maliput::drake::systems::AntiderivativeFunction::IntegrableFunctionContext</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>assertion_error.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>assertion__error_8h.html</filename>
    <class kind="class">maliput::common::assertion_error</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>axis_aligned_box.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>axis__aligned__box_8cc.html</filename>
    <includes id="axis__aligned__box_8h" name="axis_aligned_box.h" local="yes" imported="no">maliput/math/axis_aligned_box.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>axis_aligned_box.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>axis__aligned__box_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="bounding__region_8h" name="bounding_region.h" local="yes" imported="no">maliput/math/bounding_region.h</includes>
    <includes id="overlapping__type_8h" name="overlapping_type.h" local="yes" imported="no">maliput/math/overlapping_type.h</includes>
    <includes id="roll__pitch__yaw_8h" name="roll_pitch_yaw.h" local="yes" imported="no">maliput/math/roll_pitch_yaw.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::math::AxisAlignedBox</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>basic_id_index.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>basic__id__index_8cc.html</filename>
    <includes id="basic__id__index_8h" name="basic_id_index.h" local="yes" imported="no">maliput/api/basic_id_index.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>basic_id_index.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>basic__id__index_8h.html</filename>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::BasicIdIndex</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>basic_vector.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>basic__vector_8cc.html</filename>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
  </compound>
  <compound kind="file">
    <name>basic_vector.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>basic__vector_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="dummy__value_8h" name="dummy_value.h" local="yes" imported="no">maliput/drake/common/dummy_value.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="vector__base_8h" name="vector_base.h" local="yes" imported="no">maliput/drake/systems/framework/vector_base.h</includes>
    <class kind="class">maliput::drake::systems::BasicVector</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>bounding_box.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>bounding__box_8cc.html</filename>
    <includes id="bounding__box_8h" name="bounding_box.h" local="yes" imported="no">maliput/math/bounding_box.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>bounding_box.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>bounding__box_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="bounding__region_8h" name="bounding_region.h" local="yes" imported="no">maliput/math/bounding_region.h</includes>
    <includes id="overlapping__type_8h" name="overlapping_type.h" local="yes" imported="no">maliput/math/overlapping_type.h</includes>
    <includes id="roll__pitch__yaw_8h" name="roll_pitch_yaw.h" local="yes" imported="no">maliput/math/roll_pitch_yaw.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::math::BoundingBox</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>bounding_region.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>bounding__region_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="overlapping__type_8h" name="overlapping_type.h" local="yes" imported="no">maliput/math/overlapping_type.h</includes>
    <class kind="class">maliput::math::BoundingRegion</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>branch_point.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>branch__point_8cc.html</filename>
    <includes id="geometry__base_2branch__point_8h" name="geometry_base/branch_point.h" local="yes" imported="no">maliput/geometry_base/branch_point.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="geometry__base_2lane_8h" name="geometry_base/lane.h" local="yes" imported="no">maliput/geometry_base/lane.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/branch_point.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2branch__point_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::LaneEndSet</class>
    <class kind="class">maliput::api::BranchPoint</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class BranchPoint &gt;</type>
      <name>BranchPointId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>af58adb58c809af6076770134bdb68e2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_base/branch_point.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>geometry__base_2branch__point_8h.html</filename>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="passkey_8h" name="passkey.h" local="yes" imported="no">maliput/common/passkey.h</includes>
    <includes id="lane__end__set_8h" name="lane_end_set.h" local="yes" imported="no">maliput/geometry_base/lane_end_set.h</includes>
    <class kind="class">maliput::geometry_base::BranchPoint</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>brute_force_find_road_positions_strategy.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>brute__force__find__road__positions__strategy_8cc.html</filename>
    <includes id="brute__force__find__road__positions__strategy_8h" name="brute_force_find_road_positions_strategy.h" local="yes" imported="no">maliput/geometry_base/brute_force_find_road_positions_strategy.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>std::vector&lt; maliput::api::RoadPositionResult &gt;</type>
      <name>BruteForceFindRoadPositionsStrategy</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>ab608c7a16c9d4364c164504cd1fe00e9</anchor>
      <arglist>(const maliput::api::RoadGeometry *rg, const maliput::api::InertialPosition &amp;inertial_position, double radius)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>brute_force_find_road_positions_strategy.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>brute__force__find__road__positions__strategy_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>std::vector&lt; maliput::api::RoadPositionResult &gt;</type>
      <name>BruteForceFindRoadPositionsStrategy</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>ab608c7a16c9d4364c164504cd1fe00e9</anchor>
      <arglist>(const maliput::api::RoadGeometry *rg, const maliput::api::InertialPosition &amp;inertial_position, double radius)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>brute_force_strategy.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>brute__force__strategy_8cc.html</filename>
    <includes id="brute__force__strategy_8h" name="brute_force_strategy.h" local="yes" imported="no">maliput/geometry_base/brute_force_strategy.h</includes>
    <includes id="filter__positions_8h" name="filter_positions.h" local="no" imported="no">maliput/geometry_base/filter_positions.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>brute_force_strategy.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>brute__force__strategy_8h.html</filename>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <class kind="class">maliput::geometry_base::BruteForceStrategy</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>cache.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>cache_8cc.html</filename>
    <includes id="cache_8h" name="cache.h" local="yes" imported="no">maliput/drake/systems/framework/cache.h</includes>
    <includes id="dependency__tracker_8h" name="dependency_tracker.h" local="yes" imported="no">maliput/drake/systems/framework/dependency_tracker.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>cache.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>cache_8h.html</filename>
    <includes id="copyable__unique__ptr_8h" name="copyable_unique_ptr.h" local="yes" imported="no">maliput/drake/common/copyable_unique_ptr.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <includes id="reset__on__copy_8h" name="reset_on_copy.h" local="yes" imported="no">maliput/drake/common/reset_on_copy.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::CacheEntryValue</class>
    <class kind="class">maliput::drake::systems::Cache</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>cache_doxygen.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>cache__doxygen_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>cache_entry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>cache__entry_8cc.html</filename>
    <includes id="cache__entry_8h" name="cache_entry.h" local="yes" imported="no">maliput/drake/systems/framework/cache_entry.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>cache_entry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>cache__entry_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="value__producer_8h" name="value_producer.h" local="yes" imported="no">maliput/drake/systems/framework/value_producer.h</includes>
    <class kind="class">maliput::drake::systems::CacheEntry</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>api/compare.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>api_2compare_8cc.html</filename>
    <includes id="api_2compare_8h" name="api/compare.h" local="yes" imported="no">maliput/api/compare.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsInertialPositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a5257d7064e7c5f3d9e8b543b18737ece</anchor>
      <arglist>(const InertialPosition &amp;pos1, const InertialPosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePosition &gt;</type>
      <name>IsLanePositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aab04b7759b264bea5aa98a8c5d0ba92f</anchor>
      <arglist>(const LanePosition &amp;pos1, const LanePosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsRotationClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab614274503f66904453dbe7df1418872</anchor>
      <arglist>(const Rotation &amp;rot1, const Rotation &amp;rot2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RBounds &gt;</type>
      <name>IsRBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aae0d5876f143bae90467aab92f4c4799</anchor>
      <arglist>(const RBounds &amp;rbounds1, const RBounds &amp;rbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; HBounds &gt;</type>
      <name>IsHBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9ab2f16b53bbe8119b92f357c9e4007a</anchor>
      <arglist>(const HBounds &amp;hbounds1, const HBounds &amp;hbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePositionResult &gt;</type>
      <name>IsLanePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a189db2b6c069d74f1643e510b2ba3f9f</anchor>
      <arglist>(const LanePositionResult &amp;lpr_a, const LanePositionResult &amp;lpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoadPositionResult &gt;</type>
      <name>IsRoadPositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc4737b8e01dd40ef4b03ae668f78357</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;rpr_a, const maliput::api::RoadPositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsLaneEndEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a4d3dd63ef50b18662dbfecbad3ab4222</anchor>
      <arglist>(const LaneEnd &amp;lane_end1, const LaneEnd &amp;lane_end2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; bool &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a875dc08f7e6920a937b74e8f6277bfdb</anchor>
      <arglist>(const char *a_expression, const char *b_expression, bool a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; double &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc0698791787e063312963e3ddbbb0e1</anchor>
      <arglist>(const char *a_expression, const char *b_expression, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::size_t &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab90f768fcf35f41cc11e991e1b56070e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, std::size_t a, std::size_t b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a54a377f86e3fe9bdba070ad995ea9c43</anchor>
      <arglist>(const SRange &amp;s_range_1, const SRange &amp;s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aa2149e3694b14710b9532dd46d942c9d</anchor>
      <arglist>(const LaneSRange &amp;lane_s_range_1, const LaneSRange &amp;lane_s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; LaneSRange &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a655a6daa38d963ca4d5c891e1a954462</anchor>
      <arglist>(const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_1, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRoute &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3989128857764f83815fb37b7908ae38</anchor>
      <arglist>(const LaneSRoute &amp;lane_s_route_1, const LaneSRoute &amp;lane_s_route_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Junction &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a14c009382ff3ec884ffbdbbe9c77e53e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Junction *a, const Junction *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Segment &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aebd496c20514127f152a58234d5f2e46</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Segment *a, const Segment *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Lane &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a92104863cc85fffe8cf24d730d90c3d5</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Lane *a, const Lane *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BranchPoint &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ad839c893606e35b71870c973735f2388</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const BranchPoint *a, const BranchPoint *b)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>CheckIdIndexing</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3a6309cbd7aad2179ccd00c1d00c4722</anchor>
      <arglist>(const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9f413a2a34bdae4caea6741672077217</anchor>
      <arglist>(const InertialPosition &amp;inertial_position_1, const InertialPosition &amp;inertial_position_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a718452968e53dc8ac4a02d12b6702d4a</anchor>
      <arglist>(const Rotation &amp;rotation_1, const Rotation &amp;rotation_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd::Which &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a20369172b027ed8a4154e2a2af78514f</anchor>
      <arglist>(const LaneEnd::Which &amp;which_1, const LaneEnd::Which &amp;which_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aaa5fa369b98544a98a81ccda4684c393</anchor>
      <arglist>(const LaneEnd &amp;lane_end_1, const LaneEnd &amp;lane_end_2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/rules/compare.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>api_2rules_2compare_8cc.html</filename>
    <includes id="api_2rules_2compare_8h" name="api/rules/compare.h" local="yes" imported="no">maliput/api/rules/compare.h</includes>
    <includes id="api_2compare_8h" name="api/compare.h" local="yes" imported="no">maliput/api/compare.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; RuleStates &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a0cfb3eca710e367eab908684ddfdf980</anchor>
      <arglist>(const RuleStates &amp;a, const RuleStates &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule::DiscreteValue &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a5c14748b1ad34975cf9468c177feade9</anchor>
      <arglist>(const DiscreteValueRule::DiscreteValue &amp;a, const DiscreteValueRule::DiscreteValue &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a527d13d667c2731c3644b7935b309009</anchor>
      <arglist>(const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Phase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9f1f6e26d3f3580677fd5a03d18cfe1e</anchor>
      <arglist>(const Phase &amp;a, const Phase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhaseRing::NextPhase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac2feceb2c2c7e833f1513f2e7980589b</anchor>
      <arglist>(const PhaseRing::NextPhase &amp;a, const PhaseRing::NextPhase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; PhaseRing::NextPhase &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a8ec97e6a1eb755eec1dd3a46be0e663b</anchor>
      <arglist>(const std::vector&lt; PhaseRing::NextPhase &gt; &amp;a, const std::vector&lt; PhaseRing::NextPhase &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule::Range &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac1ae78bac143112dfa38fa8cb2663009</anchor>
      <arglist>(const RangeValueRule::Range &amp;a, const RangeValueRule::Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; RangeValueRule::Range &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad63b2658fb261295617e5d87976b4f07</anchor>
      <arglist>(const std::vector&lt; RangeValueRule::Range &gt; &amp;a, const std::vector&lt; RangeValueRule::Range &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a10d499f1d9aeb43c5510733d2fdee2b5</anchor>
      <arglist>(const RangeValueRule &amp;a, const RangeValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a827bc3bbcdcc4f84fa63c6406017d1d8</anchor>
      <arglist>(const DiscreteValueRule &amp;a, const DiscreteValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aac2491d5f89fa9757adcd961b115d2e1</anchor>
      <arglist>(const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aca0215ac78c560613fb4f6cf9b7bf5f4</anchor>
      <arglist>(DirectionUsageRule::State::Type a, DirectionUsageRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4bf0ba6a1cd5f9e7609330b9781476f3</anchor>
      <arglist>(DirectionUsageRule::State::Severity a, DirectionUsageRule::State::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abebeeaa7e17710a0cbd1ac8b13ca3c3c</anchor>
      <arglist>(const DirectionUsageRule::State &amp;a, const DirectionUsageRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a602ca78a52ab4edd78cf3f6bd1b19d1e</anchor>
      <arglist>(const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;a, const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9b0c2979c735e8f7ad4f362e3294f0cf</anchor>
      <arglist>(const DirectionUsageRule &amp;a, const DirectionUsageRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::ZoneType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aaedba4d6b9f741b9f611879f2bd56128</anchor>
      <arglist>(rules::RightOfWayRule::ZoneType a, rules::RightOfWayRule::ZoneType b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4910894724f5c5d708348a2d3d947d73</anchor>
      <arglist>(rules::RightOfWayRule::State::Type a, rules::RightOfWayRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; rules::RightOfWayRule::Id &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a1693b9b252363302b27bf839605d46ae</anchor>
      <arglist>(const std::vector&lt; rules::RightOfWayRule::Id &gt; &amp;a, const std::vector&lt; rules::RightOfWayRule::Id &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a3555a18aa26fb32d21b15c3b05815701</anchor>
      <arglist>(const rules::RightOfWayRule::State &amp;a, const rules::RightOfWayRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6e43dd8a2c8b7adce4accf28287439cb</anchor>
      <arglist>(const std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &amp;a, const std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a965aabd181e7f30267d069dfbefead6a</anchor>
      <arglist>(const RightOfWayRule &amp;a, const RightOfWayRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRuleStateProvider::RightOfWayResult &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad8fe47aec69e25617f657dcfa704b98d</anchor>
      <arglist>(const rules::RightOfWayRuleStateProvider::RightOfWayResult &amp;a, const rules::RightOfWayRuleStateProvider::RightOfWayResult &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::SpeedLimitRule::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad800885b472aa22fb68ca2715749bad6</anchor>
      <arglist>(rules::SpeedLimitRule::Severity a, rules::SpeedLimitRule::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::SpeedLimitRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a29519b9edca82b00edbcca667d7ab888</anchor>
      <arglist>(const rules::SpeedLimitRule &amp;a, const rules::SpeedLimitRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt; &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>af8e58c672542d2e4d423897401aab24e</anchor>
      <arglist>(const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;a, const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbColor &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>acea4e4a30df6f586298a64b73300b4a6</anchor>
      <arglist>(const BulbColor &amp;a, const BulbColor &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a917a3bcc37f446034d075b2faa0a6b6e</anchor>
      <arglist>(const BulbType &amp;a, const BulbType &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbState &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a06c24e637236f751f36dcdae579f74d3</anchor>
      <arglist>(const BulbState &amp;a, const BulbState &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; BulbStates &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abc5fd5d8ecab29d55de671979a19e9a8</anchor>
      <arglist>(const std::optional&lt; BulbStates &gt; &amp;a, const std::optional&lt; BulbStates &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; double &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aaed7bb4434dbd9ceb45ccb63face03af</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;a, const std::optional&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb::BoundingBox &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a009baf985ccd9faaad716f3ffbde8818</anchor>
      <arglist>(const Bulb::BoundingBox &amp;a, const Bulb::BoundingBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a964b62ec16aad58eadaac5bd2874cd5c</anchor>
      <arglist>(const Bulb *a, const Bulb *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; const Bulb * &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a218a821205187039ebbdc17e9472a0e3</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const std::vector&lt; const Bulb * &gt; &amp;a, const std::vector&lt; const Bulb * &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbGroup &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac89bb07221b67b33f53850b7c9e9838a</anchor>
      <arglist>(const BulbGroup *a, const BulbGroup *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; TrafficLight &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ada0b3d3130a0150d03f22411e9ec2bfc</anchor>
      <arglist>(const TrafficLight *a, const TrafficLight *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math/compare.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>math_2compare_8cc.html</filename>
    <includes id="math_2compare_8h" name="math/compare.h" local="yes" imported="no">maliput/math/compare.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::VectorBase&lt; N, Derived &gt; &gt;</type>
      <name>CompareVectors</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a47b0c922c564c1155b1d36e5b7f7b9d3</anchor>
      <arglist>(const math::VectorBase&lt; N, Derived &gt; &amp;v1, const math::VectorBase&lt; N, Derived &gt; &amp;v2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::Matrix&lt; N &gt; &gt;</type>
      <name>CompareMatrices</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a656c890f9af05404d925f2fd52324beb</anchor>
      <arglist>(const math::Matrix&lt; N &gt; &amp;m1, const math::Matrix&lt; N &gt; &amp;m2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing/compare.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>routing_2compare_8cc.html</filename>
    <includes id="routing_2compare_8h" name="routing/compare.h" local="yes" imported="no">maliput/routing/compare.h</includes>
    <includes id="api_2compare_8h" name="api/compare.h" local="yes" imported="no">maliput/api/compare.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhasePositionResult &gt;</type>
      <name>IsPhasePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>aa8d966c064b4aa0db718eb9b30eba3b7</anchor>
      <arglist>(const PhasePositionResult &amp;ppr_a, const PhasePositionResult &amp;ppr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoutePositionResult &gt;</type>
      <name>IsRoutePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a6f39ff2a2a1cc054cd36b637f5db86b2</anchor>
      <arglist>(const RoutePositionResult &amp;rpr_a, const RoutePositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/compare.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2compare_8h.html</filename>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="common_2compare_8h" name="common/compare.h" local="yes" imported="no">maliput/common/compare.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePositionResult &gt;</type>
      <name>IsLanePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a189db2b6c069d74f1643e510b2ba3f9f</anchor>
      <arglist>(const LanePositionResult &amp;lpr_a, const LanePositionResult &amp;lpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoadPositionResult &gt;</type>
      <name>IsRoadPositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc4737b8e01dd40ef4b03ae668f78357</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;rpr_a, const maliput::api::RoadPositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsInertialPositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a5257d7064e7c5f3d9e8b543b18737ece</anchor>
      <arglist>(const InertialPosition &amp;pos1, const InertialPosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePosition &gt;</type>
      <name>IsLanePositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aab04b7759b264bea5aa98a8c5d0ba92f</anchor>
      <arglist>(const LanePosition &amp;pos1, const LanePosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsRotationClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab614274503f66904453dbe7df1418872</anchor>
      <arglist>(const Rotation &amp;rot1, const Rotation &amp;rot2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RBounds &gt;</type>
      <name>IsRBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aae0d5876f143bae90467aab92f4c4799</anchor>
      <arglist>(const RBounds &amp;rbounds1, const RBounds &amp;rbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; HBounds &gt;</type>
      <name>IsHBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9ab2f16b53bbe8119b92f357c9e4007a</anchor>
      <arglist>(const HBounds &amp;hbounds1, const HBounds &amp;hbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsLaneEndEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a4d3dd63ef50b18662dbfecbad3ab4222</anchor>
      <arglist>(const LaneEnd &amp;lane_end1, const LaneEnd &amp;lane_end2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Junction &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a14c009382ff3ec884ffbdbbe9c77e53e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Junction *a, const Junction *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Segment &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aebd496c20514127f152a58234d5f2e46</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Segment *a, const Segment *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Lane &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a92104863cc85fffe8cf24d730d90c3d5</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Lane *a, const Lane *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BranchPoint &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ad839c893606e35b71870c973735f2388</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const BranchPoint *a, const BranchPoint *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; bool &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a875dc08f7e6920a937b74e8f6277bfdb</anchor>
      <arglist>(const char *a_expression, const char *b_expression, bool a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; double &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc0698791787e063312963e3ddbbb0e1</anchor>
      <arglist>(const char *a_expression, const char *b_expression, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::size_t &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab90f768fcf35f41cc11e991e1b56070e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, std::size_t a, std::size_t b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; TypeSpecificIdentifier&lt; T &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ad3b047c6def3cb9a61471fd97a7ca185</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const TypeSpecificIdentifier&lt; T &gt; &amp;a, const TypeSpecificIdentifier&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a54a377f86e3fe9bdba070ad995ea9c43</anchor>
      <arglist>(const SRange &amp;s_range_1, const SRange &amp;s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aa2149e3694b14710b9532dd46d942c9d</anchor>
      <arglist>(const LaneSRange &amp;lane_s_range_1, const LaneSRange &amp;lane_s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; LaneSRange &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a655a6daa38d963ca4d5c891e1a954462</anchor>
      <arglist>(const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_1, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRoute &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3989128857764f83815fb37b7908ae38</anchor>
      <arglist>(const LaneSRoute &amp;lane_s_route_1, const LaneSRoute &amp;lane_s_route_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9f413a2a34bdae4caea6741672077217</anchor>
      <arglist>(const InertialPosition &amp;inertial_position_1, const InertialPosition &amp;inertial_position_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a718452968e53dc8ac4a02d12b6702d4a</anchor>
      <arglist>(const Rotation &amp;rotation_1, const Rotation &amp;rotation_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd::Which &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a20369172b027ed8a4154e2a2af78514f</anchor>
      <arglist>(const LaneEnd::Which &amp;which_1, const LaneEnd::Which &amp;which_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aaa5fa369b98544a98a81ccda4684c393</anchor>
      <arglist>(const LaneEnd &amp;lane_end_1, const LaneEnd &amp;lane_end_2)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>CheckIdIndexing</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3a6309cbd7aad2179ccd00c1d00c4722</anchor>
      <arglist>(const RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/rules/compare.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>api_2rules_2compare_8h.html</filename>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="right__of__way__rule__state__provider_8h" name="right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule_state_provider.h</includes>
    <includes id="speed__limit__rule_8h" name="speed_limit_rule.h" local="yes" imported="no">maliput/api/rules/speed_limit_rule.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="common_2compare_8h" name="common/compare.h" local="yes" imported="no">maliput/common/compare.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; RuleStates &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a0cfb3eca710e367eab908684ddfdf980</anchor>
      <arglist>(const RuleStates &amp;a, const RuleStates &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Phase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9f1f6e26d3f3580677fd5a03d18cfe1e</anchor>
      <arglist>(const Phase &amp;a, const Phase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhaseRing::NextPhase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac2feceb2c2c7e833f1513f2e7980589b</anchor>
      <arglist>(const PhaseRing::NextPhase &amp;a, const PhaseRing::NextPhase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; PhaseRing::NextPhase &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a8ec97e6a1eb755eec1dd3a46be0e663b</anchor>
      <arglist>(const std::vector&lt; PhaseRing::NextPhase &gt; &amp;a, const std::vector&lt; PhaseRing::NextPhase &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule::Range &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac1ae78bac143112dfa38fa8cb2663009</anchor>
      <arglist>(const RangeValueRule::Range &amp;a, const RangeValueRule::Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a10d499f1d9aeb43c5510733d2fdee2b5</anchor>
      <arglist>(const RangeValueRule &amp;a, const RangeValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; RangeValueRule::Range &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad63b2658fb261295617e5d87976b4f07</anchor>
      <arglist>(const std::vector&lt; RangeValueRule::Range &gt; &amp;a, const std::vector&lt; RangeValueRule::Range &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule::DiscreteValue &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a5c14748b1ad34975cf9468c177feade9</anchor>
      <arglist>(const DiscreteValueRule::DiscreteValue &amp;a, const DiscreteValueRule::DiscreteValue &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a827bc3bbcdcc4f84fa63c6406017d1d8</anchor>
      <arglist>(const DiscreteValueRule &amp;a, const DiscreteValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aac2491d5f89fa9757adcd961b115d2e1</anchor>
      <arglist>(const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a527d13d667c2731c3644b7935b309009</anchor>
      <arglist>(const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aca0215ac78c560613fb4f6cf9b7bf5f4</anchor>
      <arglist>(DirectionUsageRule::State::Type a, DirectionUsageRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4bf0ba6a1cd5f9e7609330b9781476f3</anchor>
      <arglist>(DirectionUsageRule::State::Severity a, DirectionUsageRule::State::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abebeeaa7e17710a0cbd1ac8b13ca3c3c</anchor>
      <arglist>(const DirectionUsageRule::State &amp;a, const DirectionUsageRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a602ca78a52ab4edd78cf3f6bd1b19d1e</anchor>
      <arglist>(const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;a, const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9b0c2979c735e8f7ad4f362e3294f0cf</anchor>
      <arglist>(const DirectionUsageRule &amp;a, const DirectionUsageRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::ZoneType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae4cb55f9970dbbd07a67a3c61eadef75</anchor>
      <arglist>(RightOfWayRule::ZoneType a, RightOfWayRule::ZoneType b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a5b736599074667b726bf341d361cf0c0</anchor>
      <arglist>(RightOfWayRule::State::Type a, RightOfWayRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; RightOfWayRule::Id &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a571a9b0c909d02cbfcdb8dcf9564dad2</anchor>
      <arglist>(const std::vector&lt; RightOfWayRule::Id &gt; &amp;a, const std::vector&lt; RightOfWayRule::Id &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aafb6336b4ee5dad06762b2a95da4f231</anchor>
      <arglist>(const RightOfWayRule::State &amp;a, const RightOfWayRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6c76877f16e32e3111d1d99870329f58</anchor>
      <arglist>(const std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &amp;a, const std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a965aabd181e7f30267d069dfbefead6a</anchor>
      <arglist>(const RightOfWayRule &amp;a, const RightOfWayRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRuleStateProvider::RightOfWayResult &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aabbeb1c527d15b5c6f74830c9827dd62</anchor>
      <arglist>(const RightOfWayRuleStateProvider::RightOfWayResult &amp;a, const RightOfWayRuleStateProvider::RightOfWayResult &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SpeedLimitRule::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6cbac4e690784344f88131948f936080</anchor>
      <arglist>(SpeedLimitRule::Severity a, SpeedLimitRule::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SpeedLimitRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>af5fd6917a97424ba3652c748b2e14023</anchor>
      <arglist>(const SpeedLimitRule &amp;a, const SpeedLimitRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt; &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>af8e58c672542d2e4d423897401aab24e</anchor>
      <arglist>(const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;a, const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbColor &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>acea4e4a30df6f586298a64b73300b4a6</anchor>
      <arglist>(const BulbColor &amp;a, const BulbColor &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a917a3bcc37f446034d075b2faa0a6b6e</anchor>
      <arglist>(const BulbType &amp;a, const BulbType &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbState &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a06c24e637236f751f36dcdae579f74d3</anchor>
      <arglist>(const BulbState &amp;a, const BulbState &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; BulbStates &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abc5fd5d8ecab29d55de671979a19e9a8</anchor>
      <arglist>(const std::optional&lt; BulbStates &gt; &amp;a, const std::optional&lt; BulbStates &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; double &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aaed7bb4434dbd9ceb45ccb63face03af</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;a, const std::optional&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb::BoundingBox &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a009baf985ccd9faaad716f3ffbde8818</anchor>
      <arglist>(const Bulb::BoundingBox &amp;a, const Bulb::BoundingBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a964b62ec16aad58eadaac5bd2874cd5c</anchor>
      <arglist>(const Bulb *a, const Bulb *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; const Bulb * &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a218a821205187039ebbdc17e9472a0e3</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const std::vector&lt; const Bulb * &gt; &amp;a, const std::vector&lt; const Bulb * &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbGroup &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac89bb07221b67b33f53850b7c9e9838a</anchor>
      <arglist>(const BulbGroup *a, const BulbGroup *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; TrafficLight &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ada0b3d3130a0150d03f22411e9ec2bfc</anchor>
      <arglist>(const TrafficLight *a, const TrafficLight *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common/compare.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>common_2compare_8h.html</filename>
    <class kind="struct">maliput::common::ComparisonResult</class>
    <class kind="class">maliput::common::ComparisonResultCollector</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_ADD_RESULT</name>
      <anchorfile>common_2compare_8h.html</anchorfile>
      <anchor>a4c8aad0ea6a1093783ef9174c9231b63</anchor>
      <arglist>(collector, result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math/compare.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>math_2compare_8h.html</filename>
    <includes id="common_2compare_8h" name="common/compare.h" local="yes" imported="no">maliput/common/compare.h</includes>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">maliput/math/matrix.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CompareType</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>afbc5396d9a88c41d6aeb522b9f06f426</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="afbc5396d9a88c41d6aeb522b9f06f426abab0767e88027de9944aa55c24c8387a">kAbsolute</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="afbc5396d9a88c41d6aeb522b9f06f426af460a96ab20647996c15854794763384">kRelative</enumvalue>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::VectorBase&lt; N, Derived &gt; &gt;</type>
      <name>CompareVectors</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a47b0c922c564c1155b1d36e5b7f7b9d3</anchor>
      <arglist>(const math::VectorBase&lt; N, Derived &gt; &amp;v1, const math::VectorBase&lt; N, Derived &gt; &amp;v2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::Matrix&lt; N &gt; &gt;</type>
      <name>CompareMatrices</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a656c890f9af05404d925f2fd52324beb</anchor>
      <arglist>(const math::Matrix&lt; N &gt; &amp;m1, const math::Matrix&lt; N &gt; &amp;m2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing/compare.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>routing_2compare_8h.html</filename>
    <includes id="common_2compare_8h" name="common/compare.h" local="yes" imported="no">maliput/common/compare.h</includes>
    <includes id="route__position__result_8h" name="route_position_result.h" local="yes" imported="no">maliput/routing/route_position_result.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhasePositionResult &gt;</type>
      <name>IsPhasePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>aa8d966c064b4aa0db718eb9b30eba3b7</anchor>
      <arglist>(const PhasePositionResult &amp;ppr_a, const PhasePositionResult &amp;ppr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoutePositionResult &gt;</type>
      <name>IsRoutePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a6f39ff2a2a1cc054cd36b637f5db86b2</anchor>
      <arglist>(const RoutePositionResult &amp;rpr_a, const RoutePositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constants.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>constants_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ToleranceType</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af8777bc10296f9d39d52753861110e26</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="af8777bc10296f9d39d52753861110e26abab0767e88027de9944aa55c24c8387a">kAbsolute</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="af8777bc10296f9d39d52753861110e26af460a96ab20647996c15854794763384">kRelative</enumvalue>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kQuaternionSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a07869e660ffe730425feca7595de2273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kSpaceDimension</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af869092c52ed7cc9d2db40ce56050c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kRpySize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aeab5b0d99cafc2f6ae5812128cea27a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kTwistSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ac9ce1d9cce0ad61dd2f5a295c1a10fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kHomogeneousTransformSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a63c55e4d8662e0986e79d11486334486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>kRotmatSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ace32fe90adc0d2100ad4fc9f4bc6f79a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>context.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>context_8cc.html</filename>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="pointer__cast_8h" name="pointer_cast.h" local="yes" imported="no">maliput/drake/common/pointer_cast.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>context.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>context_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <includes id="parameters_8h" name="parameters.h" local="yes" imported="no">maliput/drake/systems/framework/parameters.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">maliput/drake/systems/framework/state.h</includes>
    <class kind="class">maliput::drake::systems::Context</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ad3ab18736569164bfe5881a6fc0766cc</anchor>
      <arglist>(std::ostream &amp;os, const Context&lt; T &gt; &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>context_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>context__base_8cc.html</filename>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>context_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>context__base_8h.html</filename>
    <includes id="reset__on__copy_8h" name="reset_on_copy.h" local="yes" imported="no">maliput/drake/common/reset_on_copy.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="cache_8h" name="cache.h" local="yes" imported="no">maliput/drake/systems/framework/cache.h</includes>
    <includes id="dependency__tracker_8h" name="dependency_tracker.h" local="yes" imported="no">maliput/drake/systems/framework/dependency_tracker.h</includes>
    <includes id="fixed__input__port__value_8h" name="fixed_input_port_value.h" local="yes" imported="no">maliput/drake/systems/framework/fixed_input_port_value.h</includes>
    <class kind="class">maliput::drake::systems::ContextBase</class>
    <class kind="class">maliput::drake::systems::internal::SystemBaseContextBaseAttorney</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>continuous_state.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>continuous__state_8cc.html</filename>
    <includes id="continuous__state_8h" name="continuous_state.h" local="yes" imported="no">maliput/drake/systems/framework/continuous_state.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="subvector_8h" name="subvector.h" local="yes" imported="no">maliput/drake/systems/framework/subvector.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>continuous_state.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>continuous__state_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="scalar__conversion__traits_8h" name="scalar_conversion_traits.h" local="yes" imported="no">maliput/drake/systems/framework/scalar_conversion_traits.h</includes>
    <includes id="vector__base_8h" name="vector_base.h" local="yes" imported="no">maliput/drake/systems/framework/vector_base.h</includes>
    <class kind="class">maliput::drake::systems::ContinuousState</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>copyable_unique_ptr.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>copyable__unique__ptr_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <class kind="class">maliput::drake::copyable_unique_ptr</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>create_road_network.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/plugin/</path>
    <filename>create__road__network_8cc.html</filename>
    <includes id="create__road__network_8h" name="create_road_network.h" local="yes" imported="no">maliput/plugin/create_road_network.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__plugin_8h" name="maliput_plugin.h" local="yes" imported="no">maliput/plugin/maliput_plugin.h</includes>
    <includes id="maliput__plugin__manager_8h" name="maliput_plugin_manager.h" local="yes" imported="no">maliput/plugin/maliput_plugin_manager.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::plugin::RoadNetworkLoader &gt;</type>
      <name>MakeRoadNetworkLoader</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a4d44dfc15ed8c612a7a803b0033b6a80</anchor>
      <arglist>(const std::string &amp;road_network_loader_id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::api::RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a995734bfcb7af87c6f7dc4fc81bbd11b</anchor>
      <arglist>(const std::string &amp;road_network_loader_id, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>create_road_network.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>create__road__network_8h.html</filename>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="road__network__loader_8h" name="road_network_loader.h" local="yes" imported="no">maliput/plugin/road_network_loader.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::api::RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a995734bfcb7af87c6f7dc4fc81bbd11b</anchor>
      <arglist>(const std::string &amp;road_network_loader_id, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::plugin::RoadNetworkLoader &gt;</type>
      <name>MakeRoadNetworkLoader</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a4d44dfc15ed8c612a7a803b0033b6a80</anchor>
      <arglist>(const std::string &amp;road_network_loader_id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>default_scalars.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>default__scalars_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gad69d96bfd76d7750f2d40ebe0a546b3c</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gab6234c37b7596964a364d799933f4a17</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3a791089d1bcf2fe7724f81ebc0a79e0</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga6333534b3097a37c55fbacf434491e2e</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3273477e81e9dcb7d96cfb28382798b6</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga9f6a41d03cbe6efaef098ae88ccbed6e</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gad69d96bfd76d7750f2d40ebe0a546b3c</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gab6234c37b7596964a364d799933f4a17</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3a791089d1bcf2fe7724f81ebc0a79e0</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga6333534b3097a37c55fbacf434491e2e</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3273477e81e9dcb7d96cfb28382798b6</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga9f6a41d03cbe6efaef098ae88ccbed6e</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dense_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>dense__output_8cc.html</filename>
    <includes id="dense__output_8h" name="dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/dense_output.h</includes>
  </compound>
  <compound kind="file">
    <name>dense_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>dense__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <class kind="class">maliput::drake::systems::DenseOutput</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>dependency_tracker.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>dependency__tracker_8cc.html</filename>
    <includes id="dependency__tracker_8h" name="dependency_tracker.h" local="yes" imported="no">maliput/drake/systems/framework/dependency_tracker.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>dependency_tracker.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>dependency__tracker_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="text__logging_8h" name="text_logging.h" local="yes" imported="no">maliput/drake/common/text_logging.h</includes>
    <includes id="cache_8h" name="cache.h" local="yes" imported="no">maliput/drake/systems/framework/cache.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::DependencyTracker</class>
    <class kind="class">maliput::drake::systems::DependencyGraph</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>derive_lane_s_routes.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>derive__lane__s__routes_8cc.html</filename>
    <includes id="derive__lane__s__routes_8h" name="derive_lane_s_routes.h" local="yes" imported="no">maliput/routing/derive_lane_s_routes.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">maliput/common/profiler.h</includes>
    <includes id="find__lane__sequences_8h" name="find_lane_sequences.h" local="yes" imported="no">maliput/routing/find_lane_sequences.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>std::vector&lt; api::LaneSRoute &gt;</type>
      <name>DeriveLaneSRoutes</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a50450cdc6c1aefc360378b2dd8e7cafd</anchor>
      <arglist>(const api::RoadPosition &amp;start, const api::RoadPosition &amp;end, double max_length_m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>derive_lane_s_routes.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>derive__lane__s__routes_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>std::vector&lt; api::LaneSRoute &gt;</type>
      <name>DeriveLaneSRoutes</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a50450cdc6c1aefc360378b2dd8e7cafd</anchor>
      <arglist>(const api::RoadPosition &amp;start, const api::RoadPosition &amp;end, double max_length_m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>direction_usage_rule.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>direction__usage__rule_8cc.html</filename>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>direction_usage_rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>direction__usage__rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a22caa4eb253ffe3163ac3b3bb3cdce2a</anchor>
      <arglist>(&quot;DirectionUsageRule will be deprecated&quot;, &quot;DiscreteValueRule&quot;) DirectionUsageRule final</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>discrete_systems.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/</path>
    <filename>discrete__systems_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>discrete_value_rule.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>discrete__value__rule_8cc.html</filename>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>discrete_value_rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>discrete__value__rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::DiscreteValueRule</class>
    <class kind="struct">maliput::api::rules::DiscreteValueRule::DiscreteValue</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>discrete_value_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>discrete__value__rule__state__provider_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="state__provider__result_8h" name="state_provider_result.h" local="yes" imported="no">maliput/api/rules/state_provider_result.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::DiscreteValueRuleStateProvider</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>discrete_values.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>discrete__values_8cc.html</filename>
    <includes id="discrete__values_8h" name="discrete_values.h" local="yes" imported="no">maliput/drake/systems/framework/discrete_values.h</includes>
  </compound>
  <compound kind="file">
    <name>discrete_values.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>discrete__values_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="scalar__conversion__traits_8h" name="scalar_conversion_traits.h" local="yes" imported="no">maliput/drake/systems/framework/scalar_conversion_traits.h</includes>
    <class kind="class">maliput::drake::systems::DiscreteValues</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>drake_assert.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__assert_8h.html</filename>
    <class kind="struct">maliput::drake::assert::ConditionTraits</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <namespace>maliput::drake::assert</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_ASSERT_IS_ARMED</name>
      <anchorfile>drake__assert_8h.html</anchorfile>
      <anchor>aeea0663c7230771fbadc47e65e08cefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_UNREACHABLE</name>
      <anchorfile>drake__assert_8h.html</anchorfile>
      <anchor>a618e2999a9c3baefee36328fe493420a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_DEMAND</name>
      <anchorfile>drake__assert_8h.html</anchorfile>
      <anchor>a8b0b0fac431b983436312fd38f1449e9</anchor>
      <arglist>(condition)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_ASSERT</name>
      <anchorfile>drake__assert_8h.html</anchorfile>
      <anchor>a6fea92fe00ff56bd245658261a91464b</anchor>
      <arglist>(condition)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_ASSERT_VOID</name>
      <anchorfile>drake__assert_8h.html</anchorfile>
      <anchor>a63d6aa0d26dc75a3b3079a7dc7653f4a</anchor>
      <arglist>(expression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>ad2abe8136e08b5f797c53bd05f8328fa</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertionFailed</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a4d931b90810bf1c0017fc60634871042</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kDrakeAssertIsArmed</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae5ffa02b326b2dd39e7f6cbc4606b61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kDrakeAssertIsDisarmed</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aaef73489ed741143f9d712623e53b6da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>drake_assert_and_throw.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>drake__assert__and__throw_8cc.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="drake__assertion__error_8h" name="drake_assertion_error.h" local="yes" imported="no">maliput/drake/common/drake_assertion_error.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>ad2abe8136e08b5f797c53bd05f8328fa</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a2fc2284f318fd605ea71cdc006537d00</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertionFailed</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a4d931b90810bf1c0017fc60634871042</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="variable">
      <type>std::atomic&lt; bool &gt;</type>
      <name>assertion_failures_are_exceptions</name>
      <anchorfile>drake__assert__and__throw_8cc.html</anchorfile>
      <anchor>ad4ac0d3983c41aa6814f7da9cbee73b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>drake_assertion_error.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__assertion__error_8h.html</filename>
    <class kind="class">maliput::drake::internal::assertion_error</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
  </compound>
  <compound kind="file">
    <name>drake_bool.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__bool_8h.html</filename>
    <class kind="struct">maliput::drake::scalar_predicate</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="typedef">
      <type>typename scalar_predicate&lt; T &gt;::type</type>
      <name>boolean</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a1f1c657c4d2cf400649123a7c2573d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>all</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a18197d6999dda546d996d5b8dfccd53a</anchor>
      <arglist>(const Eigen::DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>all_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aea88dde6d4dd05c07a631ac8b94ef5e7</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>any</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a87f661d87ca8519af1494a8c045aef91</anchor>
      <arglist>(const Eigen::DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>any_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a581bce854832eed48d47ead042014dd0</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>none</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a78e78dcc4c899c0f86a05e8f8c5df78f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>none_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acfc3e8670f86d1c69eaf29ad072865cc</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>drake_copyable.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__copyable_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>drake__copyable_8h.html</anchorfile>
      <anchor>a3ee22789c29a46dddd6a7fd2b982731c</anchor>
      <arglist>(Classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>drake__copyable_8h.html</anchorfile>
      <anchor>ae6322b9e40935343a422cbdfb41e310e</anchor>
      <arglist>(Classname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>drake_deprecated.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__deprecated_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>drake__deprecated_8h.html</anchorfile>
      <anchor>a847d827d084f28e4ae1788a0ae75be96</anchor>
      <arglist>(removal_date, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>drake_throw.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>drake__throw_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DRAKE_THROW_UNLESS</name>
      <anchorfile>drake__throw_8h.html</anchorfile>
      <anchor>af78b366e830763496aed9b17d2659c3a</anchor>
      <arglist>(condition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a2fc2284f318fd605ea71cdc006537d00</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>DrakeThrowUnlessWasUsedWithRawPointer</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a4bdcbd8e35ca94dc55c1d70da84b7c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>DrakeThrowUnlessWasUsedWithRawPointer&lt; true &gt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>ad05094dfcfee3d0bc0ede508399de0a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dummy_value.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>dummy__value_8h.html</filename>
    <class kind="struct">maliput::drake::dummy_value</class>
    <class kind="struct">maliput::drake::dummy_value&lt; int &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>eigen_stl_types.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>eigen__stl__types_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="typedef">
      <type>std::map&lt; Key, T, std::less&lt; Key &gt;, Eigen::aligned_allocator&lt; std::pair&lt; Key const, T &gt; &gt;&gt;</type>
      <name>eigen_aligned_std_map</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae13e10d823b0e212fdfb27cc8f18065a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; Key, T, std::hash&lt; Key &gt;, std::equal_to&lt; Key &gt;, Eigen::aligned_allocator&lt; std::pair&lt; Key const, T &gt; &gt;&gt;</type>
      <name>eigen_aligned_std_unordered_map</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afcadf96d397f45d041d01bf17061bc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T, Eigen::aligned_allocator&lt; T &gt; &gt;</type>
      <name>eigen_aligned_std_vector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4150555527b3cf871fe911f8776f301a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigen_types.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>eigen__types_8h.html</filename>
    <includes id="constants_8h" name="constants.h" local="yes" imported="no">maliput/drake/common/constants.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="struct">maliput::drake::EigenSizeMinPreferDynamic</class>
    <class kind="struct">maliput::drake::EigenSizeMinPreferFixed</class>
    <class kind="struct">maliput::drake::MultiplyEigenSizes</class>
    <class kind="struct">maliput::drake::is_eigen_type</class>
    <class kind="struct">maliput::drake::is_eigen_scalar_same</class>
    <class kind="struct">maliput::drake::is_eigen_vector</class>
    <class kind="struct">maliput::drake::is_eigen_vector_of</class>
    <class kind="struct">maliput::drake::is_eigen_nonvector_of</class>
    <class kind="class">maliput::drake::EigenPtr</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 0, 1 &gt;</type>
      <name>Vector0</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acda0b15d77e4c1701d160b17a2cb2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 1 &gt;</type>
      <name>Vector1</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af359dfdb84d6c13b606bb3ed7b821e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Vector1d</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a6d923e79e6e92c2556edd86520145077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, 1 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab9f8b7dbd727440c2dd207bf43812f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0ad29daab565ce347c4d1c5aae6a76c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, 1 &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af7e96394aef85f13f3fc84d3c3c238b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a14aa433aedda321a15238f2d4074d4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a44f103cf5fdeb3f539ceeeb9cd3a0a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Rows, 1 &gt;</type>
      <name>Vector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a01ae662d5635b7c9efe03d15d976f7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a77dd228fb4dd66a2c17dd3f7f38ffd85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, 1, 0, 6, 1 &gt;</type>
      <name>VectorUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>adfbacdba0566fe8958cfafd659b4373f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 2 &gt;</type>
      <name>RowVector2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afc54e1f7aa3341a5f6b305705452d9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 3 &gt;</type>
      <name>RowVector3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aee4ae0d841ea1629551bf77fd5d9ec9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 4 &gt;</type>
      <name>RowVector4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aa9b373b2971391d9054b431d8a3e4b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 6 &gt;</type>
      <name>RowVector6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3ad88c2d704ccb2899d475d3ae05de14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, Cols &gt;</type>
      <name>RowVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3eb9dffa1f3d48e4c5fe406e5a4617fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, Eigen::Dynamic &gt;</type>
      <name>RowVectorX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a218f39990d2d9090c7a25c9c18cbf832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, 2 &gt;</type>
      <name>Matrix2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a06406a5da633da84f911e2979aa48549</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3922cc0c6264e8ff225a6aa0dd993667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, 4 &gt;</type>
      <name>Matrix4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae74155a11dfcdaad0adc0349f0956148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 6 &gt;</type>
      <name>Matrix6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a11f9aa896d31437a219ed19fa944fe20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, Eigen::Dynamic &gt;</type>
      <name>Matrix2X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af13883859324817e6310d04a6d2fe206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, Eigen::Dynamic &gt;</type>
      <name>Matrix3X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acfe2dee57bc492bfbd96fe078b65ab00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, Eigen::Dynamic &gt;</type>
      <name>Matrix4X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a585f047d94502e00bfb163347abbc771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, Eigen::Dynamic &gt;</type>
      <name>Matrix6X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a668e1152f8b876967b9093ae4d95298b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>MatrixX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a28c58d881c60e96f48a7a4e32a699b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, Eigen::Dynamic, 0, 6, 6 &gt;</type>
      <name>MatrixUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>abc0efed85a04025fda487f0d59b71d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, Eigen::Dynamic, 0, 6, 6 &gt;</type>
      <name>Matrix6xUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae2b0be18a912f9cacfec6d0a0a6d873c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; Scalar &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4156bf453a5b323356d7cc784dfdf084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxis</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a90d91e75997a81a48adea1e83caddde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Transform&lt; Scalar, 3, Eigen::Isometry &gt;</type>
      <name>Isometry3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a9eb383d64a842ca9002f66b2e10254aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Translation&lt; Scalar, 3 &gt;</type>
      <name>Translation3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a50f8d19f395776637448f26e734228f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, 1 &gt;</type>
      <name>TwistVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afbf249fd84580486a877500bed5a0b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, Eigen::Dynamic &gt;</type>
      <name>TwistMatrix</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af30fe85a821bd0e0ab46f2e165c8e480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, kTwistSize &gt;</type>
      <name>SquareTwistMatrix</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3aa72a15690d6e4db2040ebc8814a74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</type>
      <name>WrenchVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af98fed5f98c376f4d45fff56bb96c8e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>event.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>event_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="continuous__state_8h" name="continuous_state.h" local="yes" imported="no">maliput/drake/systems/framework/continuous_state.h</includes>
    <includes id="event__status_8h" name="event_status.h" local="yes" imported="no">maliput/drake/systems/framework/event_status.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::WitnessFunction</class>
    <class kind="class">maliput::drake::systems::EventCollection</class>
    <class kind="class">maliput::drake::systems::LeafEventCollection</class>
    <class kind="class">maliput::drake::systems::CompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::LeafCompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::EventData</class>
    <class kind="class">maliput::drake::systems::PeriodicEventData</class>
    <class kind="class">maliput::drake::systems::WitnessTriggeredEventData</class>
    <class kind="class">maliput::drake::systems::Event</class>
    <class kind="struct">maliput::drake::systems::PeriodicEventDataComparator</class>
    <class kind="class">maliput::drake::systems::PublishEvent</class>
    <class kind="class">maliput::drake::systems::DiscreteUpdateEvent</class>
    <class kind="class">maliput::drake::systems::UnrestrictedUpdateEvent</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="typedef">
      <type>std::unordered_set&lt; TriggerType, DefaultHash &gt;</type>
      <name>TriggerTypeSet</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ac84c84e9fbb652ce19106e2f2e1f3d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TriggerType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a59b7f49353f2a99b6c22d2eaae0fe9e9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a25c2dc47991b3df171ed5192bcf70390">kUnknown</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a1800fd44ac807b793ceba2dd9cef1e25">kInitialization</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9af8ece195be5dd5e820bdeee7ad21a4bf">kForced</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a4ee52a6184757eae288c6bfaca2b3cc8">kTimed</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9aa4dadcf41a1fb6841557aad7688dc1a4">kPeriodic</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a04a6eca450c24af0269212fb90c57d9f">kPerStep</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a74e1dac7f98f52df26d510f93c36ae34">kWitness</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>event_collection.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>event__collection_8cc.html</filename>
    <includes id="event__collection_8h" name="event_collection.h" local="yes" imported="no">maliput/drake/systems/framework/event_collection.h</includes>
  </compound>
  <compound kind="file">
    <name>event_collection.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>event__collection_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="pointer__cast_8h" name="pointer_cast.h" local="yes" imported="no">maliput/drake/common/pointer_cast.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="event_8h" name="event.h" local="yes" imported="no">maliput/drake/systems/framework/event.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">maliput/drake/systems/framework/state.h</includes>
    <class kind="class">maliput::drake::systems::EventCollection</class>
    <class kind="class">maliput::drake::systems::DiagramEventCollection</class>
    <class kind="class">maliput::drake::systems::LeafEventCollection</class>
    <class kind="class">maliput::drake::systems::CompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::LeafCompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::DiagramCompositeEventCollection</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>event_status.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>event__status_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="class">maliput::drake::systems::EventStatus</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>extract_double.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>extract__double_8h.html</filename>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aef84e5a8cff869d8a840d52578ae89db</anchor>
      <arglist>(&quot;2020-08-01&quot;, &quot;Provide a specific overload of ExtractDoubleOrThrow for any &quot; &quot;type that really is sensible at compile time and should &quot; &quot;defer failure to runtime; this version was too generic.&quot;) typename std</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ExtractDoubleOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab4b4b76d02b97e432f12b85f16d06a83</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_same_v&lt; typename Derived::Scalar, double &gt;, Eigen::Matrix&lt; double, Derived::RowsAtCompileTime, Derived::ColsAtCompileTime, Derived::Options, Derived::MaxRowsAtCompileTime, Derived::MaxColsAtCompileTime &gt; &gt;</type>
      <name>ExtractDoubleOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acbb565e9a203554c64228bfea2808935</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>file_utils.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>file__utils_8cc.html</filename>
    <includes id="file__utils_8h" name="file_utils.h" local="yes" imported="no">maliput/utility/file_utils.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>GetSuffixFromPath</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a0886cacf31715fe4689f330fb5d75193</anchor>
      <arglist>(const std::string &amp;filepath)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllFilePathsFromDirectory</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4f2a167d0c041b88c9f17711d862c12e</anchor>
      <arglist>(const std::string &amp;directory_path, const std::optional&lt; std::string &gt; &amp;ends_with_suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllPathsFromEnvironment</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab4e1ac100d64634cdc0b7b371e78f81c</anchor>
      <arglist>(const std::string &amp;env_var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>file_utils.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>file__utils_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>GetSuffixFromPath</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a0886cacf31715fe4689f330fb5d75193</anchor>
      <arglist>(const std::string &amp;filepath)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllFilePathsFromDirectory</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4f2a167d0c041b88c9f17711d862c12e</anchor>
      <arglist>(const std::string &amp;directory_path, const std::optional&lt; std::string &gt; &amp;ends_with_suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllPathsFromEnvironment</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab4e1ac100d64634cdc0b7b371e78f81c</anchor>
      <arglist>(const std::string &amp;env_var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filesystem.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/common/</path>
    <filename>filesystem_8cc.html</filename>
    <includes id="filesystem_8h" name="filesystem.h" local="yes" imported="no">maliput/common/filesystem.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>filesystem.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>filesystem_8h.html</filename>
    <class kind="class">maliput::common::Path</class>
    <class kind="class">maliput::common::Filesystem</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>filter_positions.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>filter__positions_8cc.html</filename>
    <includes id="filter__positions_8h" name="filter_positions.h" local="yes" imported="no">maliput/geometry_base/filter_positions.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>std::vector&lt; api::RoadPositionResult &gt;</type>
      <name>FilterRoadPositionResults</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a6526fab630ce68db4883df8c4f8afe9e</anchor>
      <arglist>(const std::vector&lt; api::RoadPositionResult &gt; &amp;road_position_results, const std::function&lt; bool(const api::RoadPositionResult &amp;)&gt; &amp;filter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filter_positions.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>filter__positions_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>std::vector&lt; api::RoadPositionResult &gt;</type>
      <name>FilterRoadPositionResults</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a6526fab630ce68db4883df8c4f8afe9e</anchor>
      <arglist>(const std::vector&lt; api::RoadPositionResult &gt; &amp;road_position_results, const std::function&lt; bool(const api::RoadPositionResult &amp;)&gt; &amp;filter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>find_lane_sequences.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>find__lane__sequences_8cc.html</filename>
    <includes id="find__lane__sequences_8h" name="find_lane_sequences.h" local="yes" imported="no">maliput/routing/find_lane_sequences.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">maliput/common/profiler.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; const maliput::api::Lane * &gt; &gt;</type>
      <name>FindLaneSequences</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>ae879accab23fdc7d64d39657fd67025c</anchor>
      <arglist>(const maliput::api::Lane *start, const maliput::api::Lane *end, double max_length_m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>find_lane_sequences.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>find__lane__sequences_8h.html</filename>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; const maliput::api::Lane * &gt; &gt;</type>
      <name>FindLaneSequences</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>ae879accab23fdc7d64d39657fd67025c</anchor>
      <arglist>(const maliput::api::Lane *start, const maliput::api::Lane *end, double max_length_m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fixed_input_port_value.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>fixed__input__port__value_8cc.html</filename>
    <includes id="fixed__input__port__value_8h" name="fixed_input_port_value.h" local="yes" imported="no">maliput/drake/systems/framework/fixed_input_port_value.h</includes>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>fixed_input_port_value.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>fixed__input__port__value_8h.html</filename>
    <includes id="copyable__unique__ptr_8h" name="copyable_unique_ptr.h" local="yes" imported="no">maliput/drake/common/copyable_unique_ptr.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="reset__on__copy_8h" name="reset_on_copy.h" local="yes" imported="no">maliput/drake/common/reset_on_copy.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::FixedInputPortValue</class>
    <class kind="class">maliput::drake::systems::internal::ContextBaseFixedInputAttorney</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>framework_common.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>framework__common_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="identifier_8h" name="identifier.h" local="yes" imported="no">maliput/drake/common/identifier.h</includes>
    <includes id="type__safe__index_8h" name="type_safe_index.h" local="yes" imported="no">maliput/drake/common/type_safe_index.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <class kind="struct">maliput::drake::systems::UseDefaultName</class>
    <class kind="class">maliput::drake::systems::internal::FrameworkFactory</class>
    <class kind="class">maliput::drake::systems::internal::SystemMessageInterface</class>
    <class kind="class">maliput::drake::systems::internal::ContextMessageInterface</class>
    <class kind="class">maliput::drake::systems::internal::SystemParentServiceInterface</class>
    <class kind="struct">maliput::drake::systems::internal::OutputPortPrerequisite</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class DependencyTag &gt;</type>
      <name>DependencyTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a4dead03a05139d2c4dfc0a7042a936ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class CacheTag &gt;</type>
      <name>CacheIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a06ac9ad764b14ccff79b6feb393be498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class SubsystemIndexTag &gt;</type>
      <name>SubsystemIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a72b9d4d169dbb0f1f740e1b25697e65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class InputPortTag &gt;</type>
      <name>InputPortIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>aa53feaf560f7ff6cfa4add8dc6ff0db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class OutputPortTag &gt;</type>
      <name>OutputPortIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afb427ae7d4f36f7a3cfe34eb5a3d51aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class ContinuousStateTag &gt;</type>
      <name>ContinuousStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a180dfb39dc60232f4dacf555d1ed2582</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class DiscreteStateTag &gt;</type>
      <name>DiscreteStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>acf2a50397e9fa764d32553cf98460ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class AbstractStateTag &gt;</type>
      <name>AbstractStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a8c3a27f43e356726f770159944adb929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class NumericParameterTag &gt;</type>
      <name>NumericParameterIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>af11369a06c5bfd3fa18acb79f85777df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class AbstractParameterTag &gt;</type>
      <name>AbstractParameterIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a86b350169906f6d5e07e9db46e36d57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class SystemConstraintTag &gt;</type>
      <name>SystemConstraintIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a69608eb99ec6982ed17d1ac6d3d6dce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>maliput::drake::Identifier&lt; class SystemIdTag &gt;</type>
      <name>SystemId</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>ac417892f49eceb6d6e67d94df23660d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PortDataType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kVectorValued</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbea8224a2a2efb09b6189f8fd5a42c8ce52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAbstractValued</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbeaf2203e0344f142b8e294a1bf4546a94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InputPortSelection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a5484375bdbfb17f525cd2ed396d747f9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a5484375bdbfb17f525cd2ed396d747f9a757e9aed460a5351e83462b6ac3e8627">kNoInput</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a5484375bdbfb17f525cd2ed396d747f9ae969b88961b5a19a96fee66796e8d713">kUseFirstInputIfItExists</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputPortSelection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a00432489001229d1f63cb6d373403a6e</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a00432489001229d1f63cb6d373403a6ea04b33f9fae5ed24fc651a8d4be9d9041">kNoOutput</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a00432489001229d1f63cb6d373403a6ea2e0016ab225d09e0af0e4648992d8be5">kUseFirstOutputIfItExists</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuiltInTicketNumbers</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNothingTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea727e5b20adccc1bd45df56920f351bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTimeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea8115f823b96150e514add0e2feadda9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAccuracyTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea5ee3621c4f779bbadd2e24f7878723f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kQTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea5211f3f6e7cb51b9e5fd7378d29f6830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kVTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea48e6c042dc5b59be7a69410b8d0eb279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kZTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eadabb145a1bd052caf13b3b54c2c65079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXcTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea8ec1db3f5b1b3903b43dd2df6b147279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXdTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaeb3f7df9806234d39f6b104c0c27ef80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXaTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea3d127356c74ec5c89bfe7717e31d4d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea3fa43c14b1b0d8264b0dea71f7d0d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPnTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea063e6236b1564f06d39fb3609455d530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPaTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea15122205bbe5a2ac1c6418f2ab0ef483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllParametersTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea81bbdcd5a588bbccd9459c1f0b4af988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllSourcesExceptInputPortsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ead2f5612e2d497dae86d51bc3cfb061b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllInputPortsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea72ac9945c711a5e87225d03b1cfc4abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllSourcesTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea6c690fbafaf400c6c10bf210503cf9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kConfigurationTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea59cf6c2daacaec9c6240e9b06aad7c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kKinematicsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea2a0c6b4a41b7efcac0a563afb0f3feea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kLastSourceTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaece313a8e7f5b71aab820f0d46305859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXcdotTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea99f1a02f4663c0b2289714ce873238b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea95012084c0003b6a6c1adbc3cc4d8f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kKeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaa8e569dbccb37d2ee44ad80e846756ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPcTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea22ece8eee6bbc68d897af7a725a7c0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPncTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea0dbb64c766ecb996a6e62410ab44f5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNextAvailableTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eab396b4df06d0f55e1bba5076f60cd369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a4ba45fb3311523dc50e8584613342709</anchor>
      <arglist>(const std::variant&lt; std::string, UseDefaultName &gt; &amp;value, const UseDefaultName &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; U * &gt;</type>
      <name>Unpack</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a805ce567f4a99c1e8b1200f8954bbe2c</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; U &gt;&gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNonNull</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>aaa0eb91d774ef6ed715ddff6ca1e36fe</anchor>
      <arglist>(const std::vector&lt; PtrType &gt; &amp;pointers)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr UseDefaultName</type>
      <name>kUseDefaultName</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a399dec16d9f072ee3a256c35ba3379fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_obj.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>generate__obj_8cc.html</filename>
    <includes id="generate__obj_8h" name="generate_obj.h" local="yes" imported="no">maliput/utility/generate_obj.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">maliput/common/profiler.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <includes id="mesh_8h" name="mesh.h" local="yes" imported="no">maliput/utility/mesh.h</includes>
    <includes id="mesh__simplification_8h" name="mesh_simplification.h" local="yes" imported="no">maliput/utility/mesh_simplification.h</includes>
    <includes id="string__format_8h" name="string_format.h" local="yes" imported="no">maliput/utility/string_format.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>Material</type>
      <name>GetMaterialFromMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>aaffd8a62d03cb0fd748d3f3304b0306b</anchor>
      <arglist>(const MaterialType mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9780629dc375c449ec8e706d7676f4b0</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::LaneId &amp;lane_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a12cfa9eae3d52936290f63b837aabb49</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::BranchPointId &amp;branch_point_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a93ca25bfba14b89a8d85e0a3374f654b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::SegmentId &amp;segment_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>RoadGeometryMesh</type>
      <name>BuildRoadGeometryMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4ff7b1560f5a8cf9ead581e66309863b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>aab65cc74152ea2c0855bf16945913786</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab832955c27b822412b9639fcd4603225</anchor>
      <arglist>(const api::RoadNetwork *road_network, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9ca0996b95b162407ed432e9a41718b2</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a754ea2bbcc2ae639a1b0845eff81e416</anchor>
      <arglist>(const api::RoadNetwork *road_network, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>const Material &amp;</type>
      <name>GetMaterialByName</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>abc52bcf921c4bad34d52a6a7ab2ef42f</anchor>
      <arglist>(const std::string &amp;material_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_obj.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>generate__obj_8h.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="mesh_8h" name="mesh.h" local="yes" imported="no">maliput/utility/mesh.h</includes>
    <class kind="struct">maliput::utility::ObjFeatures</class>
    <class kind="struct">maliput::utility::Material</class>
    <class kind="struct">maliput::utility::RoadGeometryMesh</class>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="enumeration">
      <type></type>
      <name>MaterialType</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ace55764233310da429c994a8c334b32a</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa69cdd2c7900c5a4732b4bb63bea57f6c">Asphalt</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa1a79a39f343f2224748ec987ccf8431f">Lane</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa0235c996b43b3799573658df41ef82f2">Marker</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aabc1db859f95b1cf9ae1762a500298b01">HBounds</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa3acb2a2e1e894d7082864de86ec7c517">BranchPointGlow</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa2808c30979d8bed29cfb9510e8078867">GrayedAsphalt</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aafbe31e1cf45d9e5e7cbfe4e0324c5e8e">GrayedLane</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa20096ed1364976fbca0df105e90d5072">GrayedMarker</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aac68f4e6506520a1ae5f89c48dc2fcca1">Sidewalk</enumvalue>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9780629dc375c449ec8e706d7676f4b0</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::LaneId &amp;lane_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a12cfa9eae3d52936290f63b837aabb49</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::BranchPointId &amp;branch_point_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a93ca25bfba14b89a8d85e0a3374f654b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::SegmentId &amp;segment_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>RoadGeometryMesh</type>
      <name>BuildRoadGeometryMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4ff7b1560f5a8cf9ead581e66309863b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>aab65cc74152ea2c0855bf16945913786</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab832955c27b822412b9639fcd4603225</anchor>
      <arglist>(const api::RoadNetwork *road_network, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9ca0996b95b162407ed432e9a41718b2</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a754ea2bbcc2ae639a1b0845eff81e416</anchor>
      <arglist>(const api::RoadNetwork *road_network, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>const Material &amp;</type>
      <name>GetMaterialByName</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>abc52bcf921c4bad34d52a6a7ab2ef42f</anchor>
      <arglist>(const std::string &amp;material_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_string.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>generate__string_8cc.html</filename>
    <includes id="generate__string_8h" name="generate_string.h" local="yes" imported="no">maliput/utility/generate_string.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>GenerateString</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>afdb238631b276c3a1279eedb5230b66e</anchor>
      <arglist>(const api::RoadGeometry &amp;road_geometry, const GenerateStringOptions &amp;options)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>junction</name>
      <anchorfile>generate__string_8cc.html</anchorfile>
      <anchor>a655a1eb68e00f4b9196e1dfa82198432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>segment</name>
      <anchorfile>generate__string_8cc.html</anchorfile>
      <anchor>a83d22b1f05244d83f0c68fd19f754a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lane</name>
      <anchorfile>generate__string_8cc.html</anchorfile>
      <anchor>ac1592f838ecdc6da89b4d8d2bc12c130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_string.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>generate__string_8h.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <class kind="struct">maliput::utility::GenerateStringOptions</class>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>GenerateString</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>afdb238631b276c3a1279eedb5230b66e</anchor>
      <arglist>(const api::RoadGeometry &amp;road_geometry, const GenerateStringOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_urdf.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>generate__urdf_8cc.html</filename>
    <includes id="generate__urdf_8h" name="generate_urdf.h" local="yes" imported="no">maliput/utility/generate_urdf.h</includes>
    <includes id="generate__obj_8h" name="generate_obj.h" local="yes" imported="no">maliput/utility/generate_obj.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>void</type>
      <name>GenerateUrdfFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a50a9da17ca42fa31f909ba4748f8531b</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_urdf.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>generate__urdf_8h.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="generate__obj_8h" name="generate_obj.h" local="yes" imported="no">maliput/utility/generate_obj.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>void</type>
      <name>GenerateUrdfFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a50a9da17ca42fa31f909ba4748f8531b</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>hash_8cc.html</filename>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">maliput/drake/common/hash.h</includes>
  </compound>
  <compound kind="file">
    <name>hash.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>hash_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <class kind="struct">maliput::drake::uhash</class>
    <class kind="class">maliput::drake::internal::FNV1aHasher</class>
    <class kind="struct">maliput::drake::DelegatingHasher</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="typedef">
      <type>internal::FNV1aHasher</type>
      <name>DefaultHasher</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a5a11519c4c803fc3f2118df94e858e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>maliput::drake::uhash&lt; DefaultHasher &gt;</type>
      <name>DefaultHash</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0b2a4541f86da3123b759d584b6f34ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0284bfa9d633e202f564338a6cf623b4</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a5c729e47e35c048046d463e042446b36</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acb07677aa04f0138bd05f7d361466e93</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ad0a837d489bcc6395a68518f05f84171</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::basic_string&lt; char, Traits, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afd3a753d7c4264b50a08d98ab24cd9b5</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::pair&lt; T1, T2 &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a135056b56b4b74592a8bb99e661e3824</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::optional&lt; T &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append_range</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ad61c75c1d13adf6bab150b67a38b84d3</anchor>
      <arglist>(HashAlgorithm &amp;hasher, Iter begin, Iter end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a7f49ebd9ac9892798c67660d47780bb6</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::map&lt; T1, T2, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>abc126047be01b9fcf50d66794419b2f5</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::set&lt; Key, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hermitian_dense_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>hermitian__dense__output_8cc.html</filename>
    <includes id="hermitian__dense__output_8h" name="hermitian_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/hermitian_dense_output.h</includes>
  </compound>
  <compound kind="file">
    <name>hermitian_dense_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>hermitian__dense__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="extract__double_8h" name="extract_double.h" local="yes" imported="no">maliput/drake/common/extract_double.h</includes>
    <includes id="piecewise__polynomial_8h" name="piecewise_polynomial.h" local="yes" imported="no">maliput/drake/common/trajectories/piecewise_polynomial.h</includes>
    <includes id="stepwise__dense__output_8h" name="stepwise_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/stepwise_dense_output.h</includes>
    <class kind="class">maliput::drake::systems::HermitianDenseOutput</class>
    <class kind="class">maliput::drake::systems::HermitianDenseOutput::IntegrationStep</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>ExtractDoublesOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>aa6290a54f7f62aa23b15443bddca69cb</anchor>
      <arglist>(const std::vector&lt; S &gt; &amp;input_vector)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; MatrixX&lt; double &gt; &gt;</type>
      <name>ExtractDoublesOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a73a540b9f78fe10f628e483044a354ae</anchor>
      <arglist>(const std::vector&lt; MatrixX&lt; S &gt;&gt; &amp;input_vector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>identifier.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>identifier_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">maliput/drake/common/hash.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <class kind="class">maliput::drake::Identifier</class>
    <class kind="struct">std::hash&lt; maliput::drake::Identifier&lt; Tag &gt; &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a04fe934638081d5266e1b191d2a3ae7d</anchor>
      <arglist>(const maliput::drake::Identifier&lt; Tag &gt; &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>initial_value_problem.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>initial__value__problem_8cc.html</filename>
    <includes id="initial__value__problem_8h" name="initial_value_problem.h" local="yes" imported="no">maliput/drake/systems/analysis/initial_value_problem.h</includes>
    <includes id="hermitian__dense__output_8h" name="hermitian_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/hermitian_dense_output.h</includes>
    <includes id="runge__kutta3__integrator_8h" name="runge_kutta3_integrator.h" local="yes" imported="no">maliput/drake/systems/analysis/runge_kutta3_integrator.h</includes>
    <includes id="continuous__state_8h" name="continuous_state.h" local="yes" imported="no">maliput/drake/systems/framework/continuous_state.h</includes>
    <includes id="leaf__system_8h" name="leaf_system.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_system.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>initial_value_problem.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>initial__value__problem_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="dense__output_8h" name="dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/dense_output.h</includes>
    <includes id="integrator__base_8h" name="integrator_base.h" local="yes" imported="no">maliput/drake/systems/analysis/integrator_base.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <class kind="class">maliput::drake::systems::InitialValueProblem</class>
    <class kind="struct">maliput::drake::systems::InitialValueProblem::OdeContext</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>input_port.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>input__port_8cc.html</filename>
    <includes id="input__port_8h" name="input_port.h" local="yes" imported="no">maliput/drake/systems/framework/input_port.h</includes>
  </compound>
  <compound kind="file">
    <name>input_port.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>input__port_8h.html</filename>
    <includes id="constants_8h" name="constants.h" local="yes" imported="no">maliput/drake/common/constants.h</includes>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="input__port__base_8h" name="input_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/input_port_base.h</includes>
    <includes id="value__to__abstract__value_8h" name="value_to_abstract_value.h" local="yes" imported="no">maliput/drake/systems/framework/value_to_abstract_value.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::InputPort</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>input_port_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>input__port__base_8cc.html</filename>
    <includes id="input__port__base_8h" name="input_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/input_port_base.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>input_port_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>input__port__base_8h.html</filename>
    <includes id="random_8h" name="random.h" local="yes" imported="no">maliput/drake/common/random.h</includes>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="port__base_8h" name="port_base.h" local="yes" imported="no">maliput/drake/systems/framework/port_base.h</includes>
    <class kind="class">maliput::drake::systems::InputPortBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>integrator_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>integrator__base_8cc.html</filename>
    <includes id="integrator__base_8h" name="integrator_base.h" local="yes" imported="no">maliput/drake/systems/analysis/integrator_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>integrator_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>integrator__base_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="text__logging_8h" name="text_logging.h" local="yes" imported="no">maliput/drake/common/text_logging.h</includes>
    <includes id="piecewise__polynomial_8h" name="piecewise_polynomial.h" local="yes" imported="no">maliput/drake/common/trajectories/piecewise_polynomial.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="system_8h" name="system.h" local="yes" imported="no">maliput/drake/systems/framework/system.h</includes>
    <includes id="vector__base_8h" name="vector_base.h" local="yes" imported="no">maliput/drake/systems/framework/vector_base.h</includes>
    <class kind="class">maliput::drake::systems::IntegratorBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>api/intersection.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>api_2intersection_8cc.html</filename>
    <includes id="api_2intersection_8h" name="api/intersection.h" local="yes" imported="no">maliput/api/intersection.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>base/intersection.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>base_2intersection_8cc.html</filename>
    <includes id="base_2intersection_8h" name="base/intersection.h" local="yes" imported="no">maliput/base/intersection.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>api/intersection.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2intersection_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <class kind="class">maliput::api::Intersection</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>base/intersection.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>base_2intersection_8h.html</filename>
    <includes id="api_2intersection_8h" name="api/intersection.h" local="yes" imported="no">maliput/api/intersection.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="manual__phase__provider_8h" name="manual_phase_provider.h" local="yes" imported="no">maliput/base/manual_phase_provider.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::Intersection</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>intersection_book.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>intersection__book_8cc.html</filename>
    <includes id="base_2intersection__book_8h" name="base/intersection_book.h" local="yes" imported="no">maliput/base/intersection_book.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>api/intersection_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2intersection__book_8h.html</filename>
    <includes id="api_2intersection_8h" name="api/intersection.h" local="yes" imported="no">maliput/api/intersection.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <class kind="class">maliput::api::IntersectionBook</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>base/intersection_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>base_2intersection__book_8h.html</filename>
    <includes id="api_2intersection_8h" name="api/intersection.h" local="yes" imported="no">maliput/api/intersection.h</includes>
    <includes id="api_2intersection__book_8h" name="api/intersection_book.h" local="yes" imported="no">maliput/api/intersection_book.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::IntersectionBook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>intersection_book_loader.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>intersection__book__loader_8cc.html</filename>
    <includes id="intersection__book__loader_8h" name="intersection_book_loader.h" local="yes" imported="no">maliput/base/intersection_book_loader.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="base_2intersection_8h" name="base/intersection.h" local="yes" imported="no">maliput/base/intersection.h</includes>
    <includes id="base_2intersection__book_8h" name="base/intersection_book.h" local="yes" imported="no">maliput/base/intersection_book.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae9de13cab362dfe504997becac2948a</anchor>
      <arglist>(const std::string &amp;input, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a70af57ac223401656e6143e147caaf5d</anchor>
      <arglist>(const std::string &amp;filename, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intersection_book_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>intersection__book__loader_8h.html</filename>
    <includes id="api_2intersection__book_8h" name="api/intersection_book.h" local="yes" imported="no">maliput/api/intersection_book.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="manual__phase__provider_8h" name="manual_phase_provider.h" local="yes" imported="no">maliput/base/manual_phase_provider.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae9de13cab362dfe504997becac2948a</anchor>
      <arglist>(const std::string &amp;input, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a70af57ac223401656e6143e147caaf5d</anchor>
      <arglist>(const std::string &amp;filename, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>is_cloneable.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>is__cloneable_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="typedef">
      <type>is_cloneable_internal::is_cloneable_helper&lt; T, void &gt;</type>
      <name>is_cloneable</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a158f68939b94f6c2c5ea353d652919da</anchor>
      <arglist></arglist>
      <docanchor file="namespacemaliput_1_1drake.html">is_cloneable_doc</docanchor>
    </member>
  </compound>
  <compound kind="file">
    <name>junction.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>junction_8cc.html</filename>
    <includes id="geometry__base_2junction_8h" name="geometry_base/junction.h" local="yes" imported="no">maliput/geometry_base/junction.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/junction.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2junction_8h.html</filename>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::Junction</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Junction &gt;</type>
      <name>JunctionId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab025537d8f29dd0709b9c53bf2e3afd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_base/junction.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>geometry__base_2junction_8h.html</filename>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="passkey_8h" name="passkey.h" local="yes" imported="no">maliput/common/passkey.h</includes>
    <includes id="geometry__base_2segment_8h" name="geometry_base/segment.h" local="yes" imported="no">maliput/geometry_base/segment.h</includes>
    <class kind="class">maliput::geometry_base::Junction</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>kd_tree.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>kd__tree_8h.html</filename>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="axis__aligned__box_8h" name="axis_aligned_box.h" local="yes" imported="no">maliput/math/axis_aligned_box.h</includes>
    <includes id="overlapping__type_8h" name="overlapping_type.h" local="yes" imported="no">maliput/math/overlapping_type.h</includes>
    <class kind="class">maliput::math::details::Node</class>
    <class kind="struct">maliput::math::details::SquaredDistance</class>
    <class kind="struct">maliput::math::details::NodeCmp</class>
    <class kind="class">maliput::math::details::KDTreeBase</class>
    <class kind="class">maliput::math::KDTree</class>
    <class kind="class">maliput::math::KDTree3D</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <namespace>maliput::math::details</namespace>
    <member kind="function">
      <type>Node *</type>
      <name>MakeKdTree</name>
      <anchorfile>namespacemaliput_1_1math_1_1details.html</anchorfile>
      <anchor>a24b1dbed2e474a1ac1df591e550d82a9</anchor>
      <arglist>(std::size_t begin, std::size_t end, std::size_t index, std::deque&lt; Node &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize3dRegions</name>
      <anchorfile>namespacemaliput_1_1math_1_1details.html</anchorfile>
      <anchor>abedeb4d44105f736c5a90a959abc6a01</anchor>
      <arglist>(bool left, Node *node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_tree_strategy.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>kd__tree__strategy_8cc.html</filename>
    <includes id="kd__tree__strategy_8h" name="kd_tree_strategy.h" local="yes" imported="no">maliput/geometry_base/kd_tree_strategy.h</includes>
    <includes id="kd__tree_8h" name="kd_tree.h" local="yes" imported="no">maliput/math/kd_tree.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>kd_tree_strategy.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>kd__tree__strategy_8h.html</filename>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <includes id="kd__tree_8h" name="kd_tree.h" local="yes" imported="no">maliput/math/kd_tree.h</includes>
    <class kind="class">maliput::geometry_base::KDTreeStrategy</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/lane.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>api_2lane_8cc.html</filename>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">maliput/common/profiler.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>geometry_base/lane.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>geometry__base_2lane_8cc.html</filename>
    <includes id="geometry__base_2lane_8h" name="geometry_base/lane.h" local="yes" imported="no">maliput/geometry_base/lane.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="geometry__base_2branch__point_8h" name="geometry_base/branch_point.h" local="yes" imported="no">maliput/geometry_base/branch_point.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/lane.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2lane_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::api::Lane</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Lane &gt;</type>
      <name>LaneId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ae511c23137380e1e22dd8bd24613a561</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_base/lane.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>geometry__base_2lane_8h.html</filename>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="passkey_8h" name="passkey.h" local="yes" imported="no">maliput/common/passkey.h</includes>
    <class kind="class">maliput::geometry_base::Lane</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>lane_data.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>lane__data_8cc.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a48eeb740d4ff16cd88bf8bf99e5eb309</anchor>
      <arglist>(std::ostream &amp;out, const LaneEnd::Which &amp;which_end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>af06102e3da0eee4b9a99e2c55e91e3fa</anchor>
      <arglist>(std::ostream &amp;out, const Rotation &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a967a84358ae62857cee70964b7fcd2f8</anchor>
      <arglist>(std::ostream &amp;out, const InertialPosition &amp;inertial_position)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a835a821b6ebb66f57e28664f3b582401</anchor>
      <arglist>(std::ostream &amp;out, const LanePosition &amp;lane_position)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lane_data.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>lane__data_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">maliput/math/matrix.h</includes>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">maliput/math/quaternion.h</includes>
    <includes id="roll__pitch__yaw_8h" name="roll_pitch_yaw.h" local="yes" imported="no">maliput/math/roll_pitch_yaw.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="struct">maliput::api::LaneEnd</class>
    <class kind="struct">maliput::api::LaneEnd::StrictOrder</class>
    <class kind="class">maliput::api::InertialPosition</class>
    <class kind="class">maliput::api::Rotation</class>
    <class kind="class">maliput::api::LanePosition</class>
    <class kind="struct">maliput::api::LanePositionResult</class>
    <class kind="struct">maliput::api::IsoLaneVelocity</class>
    <class kind="struct">maliput::api::RoadPosition</class>
    <class kind="struct">maliput::api::RoadPositionResult</class>
    <class kind="class">maliput::api::RBounds</class>
    <class kind="class">maliput::api::HBounds</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a48eeb740d4ff16cd88bf8bf99e5eb309</anchor>
      <arglist>(std::ostream &amp;out, const LaneEnd::Which &amp;which_end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a967a84358ae62857cee70964b7fcd2f8</anchor>
      <arglist>(std::ostream &amp;out, const InertialPosition &amp;inertial_position)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>af06102e3da0eee4b9a99e2c55e91e3fa</anchor>
      <arglist>(std::ostream &amp;out, const Rotation &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a835a821b6ebb66f57e28664f3b582401</anchor>
      <arglist>(std::ostream &amp;out, const LanePosition &amp;lane_position)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lane_end_set.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>lane__end__set_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::geometry_base::LaneEndSet</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>lane_s_range_relation.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>lane__s__range__relation_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LaneSRangeRelation</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a931f81ae3bf7bb2ac7b8924345c23487</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a8127ca1af560889a3ac6d157536c0260">kAdjacentLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2873b3a4083e3b17116552c3fc59339d">kAdjacentRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2d5fde1d924910a2a01ecd8e70a87c28">kLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2dd2b017192f8a09367d48c7648213c9">kRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a70676032033802d83400fd58143a0150">kSucceedingStraight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487afb05f716bf1f96c5934650f7bcf5bf6d">kSucceedingLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a33e3c4bfa5ec00700febf00173f8dbe2">kSucceedingRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a4d8f12238683b00b95720e5bb005f441">kPreceedingStraight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487aebdee03e4e3c279ee9cc77c219ea9681">kPreceedingLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a64b34efaab13831e11d205386a98b819">kPreceedingRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a8bd83ac691f94854afe5a9d6c578aa15">kCoincident</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a9556e04cf8f24d118180ebc0615fbf83">kUnrelated</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a25c2dc47991b3df171ed5192bcf70390">kUnknown</enumvalue>
    </member>
    <member kind="function">
      <type>std::map&lt; LaneSRangeRelation, const char * &gt;</type>
      <name>LaneSRangeRelationMapper</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a2ff489426594d0e27de889f6cf0d93b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a7203627c4fa2cac6b579928ec5d20404</anchor>
      <arglist>(std::ostream &amp;os, const LaneSRangeRelation &amp;relation)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>leaf_context.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>leaf__context_8cc.html</filename>
    <includes id="leaf__context_8h" name="leaf_context.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_context.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="state_8h" name="state.h" local="yes" imported="no">maliput/drake/systems/framework/state.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>leaf_context.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>leaf__context_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <class kind="class">maliput::drake::systems::LeafContext</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>leaf_output_port.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>leaf__output__port_8cc.html</filename>
    <includes id="leaf__output__port_8h" name="leaf_output_port.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_output_port.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>leaf_output_port.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>leaf__output__port_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="cache__entry_8h" name="cache_entry.h" local="yes" imported="no">maliput/drake/systems/framework/cache_entry.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="output__port_8h" name="output_port.h" local="yes" imported="no">maliput/drake/systems/framework/output_port.h</includes>
    <includes id="value__producer_8h" name="value_producer.h" local="yes" imported="no">maliput/drake/systems/framework/value_producer.h</includes>
    <class kind="class">maliput::drake::systems::LeafOutputPort</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>leaf_system.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>leaf__system_8cc.html</filename>
    <includes id="leaf__system_8h" name="leaf_system.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_system.h</includes>
    <includes id="pointer__cast_8h" name="pointer_cast.h" local="yes" imported="no">maliput/drake/common/pointer_cast.h</includes>
    <includes id="value__checker_8h" name="value_checker.h" local="yes" imported="no">maliput/drake/systems/framework/value_checker.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="variable">
      <type>std::vector&lt; const Event&lt; T &gt; * &gt;</type>
      <name>next_events</name>
      <anchorfile>leaf__system_8cc.html</anchorfile>
      <anchor>a96555b45ff6926819bc2f657f4166d3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>leaf_system.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>leaf__system_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="abstract__value__cloner_8h" name="abstract_value_cloner.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_value_cloner.h</includes>
    <includes id="abstract__values_8h" name="abstract_values.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_values.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="continuous__state_8h" name="continuous_state.h" local="yes" imported="no">maliput/drake/systems/framework/continuous_state.h</includes>
    <includes id="discrete__values_8h" name="discrete_values.h" local="yes" imported="no">maliput/drake/systems/framework/discrete_values.h</includes>
    <includes id="leaf__context_8h" name="leaf_context.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_context.h</includes>
    <includes id="leaf__output__port_8h" name="leaf_output_port.h" local="yes" imported="no">maliput/drake/systems/framework/leaf_output_port.h</includes>
    <includes id="model__values_8h" name="model_values.h" local="yes" imported="no">maliput/drake/systems/framework/model_values.h</includes>
    <includes id="system_8h" name="system.h" local="yes" imported="no">maliput/drake/systems/framework/system.h</includes>
    <includes id="system__constraint_8h" name="system_constraint.h" local="yes" imported="no">maliput/drake/systems/framework/system_constraint.h</includes>
    <includes id="system__output_8h" name="system_output.h" local="yes" imported="no">maliput/drake/systems/framework/system_output.h</includes>
    <includes id="system__scalar__converter_8h" name="system_scalar_converter.h" local="yes" imported="no">maliput/drake/systems/framework/system_scalar_converter.h</includes>
    <includes id="value__producer_8h" name="value_producer.h" local="yes" imported="no">maliput/drake/systems/framework/value_producer.h</includes>
    <class kind="class">maliput::drake::systems::LeafSystem</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>logger.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/common/</path>
    <filename>logger_8cc.html</filename>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__never__destroyed_8h" name="maliput_never_destroyed.h" local="yes" imported="no">maliput/common/maliput_never_destroyed.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>set_log_level</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a7783f3769985bc4aab7193b525bb4411</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>common::Logger *</type>
      <name>log</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a8d79f56feceef38ffe51eb5e0a1e1b03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logger.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>logger_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::common::SinkBase</class>
    <class kind="class">maliput::common::Sink</class>
    <class kind="class">maliput::common::Logger</class>
    <class kind="struct">maliput::common::Serialize</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::common::logger</namespace>
    <member kind="enumeration">
      <type></type>
      <name>level</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>trace</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a36a3b17acbfb35380a47b3d88c9b8942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>debug</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a5be0fd270d9cbf6a0b7445db855089da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>info</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3aa4abb266e72efba828327b605b2ab0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>warn</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a030352c93c772334261abda73e03885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>error</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3ad606e435413ea0944dd00d49e901e4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>critical</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a5fe0ea375791d13455a34f3d40dc9c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>off</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a53ace14c115e45153a1c9105accceb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unchanged</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a4fb8437e3610883e3ac68ffe75ab521d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; std::string, logger::level &gt;</type>
      <name>kStringToLevel</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>ae1c3da69b2be6b9ffbe88cc03856aa60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; int, std::string &gt;</type>
      <name>kLevelToString</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>ab81b119f214f87c2b6af1d30dea096e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; int, std::string &gt;</type>
      <name>kLevelToMessage</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>a4015c7b3d782510e3fc09658157df199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_abort.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__abort_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::common::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEMAND</name>
      <anchorfile>maliput__abort_8h.html</anchorfile>
      <anchor>a65f9110fb0415b21949804d97dbb14dc</anchor>
      <arglist>(condition)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_ABORT_MESSAGE</name>
      <anchorfile>maliput__abort_8h.html</anchorfile>
      <anchor>ad6a5b7df05185a35360ac5d0034c8796</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a997f9f257b92b1ff8d991dc50da1e040</anchor>
      <arglist>((noreturn)) void Abort(const char *condition</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>func</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>ac4d02c4762d7260b3ce0a2274521a3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char *</type>
      <name>file</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a88cdae8c33f1a7c9d1032870876961e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char int</type>
      <name>line</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a42ff6d48d03489dd3a8ee0f1ff63bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char int const char *</type>
      <name>extra_details</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a1a63baa421186d858d40d4baf283b591</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_abort_and_throw.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/common/</path>
    <filename>maliput__abort__and__throw_8cc.html</filename>
    <includes id="assertion__error_8h" name="assertion_error.h" local="yes" imported="no">maliput/common/assertion_error.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::common::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a9dc47715d64b92b8dfb781bb50ba4682</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>aa50fecffef9f6c591e7f367e06c1a4ff</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line, const char *extra_details)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a1adb6d4bdebbb807916d6b9231d14a8e</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_copyable.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__copyable_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>maliput__copyable_8h.html</anchorfile>
      <anchor>ac8fc299c8acfe1580b85175659df1ffc</anchor>
      <arglist>(Classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>maliput__copyable_8h.html</anchorfile>
      <anchor>a87b35cab8854c998b5137bd72f61f188</anchor>
      <arglist>(Classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DECLARE_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>maliput__copyable_8h.html</anchorfile>
      <anchor>ac47af45bec7bdae67bdfe8b3a56cfda1</anchor>
      <arglist>(Classname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEFINE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN_T</name>
      <anchorfile>maliput__copyable_8h.html</anchorfile>
      <anchor>a57b69054bb865b7a05a0cc2f7f9d7457</anchor>
      <arglist>(Classname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_deprecated.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__deprecated_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>a608a5c3a167da48e34860f3e0e0607a4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>ab2868e5550936d9c2d28963511dd140f</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG_REPLACEMENT</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>a8debe1f2d6b394550c59a1a59c96a639</anchor>
      <arglist>(message, replacement)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG_REPLACEMENT_DATE</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>afc615d1bee4d19c65044b4c01f77b381</anchor>
      <arglist>(message, replacement, removal_date)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_GET_DEPRECATED_MACRO</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>a23929d02354b635f41a3300c87d2eee9</anchor>
      <arglist>(_1, _2, _3, DEPRECATED_MACRO_NAME,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>ab2868e5550936d9c2d28963511dd140f</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG_REPLACEMENT</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>a8debe1f2d6b394550c59a1a59c96a639</anchor>
      <arglist>(message, replacement)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_DEPRECATED_MSG_REPLACEMENT_DATE</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>afc615d1bee4d19c65044b4c01f77b381</anchor>
      <arglist>(message, replacement, removal_date)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_GET_DEPRECATED_MACRO</name>
      <anchorfile>maliput__deprecated_8h.html</anchorfile>
      <anchor>a23929d02354b635f41a3300c87d2eee9</anchor>
      <arglist>(_1, _2, _3, DEPRECATED_MACRO_NAME,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_design.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>maliput__design_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>maliput_hash.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__hash_8h.html</filename>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="struct">maliput::common::uhash</class>
    <class kind="class">maliput::common::internal::FNV1aHasher</class>
    <class kind="struct">maliput::common::DelegatingHasher</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::common::internal</namespace>
    <member kind="typedef">
      <type>internal::FNV1aHasher</type>
      <name>DefaultHasher</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a5a11519c4c803fc3f2118df94e858e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>maliput::common::uhash&lt; DefaultHasher &gt;</type>
      <name>DefaultHash</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ae925cde990a915749d22776d5b22b6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a44240da1e534b4f1ad217fd60715fefe</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a8fe1b380d6f3061ce1d4be519a5d634b</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a88818e7cfdc0923d054f8c0b9c953388</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>add13b60ba7eee019e20e4ff81f147420</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::basic_string&lt; char, Traits, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>aa52d300c87b4dd871f45e6965a0a5f30</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::pair&lt; T1, T2 &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ad70b949938141a7dfe81a18dd902df2c</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::optional&lt; T &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append_range</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ac616586047afb5b1676510994e105f9b</anchor>
      <arglist>(HashAlgorithm &amp;hasher, Iter begin, Iter end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a8e063b533ac295f539dc0d562089a35c</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::map&lt; T1, T2, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a9cb30385aa3dc7978a7f5b0b98c739a1</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::set&lt; Key, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_never_destroyed.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__never__destroyed_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::common::never_destroyed</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>maliput_plugin.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/plugin/</path>
    <filename>maliput__plugin_8cc.html</filename>
    <includes id="maliput__plugin_8h" name="maliput_plugin.h" local="yes" imported="no">maliput/plugin/maliput_plugin.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
  </compound>
  <compound kind="file">
    <name>maliput_plugin.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>maliput__plugin_8h.html</filename>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__plugin__type_8h" name="maliput_plugin_type.h" local="yes" imported="no">maliput/plugin/maliput_plugin_type.h</includes>
    <class kind="class">maliput::plugin::MaliputPlugin</class>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
  </compound>
  <compound kind="file">
    <name>maliput_plugin_architecture.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>maliput__plugin__architecture_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>maliput_plugin_manager.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/plugin/</path>
    <filename>maliput__plugin__manager_8cc.html</filename>
    <includes id="maliput__plugin__manager_8h" name="maliput_plugin_manager.h" local="yes" imported="no">maliput/plugin/maliput_plugin_manager.h</includes>
    <includes id="filesystem_8h" name="filesystem.h" local="yes" imported="no">maliput/common/filesystem.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="file__utils_8h" name="file_utils.h" local="yes" imported="no">maliput/utility/file_utils.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
  </compound>
  <compound kind="file">
    <name>maliput_plugin_manager.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>maliput__plugin__manager_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__plugin_8h" name="maliput_plugin.h" local="yes" imported="no">maliput/plugin/maliput_plugin.h</includes>
    <class kind="class">maliput::plugin::MaliputPluginManager</class>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
  </compound>
  <compound kind="file">
    <name>maliput_plugin_type.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>maliput__plugin__type_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
    <member kind="enumeration">
      <type></type>
      <name>MaliputPluginType</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a2afd58b120b90956eefe0e19727605d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoadNetworkLoader</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a2afd58b120b90956eefe0e19727605d7a8adc28f8c40a859b0b10d73151f70794</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_throw.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__throw_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::common::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_THROW_UNLESS</name>
      <anchorfile>maliput__throw_8h.html</anchorfile>
      <anchor>a56a32f4447ccff45c6563d1302cc27ac</anchor>
      <arglist>(condition)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_THROW_MESSAGE</name>
      <anchorfile>maliput__throw_8h.html</anchorfile>
      <anchor>a9af2ab72834eff200a35d0543a16b383</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_VALIDATE</name>
      <anchorfile>maliput__throw_8h.html</anchorfile>
      <anchor>a875fe3f91e3799f84dfd8f924014f323</anchor>
      <arglist>(pred, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_IS_IN_RANGE</name>
      <anchorfile>maliput__throw_8h.html</anchorfile>
      <anchor>a9246072f48581aeadb3330267e3e7516</anchor>
      <arglist>(value, min_value, max_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a997f9f257b92b1ff8d991dc50da1e040</anchor>
      <arglist>((noreturn)) void Abort(const char *condition</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>maliput_unused.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>maliput__unused_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
    <member kind="function">
      <type>void</type>
      <name>unused</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>af4f9479a48d8c6a544754428a183a423</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>manual_discrete_value_rule_state_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__discrete__value__rule__state__provider_8cc.html</filename>
    <includes id="manual__discrete__value__rule__state__provider_8h" name="manual_discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/base/manual_discrete_value_rule_state_provider.h</includes>
    <includes id="rule__filter_8h" name="rule_filter.h" local="yes" imported="no">maliput/base/rule_filter.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_discrete_value_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__discrete__value__rule__state__provider_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="discrete__value__rule__state__provider_8h" name="discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule_state_provider.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::ManualDiscreteValueRuleStateProvider</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_phase_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__phase__provider_8cc.html</filename>
    <includes id="manual__phase__provider_8h" name="manual_phase_provider.h" local="yes" imported="no">maliput/base/manual_phase_provider.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_phase_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__phase__provider_8h.html</filename>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::ManualPhaseProvider</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_phase_ring_book.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__phase__ring__book_8cc.html</filename>
    <includes id="manual__phase__ring__book_8h" name="manual_phase_ring_book.h" local="yes" imported="no">maliput/base/manual_phase_ring_book.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_phase_ring_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__phase__ring__book_8h.html</filename>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::ManualPhaseRingBook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_range_value_rule_state_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__range__value__rule__state__provider_8cc.html</filename>
    <includes id="manual__range__value__rule__state__provider_8h" name="manual_range_value_rule_state_provider.h" local="yes" imported="no">maliput/base/manual_range_value_rule_state_provider.h</includes>
    <includes id="rule__filter_8h" name="rule_filter.h" local="yes" imported="no">maliput/base/rule_filter.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_range_value_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__range__value__rule__state__provider_8h.html</filename>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="range__value__rule__state__provider_8h" name="range_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/range_value_rule_state_provider.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::ManualRangeValueRuleStateProvider</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_right_of_way_rule_state_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__right__of__way__rule__state__provider_8cc.html</filename>
    <includes id="manual__right__of__way__rule__state__provider_8h" name="manual_right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/base/manual_right_of_way_rule_state_provider.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_right_of_way_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__right__of__way__rule__state__provider_8h.html</filename>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="right__of__way__rule__state__provider_8h" name="right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule_state_provider.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>manual_rulebook.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>manual__rulebook_8cc.html</filename>
    <includes id="manual__rulebook_8h" name="manual_rulebook.h" local="yes" imported="no">maliput/base/manual_rulebook.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <member kind="typedef">
      <type>api::rules::RoadRulebook::QueryResults</type>
      <name>QueryResults</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3fa6b098ad1261c86b7a71c1cb1a558b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>manual__rulebook_8cc.html</anchorfile>
      <anchor>a621da6b8404581f365b47d7493414d1f</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const IdVariant &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>manual_rulebook.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>manual__rulebook_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="speed__limit__rule_8h" name="speed_limit_rule.h" local="yes" imported="no">maliput/api/rules/speed_limit_rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::ManualRulebook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>math_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>matrix.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>matrix_8cc.html</filename>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">maliput/math/matrix.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a13669483b3a7be521d987bfdf00ef1fb</anchor>
      <arglist>(const Matrix&lt; N_ &gt; &amp;matrix, double k)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ae8b1bb89a0507f25c44b757bd01ab4cd</anchor>
      <arglist>(double k, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a989bf25588fe874c9ed33a3a27c7ab9d</anchor>
      <arglist>(std::ostream &amp;os, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a4b9dbb2c9b19248a0c0cc41377fff759</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix, const VectorBase&lt; N, Derived &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ab98da75bc6981cbd21c7eafbce227aa3</anchor>
      <arglist>(const Matrix&lt; 2 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a62d15c272c19e24cdb8a982e95bf4b2a</anchor>
      <arglist>(const Matrix&lt; 3 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1539d89a706f7476c4b9f786d6bf73ae</anchor>
      <arglist>(const Matrix&lt; 4 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>af25133585627e0335da135b67f4e2608</anchor>
      <arglist>(double, const Matrix&lt; 2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>aee1ded5e873f565353f2f8ed92c5aadd</anchor>
      <arglist>(double, const Matrix&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0883207d0e897aa140ebbd45279d5f5b</anchor>
      <arglist>(double, const Matrix&lt; 4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5d963db5cad448e261bf51f9cc328432</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a589ca39b935f419ebca26a66c0375964</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3ea4a252f70f5399431b2948be666324</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac6789e79b401dd29df8457355ccbc212</anchor>
      <arglist>(const Matrix&lt; 2 &gt; &amp;matrix, const VectorBase&lt; 2, Vector2 &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2ae7a17a845c51370274f36d3db91581</anchor>
      <arglist>(const Matrix&lt; 3 &gt; &amp;matrix, const VectorBase&lt; 3, Vector3 &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a6ede92b63ec8d483e276fdf9a52cb639</anchor>
      <arglist>(const Matrix&lt; 4 &gt; &amp;matrix, const VectorBase&lt; 4, Vector4 &gt; vector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>matrix_8h.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::math::Matrix</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="typedef">
      <type>Matrix&lt; 2 &gt;</type>
      <name>Matrix2</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac6bd2b15c356618c3c5ccba30dacfffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a817bdcb2b7e2c17fc4781e72ba6abe37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; 4 &gt;</type>
      <name>Matrix4</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1d79dac56e52511791f446a46b160358</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a4b9dbb2c9b19248a0c0cc41377fff759</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix, const VectorBase&lt; N, Derived &gt; vector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mesh.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>mesh_8h.html</filename>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="string__format_8h" name="string_format.h" local="yes" imported="no">maliput/utility/string_format.h</includes>
    <class kind="class">maliput::utility::mesh::UniqueIndexer</class>
    <class kind="class">maliput::utility::mesh::GeoVertex</class>
    <class kind="struct">maliput::utility::mesh::GeoVertex::Equiv</class>
    <class kind="class">maliput::utility::mesh::GeoNormal</class>
    <class kind="struct">maliput::utility::mesh::GeoNormal::Equiv</class>
    <class kind="class">maliput::utility::mesh::GeoFace</class>
    <class kind="class">maliput::utility::mesh::IndexFace</class>
    <class kind="struct">maliput::utility::mesh::IndexFace::Vertex</class>
    <class kind="class">maliput::utility::mesh::GeoMesh</class>
    <class kind="class">maliput::utility::mesh::SrhFace</class>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <namespace>maliput::utility::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>mesh_simplification.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>mesh__simplification_8cc.html</filename>
    <includes id="mesh__simplification_8h" name="mesh_simplification.h" local="yes" imported="no">maliput/utility/mesh_simplification.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <namespace>maliput::utility::mesh</namespace>
    <member kind="function">
      <type>double</type>
      <name>DistanceToAPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>ae6e6580251dde893b43a4ed26c108ad6</anchor>
      <arglist>(const math::Vector3 n, const math::Vector3 p, const math::Vector3 q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DistanceToALine</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a23497997c2e46655d8f921074440f7e1</anchor>
      <arglist>(const math::Vector3 &amp;p, const math::Vector3 &amp;r, const math::Vector3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>InverseFaceEdgeMap</type>
      <name>ComputeInverseFaceEdgeMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4ec9c63109996e947e543024bbe97a66</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>FaceAdjacencyMap</type>
      <name>ComputeFaceAdjacencyMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a78c154886288f7baff88baaa6db62187</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexPosition</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af29781b271fd07c9369805d9d3d6b37f</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexNormal</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a7f9a0114f0084b27234129f41a38b822</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFaceCoplanarWithPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaf8c31be76386a45724fb375e38a890b</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, const math::Vector3 &amp;n, const math::Vector3 &amp;p, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFacePlanar</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a3c9b3b4c9e5c0a0679b51b2a6c752f88</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, double tolerance, math::Vector3 *n, math::Vector3 *p)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt;</type>
      <name>AggregateAdjacentCoplanarMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a85f7866b6c3ed71ee6882c943b63c869</anchor>
      <arglist>(const GeoMesh &amp;mesh, int start_face_index, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance, std::set&lt; int &gt; *visited_faces_indices)</arglist>
    </member>
    <member kind="function">
      <type>FaceEdgeIndex</type>
      <name>FindOuterFaceEdgeIndex</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4941b76cb69d136a39d4ef014d6e74e2</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>ComputeMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1b2e80aea3e5eb6ba14352362220d658</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>const IndexFace::Vertex &amp;</type>
      <name>MeshFaceVertexAt</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af68da2fa1cf69840d3ab532a2eaca6ab</anchor>
      <arglist>(const GeoMesh &amp;mesh, const FaceVertexIndex &amp;face_vertex_index)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>SimplifyMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaa02ac8a38e63f82760f2bb81113cdc5</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::vector&lt; FaceVertexIndex &gt; &amp;contour_indices, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoFace</type>
      <name>MergeMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4597a0b90338ac00cd3da265c0cd852a</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::set&lt; int &gt; &amp;mergeable_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoMesh</type>
      <name>SimplifyMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1a072cc288bb47405029aed3f5e95134</anchor>
      <arglist>(const GeoMesh &amp;input_mesh, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mesh_simplification.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>mesh__simplification_8h.html</filename>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <includes id="mesh_8h" name="mesh.h" local="yes" imported="no">maliput/utility/mesh.h</includes>
    <class kind="struct">maliput::utility::mesh::DirectedEdgeIndex</class>
    <class kind="struct">maliput::utility::mesh::FaceEdgeIndex</class>
    <class kind="struct">maliput::utility::mesh::FaceVertexIndex</class>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <namespace>maliput::utility::mesh</namespace>
    <member kind="typedef">
      <type>std::unordered_map&lt; DirectedEdgeIndex, FaceEdgeIndex, maliput::common::DefaultHash &gt;</type>
      <name>InverseFaceEdgeMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a83f3d8cd29f06d414cc5fcc8a8718a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; int, std::vector&lt; FaceEdgeIndex &gt; &gt;</type>
      <name>FaceAdjacencyMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1f052e0b8f2e37cd7b5bbf88aa3f3f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DistanceToAPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>ae6e6580251dde893b43a4ed26c108ad6</anchor>
      <arglist>(const math::Vector3 n, const math::Vector3 p, const math::Vector3 q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DistanceToALine</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a23497997c2e46655d8f921074440f7e1</anchor>
      <arglist>(const math::Vector3 &amp;p, const math::Vector3 &amp;r, const math::Vector3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a0705bc6329e73d0b7ee738ca2fd2d590</anchor>
      <arglist>(const DirectedEdgeIndex &amp;lhs, const DirectedEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a3a2ca0b552c66ea28ba0c9f83796048d</anchor>
      <arglist>(const DirectedEdgeIndex &amp;lhs, const DirectedEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a382fd642950e26e3cae0cc2c52723e8a</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const DirectedEdgeIndex &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a9a8962fcc82c75e1f6a7406773e97752</anchor>
      <arglist>(const FaceEdgeIndex &amp;lhs, const FaceEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a2265f079a1b89a718188e8a67765595f</anchor>
      <arglist>(const FaceEdgeIndex &amp;lhs, const FaceEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>InverseFaceEdgeMap</type>
      <name>ComputeInverseFaceEdgeMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4ec9c63109996e947e543024bbe97a66</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>FaceAdjacencyMap</type>
      <name>ComputeFaceAdjacencyMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a78c154886288f7baff88baaa6db62187</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexPosition</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af29781b271fd07c9369805d9d3d6b37f</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexNormal</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a7f9a0114f0084b27234129f41a38b822</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoMeshVerticesLieOnPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a6c5db97c41ee4de1d66e82a36aabd606</anchor>
      <arglist>(const GeoMesh &amp;mesh, InputIt first, InputIt last, const math::Vector3 &amp;n, const math::Vector3 &amp;p, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFaceCoplanarWithPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaf8c31be76386a45724fb375e38a890b</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, const math::Vector3 &amp;n, const math::Vector3 &amp;p, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFacePlanar</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a3c9b3b4c9e5c0a0679b51b2a6c752f88</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, double tolerance, math::Vector3 *n, math::Vector3 *p)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt;</type>
      <name>AggregateAdjacentCoplanarMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a85f7866b6c3ed71ee6882c943b63c869</anchor>
      <arglist>(const GeoMesh &amp;mesh, int start_face_index, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance, std::set&lt; int &gt; *visited_faces_indices)</arglist>
    </member>
    <member kind="function">
      <type>FaceEdgeIndex</type>
      <name>FindOuterFaceEdgeIndex</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4941b76cb69d136a39d4ef014d6e74e2</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>ComputeMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1b2e80aea3e5eb6ba14352362220d658</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>const IndexFace::Vertex &amp;</type>
      <name>MeshFaceVertexAt</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af68da2fa1cf69840d3ab532a2eaca6ab</anchor>
      <arglist>(const GeoMesh &amp;mesh, const FaceVertexIndex &amp;face_vertex_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDouglasPeuckerSimplification</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a997a1a822ff6cc86c61826a852f688b8</anchor>
      <arglist>(InputIt first, InputIt last, VertexFn to_vertex, EdgeFn to_edge, double tolerance, OutputIt output)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>SimplifyMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaa02ac8a38e63f82760f2bb81113cdc5</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::vector&lt; FaceVertexIndex &gt; &amp;contour_indices, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoFace</type>
      <name>MergeMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4597a0b90338ac00cd3da265c0cd852a</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::set&lt; int &gt; &amp;mergeable_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoMesh</type>
      <name>SimplifyMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1a072cc288bb47405029aed3f5e95134</anchor>
      <arglist>(const GeoMesh &amp;input_mesh, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mock.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/test_utilities/</path>
    <filename>mock_8cc.html</filename>
    <includes id="mock_8h" name="mock.h" local="yes" imported="no">maliput/test_utilities/mock.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2intersection_8h" name="api/intersection.h" local="yes" imported="no">maliput/api/intersection.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::test</namespace>
    <member kind="function">
      <type>LaneSRoute</type>
      <name>CreateLaneSRoute</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c856e72bc0afc0eaf827a76ce67837a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LaneSRange</type>
      <name>CreateLaneSRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9f54fdf32656d83625b07ceed84d1a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State::YieldGroup</type>
      <name>YieldGroup2</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aec9d4bffea146b49d663e7a9f8a09cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>NoYieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abc28ca8174569877ffb51fc033b4892a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>YieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ab721bf86f7c6a95fb347209649e92d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::RelatedBulbGroups</type>
      <name>RelatedBulbGroups</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a88549b6027accd8039b7ae7d8ff826d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2de3fcf39c604ae62092ebab9c970823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6d6031e2e7f3f1cc51454c93f1e13122</anchor>
      <arglist>(const RightOfWayBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::SpeedLimitRule</type>
      <name>CreateSpeedLimitRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a464b8eb391fd0b3f1c290ebadcd3eebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule::State</type>
      <name>CreateDirectionUsageRuleState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a002a9e759ee230aee60e8af3c3d79aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule</type>
      <name>CreateDirectionUsageRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aff97bea27b014243cc9ed27e0f1c2dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abf5240b6d7d293372814907b54a984f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateNonEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad559e840135f887befaf56114d733bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae3aae82bafc81c39d09d31b6e7e2717e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateNonEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4d59fda38f4449f5bcfab925ad51218c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae7bb43141551b4a187af9db961e4e246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValueRule</type>
      <name>CreateDiscreteValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4d4d11b5dc30bf2beacd5ca99b6a799a</anchor>
      <arglist>(bool consistent_related_rule_groups)</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a896be0327988e11101f2e380f749e632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule::Range</type>
      <name>CreateRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ba03b0924d18269ee24739cb7fa0214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aabccdacb186a8549b6ff5543dc865f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RangeValueRule</type>
      <name>CreateRangeValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a3de6b649b65eb6e43a9b26b18470a030</anchor>
      <arglist>(bool consistent_related_rule_groups)</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad93d4462062718fe885a4cf47fd146c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aca2601f4483c573870038c4147109fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>acb299c39196e6da912e40ff5b01e9771</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aef98f29da5733309ae9e7ad4c6956a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a504c78f01a3bda12a760e4e7c95ae137</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Lane &gt;</type>
      <name>CreateLane</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aa97c50d03ebd0e3eba4d489def2351c3</anchor>
      <arglist>(const LaneId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateMultipleLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>acb850383540320ccf001ff91e0e78f36</anchor>
      <arglist>(const std::vector&lt; Lane * &gt; &amp;lanes)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a055aef0ad0d91cdd77fddd8520f767ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae0ed68b9006706f6014a4ed540c54172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ca5097e35d97da77db9905a98622731</anchor>
      <arglist>(const RoadGeometryBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5c45c4b17f389bc37a33fbccad327f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2d03c6c4dc963fce73446f652efb950d</anchor>
      <arglist>(const LanePositionResult &amp;lane_a_pos_result, const LanePositionResult &amp;lane_b_pos_result)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateMockContiguousRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a86df4889faa77e29796faedd939b9872</anchor>
      <arglist>(const RoadGeometryContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateMockContiguousRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a229f81180182fd2d2847e4effa5758ee</anchor>
      <arglist>(const RoadRulebookContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateOneLaneRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c3f52a9cc6512cab92b3c32a26e5119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4a1d1da83594d9dee3b4e14809df517d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a09e8c7db93fb922d6f4cf363d0588060</anchor>
      <arglist>(const RoadRulebookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a51675d2410d58943165742f4ff98d22e</anchor>
      <arglist>(const RoadRulebookRelatedRulesBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::BulbGroup &gt;</type>
      <name>CreateBulbGroup</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adad533de12202353e8158d4581f45233</anchor>
      <arglist>(bool add_missing_bulb_group)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLight &gt;</type>
      <name>CreateTrafficLight</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6153b0d3869a083346188992d611145f</anchor>
      <arglist>(const TrafficLightBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a64d6476b07e2711e2d73b62f3f7f8638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adf94c46d007e5ff6a964475bcdc52a11</anchor>
      <arglist>(const TrafficLightBookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a1155506619e42073372c87d30a740819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9b169bdf50c14b3a2f4aedaf8d33b46e</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RightOfWayRuleStateProvider &gt;</type>
      <name>CreateRightOfWayRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a506864db3b98a62062783b946ce0be7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseProvider &gt;</type>
      <name>CreatePhaseProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a73bc83a71c52c26c9a54493d063a46b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; IntersectionBook &gt;</type>
      <name>CreateIntersectionBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a92b5693c77b4338dc119e305c05908dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae8af3a6fd1d97f48349cc4536ab81cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateBasicRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad397f34ac523cac7f123bedd82e2f67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::DiscreteValueRuleStateProvider &gt;</type>
      <name>CreateDiscreteValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5dced08998d0beb56994f840e0c5f342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RangeValueRuleStateProvider &gt;</type>
      <name>CreateRangeValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aadea518f62326e52e4db3968cdb2398f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mock.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/test_utilities/</path>
    <filename>mock_8h.html</filename>
    <includes id="api_2intersection__book_8h" name="api/intersection_book.h" local="yes" imported="no">maliput/api/intersection_book.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="discrete__value__rule__state__provider_8h" name="discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule_state_provider.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="range__value__rule__state__provider_8h" name="range_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/range_value_rule_state_provider.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="right__of__way__rule__state__provider_8h" name="right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule_state_provider.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <class kind="struct">maliput::api::test::RoadGeometryIdIndexBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadGeometryBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadGeometryContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadNetworkContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RightOfWayBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookRelatedRulesBuildFlags</class>
    <class kind="struct">maliput::api::test::TrafficLightBuildFlags</class>
    <class kind="struct">maliput::api::test::TrafficLightBookBuildFlags</class>
    <class kind="struct">maliput::api::test::PhaseBuildFlags</class>
    <class kind="class">maliput::api::test::MockLaneEndSet</class>
    <class kind="class">maliput::api::test::MockBranchPoint</class>
    <class kind="class">maliput::api::test::MockLane</class>
    <class kind="class">maliput::api::test::MockSegment</class>
    <class kind="class">maliput::api::test::MockJunction</class>
    <class kind="class">maliput::api::test::MockIdIndex</class>
    <class kind="class">maliput::api::test::MockRoadGeometry</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::test</namespace>
    <member kind="function">
      <type>LaneSRoute</type>
      <name>CreateLaneSRoute</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c856e72bc0afc0eaf827a76ce67837a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LaneSRange</type>
      <name>CreateLaneSRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9f54fdf32656d83625b07ceed84d1a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State::YieldGroup</type>
      <name>YieldGroup2</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aec9d4bffea146b49d663e7a9f8a09cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>NoYieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abc28ca8174569877ffb51fc033b4892a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>YieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ab721bf86f7c6a95fb347209649e92d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::RelatedBulbGroups</type>
      <name>RelatedBulbGroups</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a88549b6027accd8039b7ae7d8ff826d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2de3fcf39c604ae62092ebab9c970823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6d6031e2e7f3f1cc51454c93f1e13122</anchor>
      <arglist>(const RightOfWayBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::SpeedLimitRule</type>
      <name>CreateSpeedLimitRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a464b8eb391fd0b3f1c290ebadcd3eebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule::State</type>
      <name>CreateDirectionUsageRuleState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a002a9e759ee230aee60e8af3c3d79aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule</type>
      <name>CreateDirectionUsageRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aff97bea27b014243cc9ed27e0f1c2dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abf5240b6d7d293372814907b54a984f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateNonEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad559e840135f887befaf56114d733bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae3aae82bafc81c39d09d31b6e7e2717e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateNonEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4d59fda38f4449f5bcfab925ad51218c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae7bb43141551b4a187af9db961e4e246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a896be0327988e11101f2e380f749e632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule::Range</type>
      <name>CreateRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ba03b0924d18269ee24739cb7fa0214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aabccdacb186a8549b6ff5543dc865f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aca2601f4483c573870038c4147109fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>acb299c39196e6da912e40ff5b01e9771</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aef98f29da5733309ae9e7ad4c6956a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a504c78f01a3bda12a760e4e7c95ae137</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad93d4462062718fe885a4cf47fd146c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a055aef0ad0d91cdd77fddd8520f767ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae0ed68b9006706f6014a4ed540c54172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ca5097e35d97da77db9905a98622731</anchor>
      <arglist>(const RoadGeometryBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateMockContiguousRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a86df4889faa77e29796faedd939b9872</anchor>
      <arglist>(const RoadGeometryContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateOneLaneRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c3f52a9cc6512cab92b3c32a26e5119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5c45c4b17f389bc37a33fbccad327f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2d03c6c4dc963fce73446f652efb950d</anchor>
      <arglist>(const LanePositionResult &amp;lane_a_pos_result, const LanePositionResult &amp;lane_b_pos_result)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Lane &gt;</type>
      <name>CreateLane</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aa97c50d03ebd0e3eba4d489def2351c3</anchor>
      <arglist>(const LaneId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4a1d1da83594d9dee3b4e14809df517d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a09e8c7db93fb922d6f4cf363d0588060</anchor>
      <arglist>(const RoadRulebookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a51675d2410d58943165742f4ff98d22e</anchor>
      <arglist>(const RoadRulebookRelatedRulesBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateMockContiguousRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a229f81180182fd2d2847e4effa5758ee</anchor>
      <arglist>(const RoadRulebookContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::BulbGroup &gt;</type>
      <name>CreateBulbGroup</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adad533de12202353e8158d4581f45233</anchor>
      <arglist>(bool add_missing_bulb_group)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLight &gt;</type>
      <name>CreateTrafficLight</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6153b0d3869a083346188992d611145f</anchor>
      <arglist>(const TrafficLightBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a64d6476b07e2711e2d73b62f3f7f8638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adf94c46d007e5ff6a964475bcdc52a11</anchor>
      <arglist>(const TrafficLightBookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a1155506619e42073372c87d30a740819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9b169bdf50c14b3a2f4aedaf8d33b46e</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RightOfWayRuleStateProvider &gt;</type>
      <name>CreateRightOfWayRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a506864db3b98a62062783b946ce0be7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseProvider &gt;</type>
      <name>CreatePhaseProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a73bc83a71c52c26c9a54493d063a46b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; IntersectionBook &gt;</type>
      <name>CreateIntersectionBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a92b5693c77b4338dc119e305c05908dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae8af3a6fd1d97f48349cc4536ab81cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateBasicRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad397f34ac523cac7f123bedd82e2f67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::DiscreteValueRuleStateProvider &gt;</type>
      <name>CreateDiscreteValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5dced08998d0beb56994f840e0c5f342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RangeValueRuleStateProvider &gt;</type>
      <name>CreateRangeValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aadea518f62326e52e4db3968cdb2398f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mock_geometry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/test_utilities/</path>
    <filename>mock__geometry_8cc.html</filename>
    <includes id="mock__geometry_8h" name="mock_geometry.h" local="yes" imported="no">maliput/test_utilities/mock_geometry.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <namespace>maliput::geometry_base::test</namespace>
  </compound>
  <compound kind="file">
    <name>mock_geometry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/test_utilities/</path>
    <filename>mock__geometry_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="geometry__base_2branch__point_8h" name="geometry_base/branch_point.h" local="yes" imported="no">maliput/geometry_base/branch_point.h</includes>
    <includes id="brute__force__strategy_8h" name="brute_force_strategy.h" local="yes" imported="no">maliput/geometry_base/brute_force_strategy.h</includes>
    <includes id="geometry__base_2junction_8h" name="geometry_base/junction.h" local="yes" imported="no">maliput/geometry_base/junction.h</includes>
    <includes id="geometry__base_2lane_8h" name="geometry_base/lane.h" local="yes" imported="no">maliput/geometry_base/lane.h</includes>
    <includes id="geometry__base_2road__geometry_8h" name="geometry_base/road_geometry.h" local="yes" imported="no">maliput/geometry_base/road_geometry.h</includes>
    <includes id="geometry__base_2segment_8h" name="geometry_base/segment.h" local="yes" imported="no">maliput/geometry_base/segment.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::geometry_base::test::MockRoadGeometry</class>
    <class kind="class">maliput::geometry_base::test::MockBranchPoint</class>
    <class kind="class">maliput::geometry_base::test::MockJunction</class>
    <class kind="class">maliput::geometry_base::test::MockSegment</class>
    <class kind="class">maliput::geometry_base::test::MockLane</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <namespace>maliput::geometry_base::test</namespace>
  </compound>
  <compound kind="file">
    <name>model_values.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>model__values_8cc.html</filename>
    <includes id="model__values_8h" name="model_values.h" local="yes" imported="no">maliput/drake/systems/framework/model_values.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>model_values.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>model__values_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <class kind="class">maliput::drake::systems::internal::ModelValues</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
  </compound>
  <compound kind="file">
    <name>never_destroyed.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>never__destroyed_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="class">maliput::drake::never_destroyed</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>nice_type_name.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>nice__type__name_8cc.html</filename>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <includes id="nice__type__name__override_8h" name="nice_type_name_override.h" local="yes" imported="no">maliput/drake/common/nice_type_name_override.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>nice_type_name.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>nice__type__name_8h.html</filename>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <class kind="class">maliput::drake::NiceTypeName</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>nice_type_name_override.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>nice__type__name__override_8cc.html</filename>
    <includes id="nice__type__name__override_8h" name="nice_type_name_override.h" local="yes" imported="no">maliput/drake/common/nice_type_name_override.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>SetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a6172345627ca7c9e736144cc71523585</anchor>
      <arglist>(NiceTypeNamePtrOverride new_ptr_override)</arglist>
    </member>
    <member kind="function">
      <type>const NiceTypeNamePtrOverride &amp;</type>
      <name>GetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a1212619fa4d8bca81de1e180172adc39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nice_type_name_override.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>nice__type__name__override_8h.html</filename>
    <class kind="struct">maliput::drake::internal::type_erased_ptr</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="typedef">
      <type>std::function&lt; std::string(const type_erased_ptr &amp;)&gt;</type>
      <name>NiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a8b64ad8cc708de24f780bf02416bd18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a6172345627ca7c9e736144cc71523585</anchor>
      <arglist>(NiceTypeNamePtrOverride new_ptr_override)</arglist>
    </member>
    <member kind="function">
      <type>const NiceTypeNamePtrOverride &amp;</type>
      <name>GetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a1212619fa4d8bca81de1e180172adc39</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>output_port.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>output__port_8cc.html</filename>
    <includes id="output__port_8h" name="output_port.h" local="yes" imported="no">maliput/drake/systems/framework/output_port.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>output_port.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>output__port_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <includes id="type__safe__index_8h" name="type_safe_index.h" local="yes" imported="no">maliput/drake/common/type_safe_index.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="output__port__base_8h" name="output_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/output_port_base.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::OutputPort</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>output_port_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>output__port__base_8cc.html</filename>
    <includes id="output__port__base_8h" name="output_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/output_port_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>output_port_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>output__port__base_8h.html</filename>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="port__base_8h" name="port_base.h" local="yes" imported="no">maliput/drake/systems/framework/port_base.h</includes>
    <class kind="class">maliput::drake::systems::OutputPortBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>overlapping_type.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>overlapping__type_8cc.html</filename>
    <includes id="overlapping__type_8h" name="overlapping_type.h" local="yes" imported="no">maliput/math/overlapping_type.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator|</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a83bfe484e76b37ad9cc57ed9bd714b79</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator&amp;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a188960295ec6a52f2477c6e0bb5984b6</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>overlapping_type.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>overlapping__type_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OverlappingType</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>af6022ec3177e3ba16073ae84ccfb5b61</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a026931af6058f84edf6f23b727936e46">kDisjointed</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a8bf5940d983d36987f4a41691ea1d562">kIntersected</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a37909e88ded01d78663d301fa3454166">kContained</enumvalue>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator|</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a83bfe484e76b37ad9cc57ed9bd714b79</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator&amp;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a188960295ec6a52f2477c6e0bb5984b6</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parameters.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>parameters_8cc.html</filename>
    <includes id="parameters_8h" name="parameters.h" local="yes" imported="no">maliput/drake/systems/framework/parameters.h</includes>
  </compound>
  <compound kind="file">
    <name>parameters.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>parameters_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="abstract__values_8h" name="abstract_values.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_values.h</includes>
    <includes id="discrete__values_8h" name="discrete_values.h" local="yes" imported="no">maliput/drake/systems/framework/discrete_values.h</includes>
    <class kind="class">maliput::drake::systems::Parameters</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>passkey.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>passkey_8h.html</filename>
    <class kind="class">maliput::common::Passkey</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>api/rules/phase.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>api_2rules_2phase_8cc.html</filename>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>routing/phase.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>routing_2phase_8cc.html</filename>
    <includes id="routing_2phase_8h" name="routing/phase.h" local="yes" imported="no">maliput/routing/phase.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ValidatePositionIsInLaneSRanges</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>acb6529f573444cfd3ee09f9340d5cfb3</anchor>
      <arglist>(const maliput::api::RoadPosition &amp;position, const std::vector&lt; api::LaneSRange &gt; &amp;lane_s_ranges, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/rules/phase.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>api_2rules_2phase_8h.html</filename>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <class kind="class">maliput::api::rules::Phase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="typedef">
      <type>std::unordered_map&lt; RightOfWayRule::Id, RightOfWayRule::State::Id &gt;</type>
      <name>deprecated</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9880f1aadf0730ff465fc9a4ea2a0ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; UniqueBulbId, BulbState &gt;</type>
      <name>BulbStates</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a53658179f838e5cccfddc785fbc8bd08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt;</type>
      <name>DiscreteValueRuleStates</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a98a27b2eab5f51c5c1f5521133252919</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing/phase.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>routing_2phase_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="route__position__result_8h" name="route_position_result.h" local="yes" imported="no">maliput/routing/route_position_result.h</includes>
    <class kind="class">maliput::routing::Phase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>bool</type>
      <name>ValidatePositionIsInLaneSRanges</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>acb6529f573444cfd3ee09f9340d5cfb3</anchor>
      <arglist>(const maliput::api::RoadPosition &amp;position, const std::vector&lt; api::LaneSRange &gt; &amp;lane_s_ranges, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phase_based_right_of_way_rule_state_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>phase__based__right__of__way__rule__state__provider_8cc.html</filename>
    <includes id="phase__based__right__of__way__rule__state__provider_8h" name="phase_based_right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/base/phase_based_right_of_way_rule_state_provider.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>phase_based_right_of_way_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>phase__based__right__of__way__rule__state__provider_8h.html</filename>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="right__of__way__rule__state__provider_8h" name="right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule_state_provider.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>phase_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>phase__provider_8h.html</filename>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="state__provider__result_8h" name="state_provider_result.h" local="yes" imported="no">maliput/api/rules/state_provider_result.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::PhaseProvider</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>phase_ring.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>phase__ring_8cc.html</filename>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>phase_ring.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>phase__ring_8h.html</filename>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::PhaseRing</class>
    <class kind="struct">maliput::api::rules::PhaseRing::NextPhase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>phase_ring_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>phase__ring__book_8h.html</filename>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <class kind="class">maliput::api::rules::PhaseRingBook</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>phase_ring_book_loader.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>phase__ring__book__loader_8cc.html</filename>
    <includes id="phase__ring__book__loader_8h" name="phase_ring_book_loader.h" local="yes" imported="no">maliput/base/phase_ring_book_loader.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="manual__phase__ring__book_8h" name="manual_phase_ring_book.h" local="yes" imported="no">maliput/base/manual_phase_ring_book.h</includes>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a965f15f535b37a8265347d8d2e5434be</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a265cddc5edae1f57e02d03499c4c29c5</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phase_ring_book_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>phase__ring__book__loader_8h.html</filename>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a71eff4450bcc4e11f38442441cdb5195</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFileOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a179c8e2243d2f113a0574efc1f57758e</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a16da6294622c366500107beede513985</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aa94a8bdc4b38fcc4d05e6637903f0f56</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phase_ring_book_loader_old_rules.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>phase__ring__book__loader__old__rules_8cc.html</filename>
    <includes id="phase__ring__book__loader_8h" name="phase_ring_book_loader.h" local="yes" imported="no">maliput/base/phase_ring_book_loader.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="manual__phase__ring__book_8h" name="manual_phase_ring_book.h" local="yes" imported="no">maliput/base/manual_phase_ring_book.h</includes>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aa55ad2c0686a0577304e12d2094fa355</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFileOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a826897c7b08dbb77b64737456e1d0b7a</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>phased_discrete_rule_state_provider.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>phased__discrete__rule__state__provider_8cc.html</filename>
    <includes id="phased__discrete__rule__state__provider_8h" name="phased_discrete_rule_state_provider.h" local="yes" imported="no">maliput/base/phased_discrete_rule_state_provider.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2phase_8h" name="api/rules/phase.h" local="yes" imported="no">maliput/api/rules/phase.h</includes>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="rule__filter_8h" name="rule_filter.h" local="yes" imported="no">maliput/base/rule_filter.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>phased_discrete_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>phased__discrete__rule__state__provider_8h.html</filename>
    <includes id="discrete__value__rule__state__provider_8h" name="discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule_state_provider.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="manual__discrete__value__rule__state__provider_8h" name="manual_discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/base/manual_discrete_value_rule_state_provider.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::PhasedDiscreteRuleStateProvider</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>piecewise_polynomial.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/trajectories/</path>
    <filename>piecewise__polynomial_8cc.html</filename>
    <includes id="piecewise__polynomial_8h" name="piecewise_polynomial.h" local="yes" imported="no">maliput/drake/common/trajectories/piecewise_polynomial.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>namespacemaliput_1_1drake_1_1trajectories.html</anchorfile>
      <anchor>a415865b14a58e08d64ed3c7d90011727</anchor>
      <arglist>(T val, T tol)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>piecewise_polynomial.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/trajectories/</path>
    <filename>piecewise__polynomial_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="polynomial_8h" name="polynomial.h" local="yes" imported="no">maliput/drake/common/polynomial.h</includes>
    <includes id="piecewise__trajectory_8h" name="piecewise_trajectory.h" local="yes" imported="no">maliput/drake/common/trajectories/piecewise_trajectory.h</includes>
    <class kind="class">maliput::drake::trajectories::PiecewisePolynomial</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>piecewise_trajectory.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/trajectories/</path>
    <filename>piecewise__trajectory_8cc.html</filename>
    <includes id="piecewise__trajectory_8h" name="piecewise_trajectory.h" local="yes" imported="no">maliput/drake/common/trajectories/piecewise_trajectory.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>piecewise_trajectory.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/trajectories/</path>
    <filename>piecewise__trajectory_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="trajectory_8h" name="trajectory.h" local="yes" imported="no">maliput/drake/common/trajectories/trajectory.h</includes>
    <class kind="class">maliput::drake::trajectories::PiecewiseTrajectory</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>pointer_cast.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>pointer__cast_8cc.html</filename>
    <includes id="pointer__cast_8h" name="pointer_cast.h" local="yes" imported="no">maliput/drake/common/pointer_cast.h</includes>
  </compound>
  <compound kind="file">
    <name>pointer_cast.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>pointer__cast_8h.html</filename>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>static_pointer_cast</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a36150fcc9734997befa37c4c9c8ac80b</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>dynamic_pointer_cast</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a44c423659476de5c504384a34a7a48de</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>dynamic_pointer_cast_or_throw</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afdc8d19ae3df0e6cb635460680f4335d</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polynomial.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>polynomial_8cc.html</filename>
    <includes id="polynomial_8h" name="polynomial.h" local="yes" imported="no">maliput/drake/common/polynomial.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="variable">
      <type>constexpr char</type>
      <name>kNameChars</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4278037dcb693a8ee6b06709bf630e7c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kNumNameChars</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3eb8cf48cd1a44df66b82ec47978884b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kNameLength</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a8beaa96b5dc7c903f4412e3f6ce95bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kMaxNamePart</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>affa3b7e9b38e1a49824ae3edfcca411f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polynomial.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>polynomial_8h.html</filename>
    <includes id="constants_8h" name="constants.h" local="yes" imported="no">maliput/drake/common/constants.h</includes>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="class">maliput::drake::Polynomial</class>
    <class kind="struct">maliput::drake::Polynomial::Product</class>
    <class kind="class">maliput::drake::Polynomial::Term</class>
    <class kind="class">maliput::drake::Polynomial::Monomial</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="typedef">
      <type>Polynomial&lt; double &gt;</type>
      <name>Polynomiald</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab0a2621977171e1d2d5b64c55141b9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Polynomiald, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorXPoly</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a00cbebcd97766579bb36e35abcf44acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Polynomial&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a54e1a1d5235229e09f8af51fe653d896</anchor>
      <arglist>(const Polynomial&lt; T &gt; &amp;base, typename Polynomial&lt; T &gt;::PowerType exponent)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3b9bb65194582cce374b2a7d01a09610</anchor>
      <arglist>(std::ostream &amp;os, const Eigen::Matrix&lt; Polynomial&lt; T &gt;, Rows, Cols &gt; &amp;poly_mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>port__base_8cc.html</filename>
    <includes id="port__base_8h" name="port_base.h" local="yes" imported="no">maliput/drake/systems/framework/port_base.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>port_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>port__base_8h.html</filename>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::PortBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>profiler.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>profiler_8h.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILER_ENABLE</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a885e4f93bfdc2e620412135609a01951</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_THREAD_NAME</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a801ba63d48f2260e69bc2b6311a48541</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_LOG_TEXT</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a43bae8cf84e0e51dbd31ae0fade67406</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_BEGIN</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a3fe345af6145fd1a0c94fa2735381339</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_END</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a08acc0c0561e8facc7c1e90f820b289b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_L</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a20742de6cdc4c4123fa2a300250b27b2</anchor>
      <arglist>(name, line)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a99b3d2dae97aeddcc14517e103f4ce7e</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_FUNC</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a2d8d88995e78251bf6f538eb217f753a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILE_PRETTY_FUNC</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a3e6adf628ea5fe8bc148ce522353f6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MALIPUT_PROFILER_VALID</name>
      <anchorfile>profiler_8h.html</anchorfile>
      <anchor>a3c7981d523e3fa5d98b075adfe4e4a2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quaternion.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>quaternion_8cc.html</filename>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">maliput/math/quaternion.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2da180d301577cd15c3869079ae73256</anchor>
      <arglist>(std::ostream &amp;os, const Quaternion &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quaternion.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>quaternion_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">maliput/math/matrix.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::math::Quaternion</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2da180d301577cd15c3869079ae73256</anchor>
      <arglist>(std::ostream &amp;os, const Quaternion &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>random_8cc.html</filename>
    <includes id="random_8h" name="random.h" local="yes" imported="no">maliput/drake/common/random.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>T</type>
      <name>CalcProbabilityDensity</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a7459c4a03d4b4f77eea119df933489da</anchor>
      <arglist>(RandomDistribution distribution, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>template double</type>
      <name>CalcProbabilityDensity&lt; double &gt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a10bce133654002443b7d69eec8835b39</anchor>
      <arglist>(RandomDistribution, const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>random_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="extract__double_8h" name="extract_double.h" local="yes" imported="no">maliput/drake/common/extract_double.h</includes>
    <class kind="class">maliput::drake::RandomGenerator</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="enumeration">
      <type></type>
      <name>RandomDistribution</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a72383be4710d27584d0821effc6506a5</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5a3ea9f7aca87fd7b64469a0d1119f0b50">kUniform</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5ab933cd0242085c2dbf804dbf288ce7f0">kGaussian</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5a601bf5851ffd28f5e6219c0f1945c8d6">kExponential</enumvalue>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcProbabilityDensity</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a7459c4a03d4b4f77eea119df933489da</anchor>
      <arglist>(RandomDistribution distribution, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>range_validator.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/common/</path>
    <filename>range__validator_8cc.html</filename>
    <includes id="range__validator_8h" name="range_validator.h" local="yes" imported="no">maliput/common/range_validator.h</includes>
    <includes id="assertion__error_8h" name="assertion_error.h" local="yes" imported="no">maliput/common/assertion_error.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>range_validator.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/common/</path>
    <filename>range__validator_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::common::RangeValidator</class>
    <namespace>maliput</namespace>
    <namespace>maliput::common</namespace>
  </compound>
  <compound kind="file">
    <name>range_value_rule.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>range__value__rule_8cc.html</filename>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>range_value_rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>range__value__rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::RangeValueRule</class>
    <class kind="struct">maliput::api::rules::RangeValueRule::Range</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>range_value_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>range__value__rule__state__provider_8h.html</filename>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="state__provider__result_8h" name="state_provider_result.h" local="yes" imported="no">maliput/api/rules/state_provider_result.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::RangeValueRuleStateProvider</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>regions.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>regions_8cc.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsContiguous</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a1fd0168db4089a09b26edfadbcb4035d</anchor>
      <arglist>(const LaneSRange &amp;lane_range_a, const LaneSRange &amp;lane_range_b, const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncluded</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3da5b0c5446a7ad1183d09f99fbd2e61</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges, const RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>regions.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>regions_8h.html</filename>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::SRange</class>
    <class kind="class">maliput::api::LaneSRange</class>
    <class kind="class">maliput::api::LaneSRoute</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsContiguous</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a1fd0168db4089a09b26edfadbcb4035d</anchor>
      <arglist>(const LaneSRange &amp;lane_range_a, const LaneSRange &amp;lane_range_b, const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncluded</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3da5b0c5446a7ad1183d09f99fbd2e61</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges, const RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reset_on_copy.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>reset__on__copy_8h.html</filename>
    <class kind="class">maliput::drake::reset_on_copy</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
  </compound>
  <compound kind="file">
    <name>right_of_way_rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>right__of__way__rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a0d497c24123337e67c55e9b163db1135</anchor>
      <arglist>(&quot;RightOfWayRule class will be deprecated&quot;, &quot;DiscreteValueRule&quot;) RightOfWayRule final</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>right_of_way_rule_state_provider.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>right__of__way__rule__state__provider_8h.html</filename>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="state__provider__result_8h" name="state_provider_result.h" local="yes" imported="no">maliput/api/rules/state_provider_result.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a689b8cce73fdae159a03a234f658a925</anchor>
      <arglist>(&quot;RigthOfWayRule class will be deprecated.&quot;) RightOfWayRuleStateProvider</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/road_geometry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>api_2road__geometry_8cc.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="profiler_8h" name="profiler.h" local="yes" imported="no">maliput/common/profiler.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>geometry_base/road_geometry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>geometry__base_2road__geometry_8cc.html</filename>
    <includes id="geometry__base_2road__geometry_8h" name="geometry_base/road_geometry.h" local="yes" imported="no">maliput/geometry_base/road_geometry.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/road_geometry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2road__geometry_8h.html</filename>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::api::RoadGeometry</class>
    <class kind="class">maliput::api::RoadGeometry::IdIndex</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class RoadGeometry &gt;</type>
      <name>RoadGeometryId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a38fc077ab1aedc28346df61bf12c96a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_base/road_geometry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>geometry__base_2road__geometry_8h.html</filename>
    <includes id="basic__id__index_8h" name="basic_id_index.h" local="yes" imported="no">maliput/api/basic_id_index.h</includes>
    <includes id="api_2branch__point_8h" name="api/branch_point.h" local="yes" imported="no">maliput/api/branch_point.h</includes>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="geometry__base_2branch__point_8h" name="geometry_base/branch_point.h" local="yes" imported="no">maliput/geometry_base/branch_point.h</includes>
    <includes id="brute__force__strategy_8h" name="brute_force_strategy.h" local="yes" imported="no">maliput/geometry_base/brute_force_strategy.h</includes>
    <includes id="geometry__base_2junction_8h" name="geometry_base/junction.h" local="yes" imported="no">maliput/geometry_base/junction.h</includes>
    <includes id="kd__tree__strategy_8h" name="kd_tree_strategy.h" local="yes" imported="no">maliput/geometry_base/kd_tree_strategy.h</includes>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::geometry_base::RoadGeometry</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>road_network.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>road__network_8cc.html</filename>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>road_network.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>road__network_8h.html</filename>
    <includes id="api_2intersection__book_8h" name="api/intersection_book.h" local="yes" imported="no">maliput/api/intersection_book.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule__state__provider_8h" name="discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule_state_provider.h</includes>
    <includes id="phase__provider_8h" name="phase_provider.h" local="yes" imported="no">maliput/api/rules/phase_provider.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="range__value__rule__state__provider_8h" name="range_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/range_value_rule_state_provider.h</includes>
    <includes id="right__of__way__rule__state__provider_8h" name="right_of_way_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule_state_provider.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <includes id="speed__limit__rule_8h" name="speed_limit_rule.h" local="yes" imported="no">maliput/api/rules/speed_limit_rule.h</includes>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::RoadNetwork</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>road_network_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/plugin/</path>
    <filename>road__network__loader_8h.html</filename>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="maliput__plugin__type_8h" name="maliput_plugin_type.h" local="yes" imported="no">maliput/plugin/maliput_plugin_type.h</includes>
    <class kind="class">maliput::plugin::RoadNetworkLoader</class>
    <namespace>maliput</namespace>
    <namespace>maliput::plugin</namespace>
    <member kind="define">
      <type>#define</type>
      <name>REGISTER_ROAD_NETWORK_LOADER_PLUGIN</name>
      <anchorfile>road__network__loader_8h.html</anchorfile>
      <anchor>acef8b10d3b9749d7ad996ce70be3cf9a</anchor>
      <arglist>(PluginName, RoadNetworkLoaderClass)</arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>RoadNetworkLoaderPtr</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>ab0a6280bfa379d2f6330517355866c5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>road_network_validator.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/</path>
    <filename>road__network__validator_8cc.html</filename>
    <includes id="road__network__validator_8h" name="road_network_validator.h" local="yes" imported="no">maliput/api/road_network_validator.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a7adf7645912f0c98f92ad236bfd919be</anchor>
      <arglist>(const RoadNetwork &amp;road_network, const RoadNetworkValidatorOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>road_network_validator.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>road__network__validator_8h.html</filename>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <class kind="struct">maliput::api::RoadNetworkValidatorOptions</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a7adf7645912f0c98f92ad236bfd919be</anchor>
      <arglist>(const RoadNetwork &amp;road_network, const RoadNetworkValidatorOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>road_rulebook.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>road__rulebook_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="speed__limit__rule_8h" name="speed_limit_rule.h" local="yes" imported="no">maliput/api/rules/speed_limit_rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::api::rules::RoadRulebook</class>
    <class kind="struct">maliput::api::rules::RoadRulebook::QueryResults</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>road_rulebook_loader.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>road__rulebook__loader_8cc.html</filename>
    <includes id="road__rulebook__loader_8h" name="road_rulebook_loader.h" local="yes" imported="no">maliput/base/road_rulebook_loader.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="manual__rulebook_8h" name="manual_rulebook.h" local="yes" imported="no">maliput/base/manual_rulebook.h</includes>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <includes id="yaml__conversion_8h" name="yaml_conversion.h" local="yes" imported="no">maliput/base/yaml_conversion.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae87bad07e3c579517a7e486544448e59</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae8bb612786d298f2f4eb0ea5a010caf</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>road_rulebook_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>road__rulebook__loader_8h.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae87bad07e3c579517a7e486544448e59</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae8bb612786d298f2f4eb0ea5a010caf</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a86a2036f65730d912b68767e489d36f4</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>accce2c90d0627fa85c6b11c9924c0609</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>road_rulebook_loader_using_rule_registry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>road__rulebook__loader__using__rule__registry_8cc.html</filename>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="manual__rulebook_8h" name="manual_rulebook.h" local="yes" imported="no">maliput/base/manual_rulebook.h</includes>
    <includes id="road__rulebook__loader_8h" name="road_rulebook_loader.h" local="yes" imported="no">maliput/base/road_rulebook_loader.h</includes>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <includes id="yaml__conversion_8h" name="yaml_conversion.h" local="yes" imported="no">maliput/base/yaml_conversion.h</includes>
    <includes id="logger_8h" name="logger.h" local="yes" imported="no">maliput/common/logger.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a86a2036f65730d912b68767e489d36f4</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>accce2c90d0627fa85c6b11c9924c0609</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>roll_pitch_yaw.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>roll__pitch__yaw_8cc.html</filename>
    <includes id="roll__pitch__yaw_8h" name="roll_pitch_yaw.h" local="yes" imported="no">maliput/math/roll_pitch_yaw.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>roll_pitch_yaw.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>roll__pitch__yaw_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="matrix_8h" name="matrix.h" local="yes" imported="no">maliput/math/matrix.h</includes>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">maliput/math/quaternion.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::math::RollPitchYaw</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>route.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>route_8cc.html</filename>
    <includes id="route_8h" name="route.h" local="yes" imported="no">maliput/routing/route.h</includes>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
  </compound>
  <compound kind="file">
    <name>route.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>route_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="lane__s__range__relation_8h" name="lane_s_range_relation.h" local="yes" imported="no">maliput/routing/lane_s_range_relation.h</includes>
    <includes id="routing_2phase_8h" name="routing/phase.h" local="yes" imported="no">maliput/routing/phase.h</includes>
    <includes id="route__position__result_8h" name="route_position_result.h" local="yes" imported="no">maliput/routing/route_position_result.h</includes>
    <class kind="class">maliput::routing::Route</class>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
  </compound>
  <compound kind="file">
    <name>route_position_result.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>route__position__result_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <class kind="struct">maliput::routing::PhasePositionResult</class>
    <class kind="struct">maliput::routing::RoutePositionResult</class>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
  </compound>
  <compound kind="file">
    <name>router.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>router_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="road__network_8h" name="road_network.h" local="yes" imported="no">maliput/api/road_network.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="route_8h" name="route.h" local="yes" imported="no">maliput/routing/route.h</includes>
    <includes id="routing__constraints_8h" name="routing_constraints.h" local="yes" imported="no">maliput/routing/routing_constraints.h</includes>
    <class kind="class">maliput::routing::Router</class>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
  </compound>
  <compound kind="file">
    <name>routing_constraints.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/routing/</path>
    <filename>routing__constraints_8cc.html</filename>
    <includes id="routing__constraints_8h" name="routing_constraints.h" local="yes" imported="no">maliput/routing/routing_constraints.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoutingConstraints</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a3604feb52a6ed523000b97c0033d6c5e</anchor>
      <arglist>(const RoutingConstraints &amp;routing_constraints)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>routing_constraints.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/routing/</path>
    <filename>routing__constraints_8h.html</filename>
    <class kind="struct">maliput::routing::RoutingConstraints</class>
    <namespace>maliput</namespace>
    <namespace>maliput::routing</namespace>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoutingConstraints</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a3604feb52a6ed523000b97c0033d6c5e</anchor>
      <arglist>(const RoutingConstraints &amp;routing_constraints)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>rule_8cc.html</filename>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="unique__id_8h" name="unique_id.h" local="yes" imported="no">maliput/api/unique_id.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::Rule</class>
    <class kind="struct">maliput::api::rules::Rule::State</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>rule_filter.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>rule__filter_8cc.html</filename>
    <includes id="rule__filter_8h" name="rule_filter.h" local="yes" imported="no">maliput/base/rule_filter.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>api::rules::RoadRulebook::QueryResults</type>
      <name>FilterRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab6fcf00cfd61b5f2c309a471f8973340</anchor>
      <arglist>(const api::rules::RoadRulebook::QueryResults &amp;rules, const std::vector&lt; DiscreteValueRuleFilter &gt; &amp;discrete_value_rules_filters, const std::vector&lt; RangeValueRuleFilter &gt; &amp;range_value_rules_filters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule_filter.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>rule__filter_8h.html</filename>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <namespace>maliput</namespace>
    <member kind="typedef">
      <type>std::function&lt; bool(const api::rules::DiscreteValueRule &amp;)&gt;</type>
      <name>DiscreteValueRuleFilter</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>af47f9bba35c4e7f194275267573a1faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const api::rules::RangeValueRule &amp;)&gt;</type>
      <name>RangeValueRuleFilter</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab010f6124960691793181deddb8302e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>api::rules::RoadRulebook::QueryResults</type>
      <name>FilterRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab6fcf00cfd61b5f2c309a471f8973340</anchor>
      <arglist>(const api::rules::RoadRulebook::QueryResults &amp;rules, const std::vector&lt; DiscreteValueRuleFilter &gt; &amp;discrete_value_rules_filters, const std::vector&lt; RangeValueRuleFilter &gt; &amp;range_value_rules_filters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/rules/rule_registry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>api_2rules_2rule__registry_8cc.html</filename>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>base/rule_registry.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>base_2rule__registry_8cc.html</filename>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>DirectionUsageRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a59970e4acc510adc08b7d1b925c79428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildDirectionUsageRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a88f6afe21f74c97a61caa392f3d99085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>RightOfWayRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ac32b426289adb8580f95431a088dca4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildRightOfWayRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae129ca7ec98c04f107c8ca5642a18805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>VehicleStopInZoneBehaviorRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ade7b13115e7582b310a1425d0c3a5a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildVehicleStopInZoneBehaviorRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a7764364f52a7f06d32340e697d2fd894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>SpeedLimitRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3fedaec7dc89f069552385eeaf1bddee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api/rules/rule_registry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>api_2rules_2rule__registry_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::RuleRegistry</class>
    <class kind="struct">maliput::api::rules::RuleRegistry::QueryResult</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Rule::TypeId, std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>DiscreteValueRuleTypeAndValues</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a2243c6424f27aa59e29bec1413f2d962</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Rule::TypeId, std::vector&lt; RangeValueRule::Range &gt; &gt;</type>
      <name>RangeValueRuleTypeAndValues</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a2cc52403baadc577433abb54894abe15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base/rule_registry.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>base_2rule__registry_8h.html</filename>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <class kind="struct">maliput::RelatedRulesKeys</class>
    <class kind="struct">maliput::RelatedUniqueIdsKeys</class>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>DirectionUsageRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a59970e4acc510adc08b7d1b925c79428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildDirectionUsageRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a88f6afe21f74c97a61caa392f3d99085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>RightOfWayRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ac32b426289adb8580f95431a088dca4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildRightOfWayRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae129ca7ec98c04f107c8ca5642a18805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>VehicleStopInZoneBehaviorRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ade7b13115e7582b310a1425d0c3a5a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildVehicleStopInZoneBehaviorRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a7764364f52a7f06d32340e697d2fd894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>SpeedLimitRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3fedaec7dc89f069552385eeaf1bddee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule_registry_loader.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>rule__registry__loader_8cc.html</filename>
    <includes id="rule__registry__loader_8h" name="rule_registry_loader.h" local="yes" imported="no">maliput/base/rule_registry_loader.h</includes>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="range__value__rule_8h" name="range_value_rule.h" local="yes" imported="no">maliput/api/rules/range_value_rule.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="yaml__conversion_8h" name="yaml_conversion.h" local="yes" imported="no">maliput/base/yaml_conversion.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistry</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a8578b49883025263c70cb77aea11af3e</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistryFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a03c4c176854c7d60524ec666c03f3ff4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule_registry_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>rule__registry__loader_8h.html</filename>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistry</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a8578b49883025263c70cb77aea11af3e</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistryFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a03c4c176854c7d60524ec666c03f3ff4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule_tools.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>rule__tools_8cc.html</filename>
    <includes id="rule__tools_8h" name="rule_tools.h" local="yes" imported="no">maliput/base/rule_tools.h</includes>
    <includes id="state__provider__result_8h" name="state_provider_result.h" local="yes" imported="no">maliput/api/rules/state_provider_result.h</includes>
    <includes id="base_2rule__registry_8h" name="base/rule_registry.h" local="yes" imported="no">maliput/base/rule_registry.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a98b23877bdff76d8134d4ae47c0e6001</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetCurrentYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a717bbe98643e0f44b2f22588f3876a9d</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ace5a222c0c4ca44dbc09aa5b9bfa7c63</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetCurrentBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a07de48c35e49e183caf5ad6580b4d0d5</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rule_tools.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>rule__tools_8h.html</filename>
    <includes id="discrete__value__rule_8h" name="discrete_value_rule.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule.h</includes>
    <includes id="discrete__value__rule__state__provider_8h" name="discrete_value_rule_state_provider.h" local="yes" imported="no">maliput/api/rules/discrete_value_rule_state_provider.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <includes id="api_2rules_2rule__registry_8h" name="api/rules/rule_registry.h" local="yes" imported="no">maliput/api/rules/rule_registry.h</includes>
    <class kind="struct">maliput::RuleTypeFilter</class>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a98b23877bdff76d8134d4ae47c0e6001</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetCurrentYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a717bbe98643e0f44b2f22588f3876a9d</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ace5a222c0c4ca44dbc09aa5b9bfa7c63</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetCurrentBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a07de48c35e49e183caf5ad6580b4d0d5</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>runge_kutta3_integrator.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>runge__kutta3__integrator_8cc.html</filename>
    <includes id="runge__kutta3__integrator_8h" name="runge_kutta3_integrator.h" local="yes" imported="no">maliput/drake/systems/analysis/runge_kutta3_integrator.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>runge_kutta3_integrator.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>runge__kutta3__integrator_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="integrator__base_8h" name="integrator_base.h" local="yes" imported="no">maliput/drake/systems/analysis/integrator_base.h</includes>
    <class kind="class">maliput::drake::systems::RungeKutta3Integrator</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>saturate.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>saturate_8cc.html</filename>
    <includes id="saturate_8h" name="saturate.h" local="yes" imported="no">maliput/math/saturate.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>double</type>
      <name>saturate</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac8f73efa4810c92b9580ccbba3c76f45</anchor>
      <arglist>(double x, double min, double max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saturate.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>saturate_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>double</type>
      <name>saturate</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac8f73efa4810c92b9580ccbba3c76f45</anchor>
      <arglist>(double x, double min, double max)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scalar_conversion_traits.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>scalar__conversion__traits_8cc.html</filename>
    <includes id="scalar__conversion__traits_8h" name="scalar_conversion_traits.h" local="yes" imported="no">maliput/drake/systems/framework/scalar_conversion_traits.h</includes>
  </compound>
  <compound kind="file">
    <name>scalar_conversion_traits.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>scalar__conversion__traits_8h.html</filename>
    <class kind="struct">maliput::drake::systems::scalar_conversion::Traits</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::FromDoubleTraits</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::ValueConverter</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::ValueConverter&lt; T, T &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::scalar_conversion</namespace>
  </compound>
  <compound kind="file">
    <name>scalar_dense_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>scalar__dense__output_8cc.html</filename>
    <includes id="scalar__dense__output_8h" name="scalar_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_dense_output.h</includes>
  </compound>
  <compound kind="file">
    <name>scalar_dense_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>scalar__dense__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="dense__output_8h" name="dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/dense_output.h</includes>
    <class kind="class">maliput::drake::systems::ScalarDenseOutput</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>scalar_initial_value_problem.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>scalar__initial__value__problem_8cc.html</filename>
    <includes id="scalar__initial__value__problem_8h" name="scalar_initial_value_problem.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_initial_value_problem.h</includes>
  </compound>
  <compound kind="file">
    <name>scalar_initial_value_problem.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>scalar__initial__value__problem_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="initial__value__problem_8h" name="initial_value_problem.h" local="yes" imported="no">maliput/drake/systems/analysis/initial_value_problem.h</includes>
    <includes id="scalar__view__dense__output_8h" name="scalar_view_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_view_dense_output.h</includes>
    <class kind="class">maliput::drake::systems::ScalarInitialValueProblem</class>
    <class kind="struct">maliput::drake::systems::ScalarInitialValueProblem::ScalarOdeContext</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>scalar_view_dense_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>scalar__view__dense__output_8cc.html</filename>
    <includes id="scalar__view__dense__output_8h" name="scalar_view_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_view_dense_output.h</includes>
  </compound>
  <compound kind="file">
    <name>scalar_view_dense_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>scalar__view__dense__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="dense__output_8h" name="dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/dense_output.h</includes>
    <includes id="scalar__dense__output_8h" name="scalar_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/scalar_dense_output.h</includes>
    <class kind="class">maliput::drake::systems::ScalarViewDenseOutput</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>segment.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>segment_8cc.html</filename>
    <includes id="geometry__base_2segment_8h" name="geometry_base/segment.h" local="yes" imported="no">maliput/geometry_base/segment.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>api/segment.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>api_2segment_8h.html</filename>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::Segment</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Segment &gt;</type>
      <name>SegmentId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a405b9288d31a542db4352153419edba1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_base/segment.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>geometry__base_2segment_8h.html</filename>
    <includes id="api_2junction_8h" name="api/junction.h" local="yes" imported="no">maliput/api/junction.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="passkey_8h" name="passkey.h" local="yes" imported="no">maliput/common/passkey.h</includes>
    <includes id="geometry__base_2lane_8h" name="geometry_base/lane.h" local="yes" imported="no">maliput/geometry_base/lane.h</includes>
    <class kind="class">maliput::geometry_base::Segment</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
  </compound>
  <compound kind="file">
    <name>segment_analysis.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>segment__analysis_8cc.html</filename>
    <includes id="segment__analysis_8h" name="segment_analysis.h" local="yes" imported="no">maliput/utility/segment_analysis.h</includes>
    <includes id="api_2lane_8h" name="api/lane.h" local="yes" imported="no">maliput/api/lane.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::unordered_set&lt; const api::Segment * &gt;</type>
      <name>FindConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a407ac8e9552f10055497d8676432e300</anchor>
      <arglist>(const api::Segment *seed_segment)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unordered_set&lt; const api::Segment * &gt; &gt;</type>
      <name>AnalyzeConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a477f4cdef136a1c784cd6a639b6c52b0</anchor>
      <arglist>(const api::RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>segment_analysis.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>segment__analysis_8h.html</filename>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <includes id="api_2segment_8h" name="api/segment.h" local="yes" imported="no">maliput/api/segment.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::unordered_set&lt; const api::Segment * &gt;</type>
      <name>FindConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a407ac8e9552f10055497d8676432e300</anchor>
      <arglist>(const api::Segment *seed_segment)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unordered_set&lt; const api::Segment * &gt; &gt;</type>
      <name>AnalyzeConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a477f4cdef136a1c784cd6a639b6c52b0</anchor>
      <arglist>(const api::RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simple_phase_ring_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>simple__phase__ring__book_8h.html</filename>
    <includes id="phase__ring_8h" name="phase_ring.h" local="yes" imported="no">maliput/api/rules/phase_ring.h</includes>
    <includes id="phase__ring__book_8h" name="phase_ring_book.h" local="yes" imported="no">maliput/api/rules/phase_ring_book.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::SimplePhaseRingBook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>simple_rulebook.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>simple__rulebook_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="direction__usage__rule_8h" name="direction_usage_rule.h" local="yes" imported="no">maliput/api/rules/direction_usage_rule.h</includes>
    <includes id="right__of__way__rule_8h" name="right_of_way_rule.h" local="yes" imported="no">maliput/api/rules/right_of_way_rule.h</includes>
    <includes id="road__rulebook_8h" name="road_rulebook.h" local="yes" imported="no">maliput/api/rules/road_rulebook.h</includes>
    <includes id="speed__limit__rule_8h" name="speed_limit_rule.h" local="yes" imported="no">maliput/api/rules/speed_limit_rule.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::SimpleRulebook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>speed_limit_rule.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>speed__limit__rule_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__deprecated_8h" name="maliput_deprecated.h" local="yes" imported="no">maliput/common/maliput_deprecated.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aeac7d5c176e479046745b85fe96f21e5</anchor>
      <arglist>(&quot;next release&quot;, &quot;Use RangeValueRule instead.&quot;) SpeedLimitRule</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>state.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>state_8cc.html</filename>
    <includes id="state_8h" name="state.h" local="yes" imported="no">maliput/drake/systems/framework/state.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>state.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>state_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="abstract__values_8h" name="abstract_values.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_values.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="continuous__state_8h" name="continuous_state.h" local="yes" imported="no">maliput/drake/systems/framework/continuous_state.h</includes>
    <includes id="discrete__values_8h" name="discrete_values.h" local="yes" imported="no">maliput/drake/systems/framework/discrete_values.h</includes>
    <class kind="class">maliput::drake::systems::State</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>state_provider_result.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>state__provider__result_8h.html</filename>
    <class kind="struct">maliput::api::rules::StateProviderResult</class>
    <class kind="struct">maliput::api::rules::StateProviderResult::Next</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>stepwise_dense_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/analysis/</path>
    <filename>stepwise__dense__output_8cc.html</filename>
    <includes id="stepwise__dense__output_8h" name="stepwise_dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/stepwise_dense_output.h</includes>
  </compound>
  <compound kind="file">
    <name>stepwise_dense_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/analysis/</path>
    <filename>stepwise__dense__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="dense__output_8h" name="dense_output.h" local="yes" imported="no">maliput/drake/systems/analysis/dense_output.h</includes>
    <class kind="class">maliput::drake::systems::StepwiseDenseOutput</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>stochastic_systems.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/</path>
    <filename>stochastic__systems_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>strategy_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/geometry_base/</path>
    <filename>strategy__base_8cc.html</filename>
    <includes id="strategy__base_8h" name="strategy_base.h" local="yes" imported="no">maliput/geometry_base/strategy_base.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsNewRoadPositionResultCloser</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a099609a21db549b19f38eb51ff83cdda</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;new_road_position_result, const maliput::api::RoadPositionResult &amp;road_position_result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strategy_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/geometry_base/</path>
    <filename>strategy__base_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2road__geometry_8h" name="api/road_geometry.h" local="yes" imported="no">maliput/api/road_geometry.h</includes>
    <class kind="class">maliput::geometry_base::StrategyBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::geometry_base</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsNewRoadPositionResultCloser</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a099609a21db549b19f38eb51ff83cdda</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;new_road_position_result, const maliput::api::RoadPositionResult &amp;road_position_result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string_format.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>string__format_8cc.html</filename>
    <includes id="string__format_8h" name="string_format.h" local="yes" imported="no">maliput/utility/string_format.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a1b9b7a9a7488d5d4addde728fa4ac82d</anchor>
      <arglist>(double value, int precision)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string_format.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>string__format_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a1b9b7a9a7488d5d4addde728fa4ac82d</anchor>
      <arglist>(double value, int precision)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>subvector.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>subvector_8cc.html</filename>
    <includes id="subvector_8h" name="subvector.h" local="yes" imported="no">maliput/drake/systems/framework/subvector.h</includes>
  </compound>
  <compound kind="file">
    <name>subvector.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>subvector_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="vector__base_8h" name="vector_base.h" local="yes" imported="no">maliput/drake/systems/framework/vector_base.h</includes>
    <class kind="class">maliput::drake::systems::Subvector</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system_8cc.html</filename>
    <includes id="system_8h" name="system.h" local="yes" imported="no">maliput/drake/systems/framework/system.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="system__visitor_8h" name="system_visitor.h" local="yes" imported="no">maliput/drake/systems/framework/system_visitor.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <includes id="pointer__cast_8h" name="pointer_cast.h" local="yes" imported="no">maliput/drake/common/pointer_cast.h</includes>
    <includes id="random_8h" name="random.h" local="yes" imported="no">maliput/drake/common/random.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="event__collection_8h" name="event_collection.h" local="yes" imported="no">maliput/drake/systems/framework/event_collection.h</includes>
    <includes id="input__port_8h" name="input_port.h" local="yes" imported="no">maliput/drake/systems/framework/input_port.h</includes>
    <includes id="output__port_8h" name="output_port.h" local="yes" imported="no">maliput/drake/systems/framework/output_port.h</includes>
    <includes id="system__base_8h" name="system_base.h" local="yes" imported="no">maliput/drake/systems/framework/system_base.h</includes>
    <includes id="system__constraint_8h" name="system_constraint.h" local="yes" imported="no">maliput/drake/systems/framework/system_constraint.h</includes>
    <includes id="system__output_8h" name="system_output.h" local="yes" imported="no">maliput/drake/systems/framework/system_output.h</includes>
    <includes id="system__scalar__converter_8h" name="system_scalar_converter.h" local="yes" imported="no">maliput/drake/systems/framework/system_scalar_converter.h</includes>
    <includes id="system__visitor_8h" name="system_visitor.h" local="yes" imported="no">maliput/drake/systems/framework/system_visitor.h</includes>
    <includes id="witness__function_8h" name="witness_function.h" local="yes" imported="no">maliput/drake/systems/framework/witness_function.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__base_8cc.html</filename>
    <includes id="system__base_8h" name="system_base.h" local="yes" imported="no">maliput/drake/systems/framework/system_base.h</includes>
    <includes id="fixed__input__port__value_8h" name="fixed_input_port_value.h" local="yes" imported="no">maliput/drake/systems/framework/fixed_input_port_value.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__base_8h.html</filename>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="abstract__value__cloner_8h" name="abstract_value_cloner.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_value_cloner.h</includes>
    <includes id="cache__entry_8h" name="cache_entry.h" local="yes" imported="no">maliput/drake/systems/framework/cache_entry.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <includes id="input__port__base_8h" name="input_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/input_port_base.h</includes>
    <includes id="output__port__base_8h" name="output_port_base.h" local="yes" imported="no">maliput/drake/systems/framework/output_port_base.h</includes>
    <includes id="value__producer_8h" name="value_producer.h" local="yes" imported="no">maliput/drake/systems/framework/value_producer.h</includes>
    <class kind="class">maliput::drake::systems::SystemBase</class>
    <class kind="struct">maliput::drake::systems::SystemBase::ContextSizes</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_compatibility_doxygen.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__compatibility__doxygen_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>system_constraint.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__constraint_8cc.html</filename>
    <includes id="system__constraint_8h" name="system_constraint.h" local="yes" imported="no">maliput/drake/systems/framework/system_constraint.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_constraint.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__constraint_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <includes id="type__safe__index_8h" name="type_safe_index.h" local="yes" imported="no">maliput/drake/common/type_safe_index.h</includes>
    <includes id="context_8h" name="context.h" local="yes" imported="no">maliput/drake/systems/framework/context.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::SystemConstraintBounds</class>
    <class kind="class">maliput::drake::systems::SystemConstraint</class>
    <class kind="class">maliput::drake::systems::ExternalSystemConstraint</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *value)&gt;</type>
      <name>ContextConstraintCalc</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afb8f89bae1d60315dd16a46224febd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *value)&gt;</type>
      <name>SystemConstraintCalc</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>af67c9d8e51c043770c3cf671ba779083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SystemConstraintType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>aae3110b50a7cad6f8b6d2842f2177e0f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="aae3110b50a7cad6f8b6d2842f2177e0fa24f3db88d378f692d6d4de3357ccfce7">kEquality</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="aae3110b50a7cad6f8b6d2842f2177e0faad3bf38271b2a03f735e67b88923c432">kInequality</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>system_output.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__output_8cc.html</filename>
    <includes id="system__output_8h" name="system_output.h" local="yes" imported="no">maliput/drake/systems/framework/system_output.h</includes>
  </compound>
  <compound kind="file">
    <name>system_output.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__output_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <includes id="framework__common_8h" name="framework_common.h" local="yes" imported="no">maliput/drake/systems/framework/framework_common.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::SystemOutput</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_scalar_conversion_doxygen.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__scalar__conversion__doxygen_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>system_scalar_converter.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__scalar__converter_8cc.html</filename>
    <includes id="system__scalar__converter_8h" name="system_scalar_converter.h" local="yes" imported="no">maliput/drake/systems/framework/system_scalar_converter.h</includes>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">maliput/drake/common/hash.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::system_scalar_converter_internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>ThrowConversionMismatch</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>aea629ffdae88fdc0e82b15eb44a3ce89</anchor>
      <arglist>(const type_info &amp;s_t_info, const type_info &amp;s_u_info, const type_info &amp;other_info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>system_scalar_converter.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__scalar__converter_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__deprecated_8h" name="drake_deprecated.h" local="yes" imported="no">maliput/drake/common/drake_deprecated.h</includes>
    <includes id="scalar__conversion__traits_8h" name="scalar_conversion_traits.h" local="yes" imported="no">maliput/drake/systems/framework/scalar_conversion_traits.h</includes>
    <includes id="system__type__tag_8h" name="system_type_tag.h" local="yes" imported="no">maliput/drake/systems/framework/system_type_tag.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::SystemScalarConverter</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::system_scalar_converter_internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>ThrowConversionMismatch</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>a58fc1e5b73e8984223896941082295a1</anchor>
      <arglist>(const std::type_info &amp;s_t_info, const std::type_info &amp;s_u_info, const std::type_info &amp;other_info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; System&lt; T &gt; &gt;</type>
      <name>Make</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>aa03a4a2cb1a25beafff1998b78d29f4c</anchor>
      <arglist>(const System&lt; U &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>system_type_tag.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__type__tag_8cc.html</filename>
    <includes id="system__type__tag_8h" name="system_type_tag.h" local="yes" imported="no">maliput/drake/systems/framework/system_type_tag.h</includes>
  </compound>
  <compound kind="file">
    <name>system_type_tag.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__type__tag_8h.html</filename>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="struct">maliput::drake::systems::SystemTypeTag</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>system_visitor.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>system__visitor_8cc.html</filename>
    <includes id="system__visitor_8h" name="system_visitor.h" local="yes" imported="no">maliput/drake/systems/framework/system_visitor.h</includes>
  </compound>
  <compound kind="file">
    <name>system_visitor.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>system__visitor_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::Diagram</class>
    <class kind="class">maliput::drake::systems::SystemVisitor</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>systems.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/</path>
    <filename>systems_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>text_logging.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>text__logging_8cc.html</filename>
    <includes id="text__logging_8h" name="text_logging.h" local="yes" imported="no">maliput/drake/common/text_logging.h</includes>
    <includes id="never__destroyed_8h" name="never_destroyed.h" local="yes" imported="no">maliput/drake/common/never_destroyed.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>logging::logger *</type>
      <name>log</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aa157c1d75c2e52df3370e5f458022ee9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>text_logging.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>text__logging_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <class kind="struct">maliput::drake::logging::Warn</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::logging</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SPDLOG_ACTIVE_LEVEL</name>
      <anchorfile>text__logging_8h.html</anchorfile>
      <anchor>ae4fda6f71f35120e2ff48157fca961b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_LOGGER_TRACE</name>
      <anchorfile>text__logging_8h.html</anchorfile>
      <anchor>ad0bef2f7bdab9bbc92da9e808f2a2c98</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_LOGGER_DEBUG</name>
      <anchorfile>text__logging_8h.html</anchorfile>
      <anchor>abe1494de6c6a4bbc6aada9a61639c3ae</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="typedef">
      <type>spdlog::logger</type>
      <name>logger</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a9cae370466ffb304c10aebea42eca26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>logging::logger *</type>
      <name>log</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aa157c1d75c2e52df3370e5f458022ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sink *</type>
      <name>get_dist_sink</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>ae5f4005c702178bf55523cbea71b6f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>set_log_level</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>ae4810092d5fdfca56f482a22ba061ce9</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_pattern</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a4375c78dc51caefbb7ce65fe50098d26</anchor>
      <arglist>(const std::string &amp;pattern)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kHaveSpdlog</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a43a4a42dcea3143d400de1575cb5758c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogLevelUnchanged</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a28b9ac97658840560d344084211ab54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogLevelHelpMessage</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>aa17788a2d3ef00dc12989d677b8b5f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogPatternHelpMessage</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a9be7016e2ec3b1dafb989c8d9b91624b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread_pool.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/utility/</path>
    <filename>thread__pool_8cc.html</filename>
    <includes id="thread__pool_8h" name="thread_pool.h" local="yes" imported="no">maliput/utility/thread_pool.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
  </compound>
  <compound kind="file">
    <name>thread_pool.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/utility/</path>
    <filename>thread__pool_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::utility::ThreadPool</class>
    <namespace>maliput</namespace>
    <namespace>maliput::utility</namespace>
  </compound>
  <compound kind="file">
    <name>traffic_light_book.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>traffic__light__book_8cc.html</filename>
    <includes id="base_2traffic__light__book_8h" name="base/traffic_light_book.h" local="yes" imported="no">maliput/base/traffic_light_book.h</includes>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>api/rules/traffic_light_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>api_2rules_2traffic__light__book_8h.html</filename>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::api::rules::TrafficLightBook</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
  </compound>
  <compound kind="file">
    <name>base/traffic_light_book.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>base_2traffic__light__book_8h.html</filename>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <class kind="class">maliput::TrafficLightBook</class>
    <namespace>maliput</namespace>
  </compound>
  <compound kind="file">
    <name>traffic_light_book_loader.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>traffic__light__book__loader_8cc.html</filename>
    <includes id="traffic__light__book__loader_8h" name="traffic_light_book_loader.h" local="yes" imported="no">maliput/base/traffic_light_book_loader.h</includes>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="base_2traffic__light__book_8h" name="base/traffic_light_book.h" local="yes" imported="no">maliput/base/traffic_light_book.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <includes id="quaternion_8h" name="quaternion.h" local="yes" imported="no">maliput/math/quaternion.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3673381fed4e6e5b62a3ffc77f3f9bae</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a748a7535cbc24118299c3bcbef33a20d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traffic_light_book_loader.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>traffic__light__book__loader_8h.html</filename>
    <includes id="api_2rules_2traffic__light__book_8h" name="api/rules/traffic_light_book.h" local="yes" imported="no">maliput/api/rules/traffic_light_book.h</includes>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3673381fed4e6e5b62a3ffc77f3f9bae</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a748a7535cbc24118299c3bcbef33a20d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traffic_lights.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/api/rules/</path>
    <filename>traffic__lights_8cc.html</filename>
    <includes id="traffic__lights_8h" name="traffic_lights.h" local="yes" imported="no">maliput/api/rules/traffic_lights.h</includes>
    <includes id="maliput__abort_8h" name="maliput_abort.h" local="yes" imported="no">maliput/common/maliput_abort.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="function">
      <type>std::unordered_map&lt; BulbColor, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbColorMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4e3ace1816c987e259ef55535b1cb07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbType, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbTypeMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae22def226ba4538ee9a91f02bd1b5ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbState, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbStateMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ab2af2bdbf1550cd1e87d177254662692</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traffic_lights.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/rules/</path>
    <filename>traffic__lights_8h.html</filename>
    <includes id="lane__data_8h" name="lane_data.h" local="yes" imported="no">maliput/api/lane_data.h</includes>
    <includes id="type__specific__identifier_8h" name="type_specific_identifier.h" local="yes" imported="no">maliput/api/type_specific_identifier.h</includes>
    <includes id="unique__id_8h" name="unique_id.h" local="yes" imported="no">maliput/api/unique_id.h</includes>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="passkey_8h" name="passkey.h" local="yes" imported="no">maliput/common/passkey.h</includes>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <class kind="class">maliput::api::rules::Bulb</class>
    <class kind="struct">maliput::api::rules::Bulb::BoundingBox</class>
    <class kind="class">maliput::api::rules::BulbGroup</class>
    <class kind="class">maliput::api::rules::TrafficLight</class>
    <class kind="class">maliput::api::rules::UniqueBulbId</class>
    <class kind="class">maliput::api::rules::UniqueBulbGroupId</class>
    <class kind="struct">std::hash&lt; maliput::api::rules::UniqueBulbId &gt;</class>
    <class kind="struct">std::less&lt; maliput::api::rules::UniqueBulbId &gt;</class>
    <class kind="struct">std::hash&lt; maliput::api::rules::UniqueBulbGroupId &gt;</class>
    <class kind="struct">std::less&lt; maliput::api::rules::UniqueBulbGroupId &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <namespace>maliput::api::rules</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BulbColor</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6e1f10a3be6871610a2558424fcd78ed</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78edafb0136b923af8c04b31a9d1b5e989acf">kRed</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78eda4c6c30a3642462190739bb7f13af9c7b">kYellow</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78eda1299e6e2ec6371a79385cd3a862f7cc9">kGreen</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BulbType</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae21a360eb5822a6f1f2579b377ba2bb2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="ae21a360eb5822a6f1f2579b377ba2bb2a19cbfb4904c3202ff69a412c142cda6c">kRound</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="ae21a360eb5822a6f1f2579b377ba2bb2ab9915b027f3c5c3f045c880f99f22bc4">kArrow</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BulbState</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a8e3cc9f879a0ac1d7bd47eb69bba5b34</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34acc9ab5e60ac2a9a675ba64bf4bb49dc8">kOff</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34a2e6612c563e3cf5e64362b0f19f4b33f">kOn</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34a52932182c1d638e198dc39077e8da180">kBlinking</enumvalue>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbColor, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbColorMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4e3ace1816c987e259ef55535b1cb07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbType, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbTypeMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae22def226ba4538ee9a91f02bd1b5ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbState, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbStateMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ab2af2bdbf1550cd1e87d177254662692</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>trajectory.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/trajectories/</path>
    <filename>trajectory_8cc.html</filename>
    <includes id="trajectory_8h" name="trajectory.h" local="yes" imported="no">maliput/drake/common/trajectories/trajectory.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>trajectory.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/trajectories/</path>
    <filename>trajectory_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <class kind="class">maliput::drake::trajectories::Trajectory</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::trajectories</namespace>
  </compound>
  <compound kind="file">
    <name>type_safe_index.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>type__safe__index_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">maliput/drake/common/hash.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <class kind="class">maliput::drake::TypeSafeIndex</class>
    <class kind="struct">std::hash&lt; maliput::drake::TypeSafeIndex&lt; Tag &gt; &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab6f5d094c05d975c3fb1eb735d7e0428</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a689b232e965c2a9cb7b98e702eb8502f</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a67239655b7c6173aa85ba63103d62382</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>adc287d6eb32ff6e9287c29d414a2e046</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a8073dc48e59dfd721a71171a88763b7e</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aae8637931173103787c3afd15dbeb4a1</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_specific_identifier.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>type__specific__identifier_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::api::TypeSpecificIdentifier</class>
    <class kind="struct">std::hash&lt; maliput::api::TypeSpecificIdentifier&lt; T &gt; &gt;</class>
    <class kind="struct">std::less&lt; maliput::api::TypeSpecificIdentifier&lt; T &gt; &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>type__specific__identifier_8h.html</anchorfile>
      <anchor>ab09b4d6904e6aa7bfe36a74c94cb3cb0</anchor>
      <arglist>(std::ostream &amp;os, const maliput::api::TypeSpecificIdentifier&lt; T &gt; &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unique_id.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/api/</path>
    <filename>unique__id_8h.html</filename>
    <includes id="maliput__copyable_8h" name="maliput_copyable.h" local="yes" imported="no">maliput/common/maliput_copyable.h</includes>
    <includes id="maliput__hash_8h" name="maliput_hash.h" local="yes" imported="no">maliput/common/maliput_hash.h</includes>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::api::UniqueId</class>
    <class kind="struct">std::hash&lt; maliput::api::UniqueId &gt;</class>
    <class kind="struct">std::less&lt; maliput::api::UniqueId &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::api</namespace>
  </compound>
  <compound kind="file">
    <name>unused.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>unused_8h.html</filename>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <member kind="function">
      <type>void</type>
      <name>unused</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acbbd758ec364c16c9c4137651e771013</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/common/</path>
    <filename>value_8cc.html</filename>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="text__logging_8h" name="text_logging.h" local="yes" imported="no">maliput/drake/common/text_logging.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="function">
      <type>int</type>
      <name>ReportZeroHash</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a12407aae7832e4556353ffbf97e03947</anchor>
      <arglist>(const std::type_info &amp;detail)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/common/</path>
    <filename>value_8h.html</filename>
    <includes id="copyable__unique__ptr_8h" name="copyable_unique_ptr.h" local="yes" imported="no">maliput/drake/common/copyable_unique_ptr.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">maliput/drake/common/hash.h</includes>
    <includes id="is__cloneable_8h" name="is_cloneable.h" local="yes" imported="no">maliput/drake/common/is_cloneable.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <class kind="class">maliput::drake::Value</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl</class>
    <class kind="class">maliput::drake::AbstractValue</class>
    <class kind="struct">maliput::drake::AbstractValue::Wrap</class>
    <class kind="class">maliput::drake::Value</class>
    <class kind="struct">maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter</class>
    <class kind="struct">maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter&lt; T, typehasher_void_t&lt; typename T::NonTypeTemplateParameter &gt; &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasher</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher&lt;&gt;</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher&lt; A, B... &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T&lt; Args... &gt;, false &gt;</class>
    <class kind="struct">maliput::drake::internal::ValueHasher</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T, true &gt;</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher&lt;&gt;</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher&lt; N, Ns... &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T&lt; U, N, Ns... &gt;, false &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHash</class>
    <class kind="struct">maliput::drake::internal::ReportUseOfTypeHash</class>
    <class kind="struct">maliput::drake::internal::ReportUseOfTypeHash&lt; T, 0 &gt;</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl&lt; T, true &gt;</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl&lt; T, false &gt;</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::internal</namespace>
    <member kind="typedef">
      <type>ValueTraitsImpl&lt; T, std::is_copy_constructible_v&lt; T &gt; &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>abfac4da6c79a6441a48613034f5db4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::enable_if_t&lt; std::is_constructible_v&lt; T, Arg1, Args... &gt; &amp;&amp;!std::is_same_v&lt; T, Arg1 &gt; &amp;&amp;!std::is_same_v&lt; T &amp;, Arg1 &gt; &amp;&amp;!std::is_fundamental_v&lt; T &gt; &amp;&amp;(choose_copy==std::is_copy_constructible_v&lt; T &gt;)&gt;</type>
      <name>ValueForwardingCtorEnabled</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a6eb8034ac947af2e08653116c0f945b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref_t</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>addc190dd01303fdccea2e97490e5d800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>typehasher_void_t</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a48e25365483f81f6b6942815475a0e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hash_template_argument_from_pretty_func</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>af079568a021f33d97623eb499843654e</anchor>
      <arglist>(const char *pretty, int which_argument, bool discard_nested, bool discard_cast, FNV1aHasher *result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReportZeroHash</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a12407aae7832e4556353ffbf97e03947</anchor>
      <arglist>(const std::type_info &amp;detail)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value_checker.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>value__checker_8h.html</filename>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>CheckBasicVectorInvariants</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a32cecb4ef6698dd9aed5fffa9eb5852b</anchor>
      <arglist>(const BasicVector&lt; T &gt; *basic_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckVectorValueInvariants</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a5eb403ea3ef3d8ea620d5d49aa07fc87</anchor>
      <arglist>(const AbstractValue *abstract_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>value_producer.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>value__producer_8cc.html</filename>
    <includes id="value__producer_8h" name="value_producer.h" local="yes" imported="no">maliput/drake/systems/framework/value_producer.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>value_producer.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>value__producer_8h.html</filename>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="abstract__value__cloner_8h" name="abstract_value_cloner.h" local="yes" imported="no">maliput/drake/systems/framework/abstract_value_cloner.h</includes>
    <includes id="context__base_8h" name="context_base.h" local="yes" imported="no">maliput/drake/systems/framework/context_base.h</includes>
    <class kind="class">maliput::drake::systems::ValueProducer</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
  </compound>
  <compound kind="file">
    <name>value_to_abstract_value.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>value__to__abstract__value_8h.html</filename>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <includes id="value_8h" name="value.h" local="yes" imported="no">maliput/drake/common/value.h</includes>
    <includes id="basic__vector_8h" name="basic_vector.h" local="yes" imported="no">maliput/drake/systems/framework/basic_vector.h</includes>
    <class kind="class">maliput::drake::systems::internal::ValueToAbstractValue</class>
    <class kind="class">maliput::drake::systems::internal::ValueToVectorValue</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::systems::internal</namespace>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable_helper</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a7f75260709ae2e75a3742a1b3242a84f</anchor>
      <arglist>(decltype(std::declval&lt; Eigen::Ref&lt; ValueType &gt;&gt;(), int()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable_helper</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a60e000d29c31065409637d315a5ef03e</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a4a9091f2afeb9b96551c86ffbf9aa044</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/math/</path>
    <filename>vector_8cc.html</filename>
    <includes id="vector_8h" name="vector.h" local="yes" imported="no">maliput/math/vector.h</includes>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
    <member kind="function">
      <type>Derived_</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a05f7955ffcc5c4a3c6d9e1443415ef4f</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="function">
      <type>Derived_</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3e202389cc39bb64644e3c75de6ab322</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>afd8de5de8781324ef4d16ef3e2ebf380</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a08d83c909fb4ef9b01020607b733496b</anchor>
      <arglist>(const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0cfca9bbf711d2a4b884406aa2b0112c</anchor>
      <arglist>(double, const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5bce5fb861e0ba7ba94954c537e75dce</anchor>
      <arglist>(const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a562a7b7e9dc9b3f83b1f9f3a080fd16e</anchor>
      <arglist>(double, const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0674a5a283777ab89c6f44acbdca6225</anchor>
      <arglist>(const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>aaede2f6113713dbe1ad5dfcfa1e0233c</anchor>
      <arglist>(double, const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1114542e4ad020b7388d55bd0c806c53</anchor>
      <arglist>(const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a97dfdc8230fcdcc7191e0b7d09b14752</anchor>
      <arglist>(double, const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a84c3541718c9b76bc12207226c422717</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a27dd5d0d6632645ef982bd0e3155881f</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a64780b3de4eead0bfa4651443fb2a888</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0ae0facd6fc4d00cb3335b0d617e44ee</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3a15d4f129c4609256f2221117f33051</anchor>
      <arglist>(const VectorBase&lt; 2, Vector2 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5275976c5116b7d9062b6fb96a1ea6b3</anchor>
      <arglist>(double, const VectorBase&lt; 2, Vector2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ae24f95e8c5b64e5f3ded11172c14655b</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 2, Vector2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a9b660d868269fa12f2822f39771fe88e</anchor>
      <arglist>(const VectorBase&lt; 3, Vector3 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a70532231622d0409ce6a01b33d17dc5e</anchor>
      <arglist>(double, const VectorBase&lt; 3, Vector3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2dd290ef0bec4e66539731b5fc90e15f</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 3, Vector3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0e45c8d235558ae11a03e3b136051c27</anchor>
      <arglist>(const VectorBase&lt; 4, Vector4 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ab6528d45adc6279f314a69b208fe171f</anchor>
      <arglist>(double, const VectorBase&lt; 4, Vector4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a62d65b4338247ad0def225774ddcc0e7</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 4, Vector4 &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/math/</path>
    <filename>vector_8h.html</filename>
    <includes id="maliput__throw_8h" name="maliput_throw.h" local="yes" imported="no">maliput/common/maliput_throw.h</includes>
    <class kind="class">maliput::math::VectorBase</class>
    <class kind="class">maliput::math::Vector</class>
    <class kind="class">maliput::math::Vector2</class>
    <class kind="class">maliput::math::Vector3</class>
    <class kind="class">maliput::math::Vector4</class>
    <namespace>maliput</namespace>
    <namespace>maliput::math</namespace>
  </compound>
  <compound kind="file">
    <name>vector_base.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>vector__base_8cc.html</filename>
    <includes id="vector__base_8h" name="vector_base.h" local="yes" imported="no">maliput/drake/systems/framework/vector_base.h</includes>
  </compound>
  <compound kind="file">
    <name>vector_base.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>vector__base_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__assert_8h" name="drake_assert.h" local="yes" imported="no">maliput/drake/common/drake_assert.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="drake__throw_8h" name="drake_throw.h" local="yes" imported="no">maliput/drake/common/drake_throw.h</includes>
    <includes id="eigen__types_8h" name="eigen_types.h" local="yes" imported="no">maliput/drake/common/eigen_types.h</includes>
    <includes id="nice__type__name_8h" name="nice_type_name.h" local="yes" imported="no">maliput/drake/common/nice_type_name.h</includes>
    <includes id="unused_8h" name="unused.h" local="yes" imported="no">maliput/drake/common/unused.h</includes>
    <class kind="class">maliput::drake::systems::VectorBase</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a0542bdd2e1249b13a80ca7dcf25b3efd</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; T &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>witness_function.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/drake/systems/framework/</path>
    <filename>witness__function_8cc.html</filename>
    <includes id="witness__function_8h" name="witness_function.h" local="yes" imported="no">maliput/drake/systems/framework/witness_function.h</includes>
  </compound>
  <compound kind="file">
    <name>witness_function.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/drake/systems/framework/</path>
    <filename>witness__function_8h.html</filename>
    <includes id="default__scalars_8h" name="default_scalars.h" local="yes" imported="no">maliput/drake/common/default_scalars.h</includes>
    <includes id="drake__bool_8h" name="drake_bool.h" local="yes" imported="no">maliput/drake/common/drake_bool.h</includes>
    <includes id="drake__copyable_8h" name="drake_copyable.h" local="yes" imported="no">maliput/drake/common/drake_copyable.h</includes>
    <includes id="event__collection_8h" name="event_collection.h" local="yes" imported="no">maliput/drake/systems/framework/event_collection.h</includes>
    <includes id="system__base_8h" name="system_base.h" local="yes" imported="no">maliput/drake/systems/framework/system_base.h</includes>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::WitnessFunction</class>
    <namespace>maliput</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::drake::systems</namespace>
    <member kind="enumeration">
      <type></type>
      <name>WitnessFunctionDirection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afe8fe136944074e97f02b7e3835347b3</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3a35c3ace1970663a16e5c65baa5941b13">kNone</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3acf58431ee9a2c159a03fbfb7721eebd7">kPositiveThenNonPositive</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3a6ccaf3b73e3536490f4d0145731c89d0">kNegativeThenNonNegative</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3ae2ea39b7ef80705cf65b9c6497eb2705">kCrossesZero</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>yaml_conversion.cc</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/src/base/</path>
    <filename>yaml__conversion_8cc.html</filename>
    <includes id="yaml__conversion_8h" name="yaml_conversion.h" local="yes" imported="no">maliput/base/yaml_conversion.h</includes>
    <includes id="rule_8h" name="rule.h" local="yes" imported="no">maliput/api/rules/rule.h</includes>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="function">
      <type>bool</type>
      <name>IsDiscreteValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a1e9fde3287ad8867f768d2f3c05cdf0a</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRangeValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a939fda7aa16deb30b6226ffea2396632</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSeverityFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>af40338e73891cfbcf9072e153710dd68</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>GetRangeMinMaxValuesFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a733eb44f957c784b58ea15b0cb54687e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetValueFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab3dc4113f3ad71335d63a727cc7152ba</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDescriptionFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aaa19c2692bbb842a8218d2257e1cd168</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yaml_conversion.h</name>
    <path>/__w/maliput_documentation/maliput_documentation/maliput_ws/src/maliput/include/maliput/base/</path>
    <filename>yaml__conversion_8h.html</filename>
    <includes id="regions_8h" name="regions.h" local="yes" imported="no">maliput/api/regions.h</includes>
    <class kind="struct">YAML::convert&lt; maliput::api::SRange &gt;</class>
    <class kind="struct">maliput::DiscreteValueRuleConstants</class>
    <class kind="struct">maliput::RangeValueRuleConstants</class>
    <class kind="struct">maliput::RuleConstants</class>
    <namespace>YAML</namespace>
    <namespace>maliput</namespace>
    <member kind="enumeration">
      <type></type>
      <name>RuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a0da2be5e4963c00e7d90bea0c5d6e299</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299aff95300802b888f287a7cce6fb26e6de">kDiscreteValueRuleType</enumvalue>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299aa21f41aa0071e057d4063688cde149cd">kRangeValueRuleType</enumvalue>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299acb176da2fcabc07c07cc1a211231a3f1">kUnknownRuleType</enumvalue>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiscreteValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a1e9fde3287ad8867f768d2f3c05cdf0a</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRangeValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a939fda7aa16deb30b6226ffea2396632</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSeverityFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>af40338e73891cfbcf9072e153710dd68</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>GetRangeMinMaxValuesFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a733eb44f957c784b58ea15b0cb54687e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetValueFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab3dc4113f3ad71335d63a727cc7152ba</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDescriptionFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aaa19c2692bbb842a8218d2257e1cd168</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::AbstractValue</name>
    <filename>classmaliput_1_1drake_1_1_abstract_value.html</filename>
    <class kind="struct">maliput::drake::AbstractValue::Wrap</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractValue</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a04c21d811dd792fd67eed3470a2843d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a70d8bf67bf07153f0992c9c8ffb4a42d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>aec24e257e780275fea15908f4fdd2634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a6939665fe76bc111ff7cf6f9efa914be</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>maybe_get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a4defe9c10488678130abc78d44013ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>maybe_get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a906d89ec411d79c30f4643054bf28d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a7b7affc0f279efe9dc63f414b2958b85</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>aa8a0e0f8a8214c68e8266e10894ff4ba</anchor>
      <arglist>(const AbstractValue &amp;other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::type_info &amp;</type>
      <name>type_info</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a4e287a4a2d7d6da577c8b6b57ac5624e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::type_info &amp;</type>
      <name>static_type_info</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a522d6e8b8fdf840a92c961ec5f1155c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetNiceTypeName</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a7fda3b2dfb60c909cd978753dd57c279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Make</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>add06d50e440feba79859cdd74f22575b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Make</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>a84ea6afe43f1a7a7a9f9f905ea1a2966</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractValue</name>
      <anchorfile>classmaliput_1_1drake_1_1_abstract_value.html</anchorfile>
      <anchor>ad842318f637bd0e62a4c8693ee89ee10</anchor>
      <arglist>(Wrap hash)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::AbstractValueCloner</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_abstract_value_cloner.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractValueCloner</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_abstract_value_cloner.html</anchorfile>
      <anchor>a46b1c90edc04a6dfc807c291a86339e6</anchor>
      <arglist>(const SomeOutput &amp;model_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AbstractValueCloner</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_abstract_value_cloner.html</anchorfile>
      <anchor>aa9e08d71bf0a2c2db9bfbc112145f5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_abstract_value_cloner.html</anchorfile>
      <anchor>ac74ff735fa50c9decc36759cef2a14a7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::AbstractValues</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a97eeb7925206d7cb5d04ae11accd46f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a0ebfeb1a3554e39ce4dd4538f7f55263</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; AbstractValue &gt;&gt; &amp;&amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a2b4365d5a65627a251522316fc63b79f</anchor>
      <arglist>(const std::vector&lt; AbstractValue * &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a4817e9bb1174fe85605950cab0666a9b</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValue &gt; datum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a772f327d7296e58dfe566080a0880231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>aee8f269343ef5de954e183d0b6a0bbe5</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>af6a86edfc6d678d3d1ca486c3be5e9b0</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a4f14ee2278620d64d925018d1d69a4fa</anchor>
      <arglist>(const AbstractValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValues &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_abstract_values.html</anchorfile>
      <anchor>a248044ebe9cde2231f4380f1d0a3c2c5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::AntiderivativeFunction</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</filename>
    <templarg></templarg>
    <class kind="struct">maliput::drake::systems::AntiderivativeFunction::IntegrableFunctionContext</class>
    <member kind="typedef">
      <type>std::function&lt; T(const T &amp;x, const VectorX&lt; T &gt; &amp;k)&gt;</type>
      <name>IntegrableFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>aa77b1a0ffd8ec53e3327d467726e08ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>acf2bad0aed098a317d02e8b2973148d6</anchor>
      <arglist>(AntiderivativeFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AntiderivativeFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>a984b74ad0b4cff1411afaf336193af55</anchor>
      <arglist>(const IntegrableFunction &amp;integrable_function, const IntegrableFunctionContext &amp;default_values={})</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Evaluate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>a08c5a8f5ac05051bee1eee5b53db3b59</anchor>
      <arglist>(const T &amp;u, const IntegrableFunctionContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ScalarDenseOutput&lt; T &gt; &gt;</type>
      <name>MakeDenseEvalFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>a540031be4e8e7c18bd30b3a2f72a77e1</anchor>
      <arglist>(const T &amp;w, const IntegrableFunctionContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>Integrator *</type>
      <name>reset_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>aaf92f89ed3fb6ea7acde795d33645a3c</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>adbc3bf152afe75736c6b8b3ecf8cd65e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_antiderivative_function.html</anchorfile>
      <anchor>af7c4ee8378a24e575a176dfb7d308ae9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::assertion_error</name>
    <filename>classmaliput_1_1common_1_1assertion__error.html</filename>
    <member kind="function">
      <type></type>
      <name>assertion_error</name>
      <anchorfile>classmaliput_1_1common_1_1assertion__error.html</anchorfile>
      <anchor>af0792e36977188b6a3000f3160b0d71a</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::internal::assertion_error</name>
    <filename>classmaliput_1_1drake_1_1internal_1_1assertion__error.html</filename>
    <member kind="function">
      <type></type>
      <name>assertion_error</name>
      <anchorfile>classmaliput_1_1drake_1_1internal_1_1assertion__error.html</anchorfile>
      <anchor>af0792e36977188b6a3000f3160b0d71a</anchor>
      <arglist>(const std::string &amp;what_arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::AxisAlignedBox</name>
    <filename>classmaliput_1_1math_1_1_axis_aligned_box.html</filename>
    <base>BoundingRegion&lt; Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>AxisAlignedBox</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>abdada45f3f971caf54ca01be23ffc1a1</anchor>
      <arglist>(const Vector3 &amp;min_corner, const Vector3 &amp;max_corner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisAlignedBox</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>a01ba02231a32485db70b93573f62357e</anchor>
      <arglist>(const Vector3 &amp;min_corner, const Vector3 &amp;max_corner, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AxisAlignedBox</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>accdbb23e68e42720322515865b78b8af</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>min_corner</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>a5bcdca826bf9d8c137f5ce0b081a68e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>max_corner</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>a4a6a580a4698312af748ca14f5a7d7e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>get_vertices</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>aacf62a47a2705f2d2f4567a86b4ba1aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoxContained</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>a05ec125a77d4d4c9b45da7ee99f8ca91</anchor>
      <arglist>(const AxisAlignedBox &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoxIntersected</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>a28e92b00103c876cea43df632154feab</anchor>
      <arglist>(const AxisAlignedBox &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; AxisAlignedBox &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classmaliput_1_1math_1_1_axis_aligned_box.html</anchorfile>
      <anchor>ab448402f889070fdea54e08874edc64e</anchor>
      <arglist>(const AxisAlignedBox &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::BasicIdIndex</name>
    <filename>classmaliput_1_1api_1_1_basic_id_index.html</filename>
    <base>maliput::api::RoadGeometry::IdIndex</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>a95757414f6395d4dce4bede82be3e734</anchor>
      <arglist>(BasicIdIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicIdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>a5e0322212b2e5e821c10197a6d1ddc68</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicIdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>a181ccd0b3549f6a8d186030d9d650643</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddLane</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>aad96e6263b57d20879906d3e93d3b97c</anchor>
      <arglist>(const Lane *lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddSegment</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>a8ef048dbe0876f1c7ecb1db4802f83e1</anchor>
      <arglist>(const Segment *segment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddJunction</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>ab71b379de50a0b82f65b3a9e2913722b</anchor>
      <arglist>(const Junction *junction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>ac9e8d1fc6f55a19bcbf66b67f782347c</anchor>
      <arglist>(const BranchPoint *branch_point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WalkAndAddAll</name>
      <anchorfile>classmaliput_1_1api_1_1_basic_id_index.html</anchorfile>
      <anchor>a95e19fa32a78cbc6f68b4ef40055fb38</anchor>
      <arglist>(const RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::BasicVector</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::VectorBase</base>
    <member kind="function">
      <type></type>
      <name>BasicVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a507b47abedbb153bf6181e04f74fbb2f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>aa57f612223d19eff9d2b523b5895f5d9</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a4d5c1dbf38d4dbac58fa767531c56f3c</anchor>
      <arglist>(VectorX&lt; T &gt; vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>ac43b67aeccccdf32a43e66474cb65a0a</anchor>
      <arglist>(const std::initializer_list&lt; T &gt; &amp;init)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a00f794bc20ca26b81a247bcee7c7f6a4</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a95cee47ba175ab6b8fd8f7cb2f82ab96</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a4d33aecde019e5f62d662aa2ef142b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a1b0db2779927764099fa8878ccaea85e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFromVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a0a9c44911481db46e0c8c8ee8708ae70</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value) final</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>CopyToVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a02900660573acdccd6d1e4b711a1e5e0</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleAndAddToVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a343fa4902e5cfcf181706fd72abdf5d0</anchor>
      <arglist>(const T &amp;scale, EigenPtr&lt; VectorX&lt; T &gt;&gt; vec) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetZero</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a15f4b55a146f2033a2a1d44054829f3f</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>ad8578f2ad77a7caa79d07ff13625e029</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>Make</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>af03087c0283bcc486873e7870881d2cd</anchor>
      <arglist>(const std::initializer_list&lt; T &gt; &amp;init)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>Make</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a853b29d4ee4164ddca9a50f6307f9301</anchor>
      <arglist>(Fargs &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>DoGetAtIndexUnchecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>ac2c19d7f23c9a1b94e52ebba1559a498</anchor>
      <arglist>(int index) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T &amp;</type>
      <name>DoGetAtIndexUnchecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>adde7e8b36d83e491ad99d514e5e2d01a</anchor>
      <arglist>(int index) final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>DoGetAtIndexChecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a231bafed6568f8fc83a4ae79e3ea3f90</anchor>
      <arglist>(int index) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T &amp;</type>
      <name>DoGetAtIndexChecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>afde9e3e5646700550315ebaa3a789e9c</anchor>
      <arglist>(int index) final</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual BasicVector&lt; T &gt; *</type>
      <name>DoClone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a3af2a9627832a75b332069b2b4d3ed0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const VectorX&lt; T &gt; &amp;</type>
      <name>values</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a1054df427ab86f0c7b1de898f26acca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VectorX&lt; T &gt; &amp;</type>
      <name>values</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>adbc9deb6f6763e26cb2b9e352f3cce2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>MakeRecursive</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>aec21da26d184ce4b88c6182e1b4c66cf</anchor>
      <arglist>(BasicVector&lt; T &gt; *data, int index, F constructor_arg, Fargs &amp;&amp;... recursive_args)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>MakeRecursive</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_basic_vector.html</anchorfile>
      <anchor>a80e395d80129f9b68a6b4aa76e962db4</anchor>
      <arglist>(BasicVector&lt; T &gt; *data, int index, F constructor_arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::BoundingBox</name>
    <filename>classmaliput_1_1math_1_1_bounding_box.html</filename>
    <base>BoundingRegion&lt; Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BoundingBox</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>a03514a4210ae04cee96b1df6d57afc5b</anchor>
      <arglist>(const Vector3 &amp;position, const Vector3 &amp;box_size, const RollPitchYaw &amp;orientation, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundingBox</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>a15fb13660b3e79ef417c31551008120c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>get_vertices</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>aacf62a47a2705f2d2f4567a86b4ba1aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RollPitchYaw &amp;</type>
      <name>get_orientation</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>a274a8c30bd60d86365431b4e131fc4a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>box_size</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>ab27dc5cdc983e80acb99d83cee2a51fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoxContained</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>a75c8ec18202add84cf755a4c6f88a23b</anchor>
      <arglist>(const BoundingBox &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsBoxIntersected</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_box.html</anchorfile>
      <anchor>a0c10b8796316c9f2e7ee7ac8cae9eef6</anchor>
      <arglist>(const BoundingBox &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::Bulb::BoundingBox</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_bulb_1_1_bounding_box.html</filename>
    <member kind="function">
      <type></type>
      <name>BoundingBox</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_bulb_1_1_bounding_box.html</anchorfile>
      <anchor>a1dea7b72431cc6891cefdb6020af2bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>maliput::math::Vector3</type>
      <name>p_BMin</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_bulb_1_1_bounding_box.html</anchorfile>
      <anchor>add1c6f1b76271c3df06d72f8098be0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>maliput::math::Vector3</type>
      <name>p_BMax</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_bulb_1_1_bounding_box.html</anchorfile>
      <anchor>a96efe3e4026d7d1974bdb6fac02d932a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::BoundingRegion</name>
    <filename>classmaliput_1_1math_1_1_bounding_region.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundingRegion</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a2b2ad1df9141d697a52832036573e4c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>position</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a7ad7a9db80533649956d66851ae47a49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>aa3b634f7d0a9f72ae1b980ae759dcd1f</anchor>
      <arglist>(const Coordinate &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>Overlaps</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a872c5712e03561862f663c1fe3f72756</anchor>
      <arglist>(const BoundingRegion&lt; Coordinate &gt; &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundingRegion</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a4724819589de4d9d8d0b0c523bf2626b</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundingRegion&lt; Vector3 &gt;</name>
    <filename>classmaliput_1_1math_1_1_bounding_region.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundingRegion</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a2b2ad1df9141d697a52832036573e4c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>position</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a7ad7a9db80533649956d66851ae47a49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>aa3b634f7d0a9f72ae1b980ae759dcd1f</anchor>
      <arglist>(const Vector3 &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>Overlaps</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a872c5712e03561862f663c1fe3f72756</anchor>
      <arglist>(const BoundingRegion&lt; Vector3 &gt; &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundingRegion</name>
      <anchorfile>classmaliput_1_1math_1_1_bounding_region.html</anchorfile>
      <anchor>a4724819589de4d9d8d0b0c523bf2626b</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::BranchPoint</name>
    <filename>classmaliput_1_1api_1_1_branch_point.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>a397f7d2c13a84464176bbdd53f8aeed4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>BranchPointId</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>a21194f43f088f631f0d37d5eb0dc576a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RoadGeometry *</type>
      <name>road_geometry</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>aa5b5de3cdefe8ef0d3ffa573f3822d4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetConfluentBranches</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>aaf9d1836c78c24946278b3d4ec44cf28</anchor>
      <arglist>(const LaneEnd &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetOngoingBranches</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>ac243138fc475467c3c1921bdfeda6dc0</anchor>
      <arglist>(const LaneEnd &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; LaneEnd &gt;</type>
      <name>GetDefaultBranch</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>ad30886dfe1332b46ac351646698c77b3</anchor>
      <arglist>(const LaneEnd &amp;end) const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetASide</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>a6442c2ee51026dd05efc07fdf05e7af4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetBSide</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>a8871102d89918bf07f1a07a9fca2b8d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1_branch_point.html</anchorfile>
      <anchor>af0b256382bcd91d863d978c388656825</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::BranchPoint</name>
    <filename>classmaliput_1_1geometry__base_1_1_branch_point.html</filename>
    <base>maliput::api::BranchPoint</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>a017026ff821c528031c6ead313fe4533</anchor>
      <arglist>(BranchPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>a8988c43da6cb399c2e6cf9aeb27d68a6</anchor>
      <arglist>(const api::BranchPointId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddABranch</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>ae2ed0a9107a888faaf582a8c4ecda9af</anchor>
      <arglist>(Lane *lane, api::LaneEnd::Which end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddBBranch</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>af2d605e876e24aec4b985d1f448e6195</anchor>
      <arglist>(Lane *lane, api::LaneEnd::Which end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDefault</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>a9b6a7f3d4f44cbf8b5ae1fed437607b3</anchor>
      <arglist>(const api::LaneEnd &amp;lane_end, const api::LaneEnd &amp;default_branch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>a5f015c5068d0077bec7e3f5b586c497c</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AttachToRoadGeometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_branch_point.html</anchorfile>
      <anchor>a92ac9da3dc898c058e2af06e87a8828e</anchor>
      <arglist>(common::Passkey&lt; RoadGeometry &gt;, const api::RoadGeometry *road_geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::BruteForceStrategy</name>
    <filename>classmaliput_1_1geometry__base_1_1_brute_force_strategy.html</filename>
    <base>maliput::geometry_base::StrategyBase</base>
    <member kind="function">
      <type></type>
      <name>BruteForceStrategy</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_brute_force_strategy.html</anchorfile>
      <anchor>a723902711f575f83c807856b26454310</anchor>
      <arglist>(const api::RoadGeometry *rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BruteForceStrategy</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_brute_force_strategy.html</anchorfile>
      <anchor>a4be2f72e105eeed34e70263620549b08</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::Bulb</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_bulb.html</filename>
    <class kind="struct">maliput::api::rules::Bulb::BoundingBox</class>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Bulb &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>ab9b274463a10716f64bb5457c59f6f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a5cde40a0f3115b283162bc1f6d068710</anchor>
      <arglist>(Bulb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bulb</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a67f00f1243ea06e5fdaf829cc0eb5c44</anchor>
      <arglist>(const Id &amp;id, const InertialPosition &amp;position_bulb_group, const Rotation &amp;orientation_bulb_group, const BulbColor &amp;color, const BulbType &amp;type, const std::optional&lt; double &gt; &amp;arrow_orientation_rad=std::nullopt, const std::optional&lt; std::vector&lt; BulbState &gt;&gt; &amp;states=std::nullopt, BoundingBox bounding_box=BoundingBox())</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniqueBulbId</type>
      <name>unique_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a53aaaf0bd90fa976c182b50c9df28e11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InertialPosition &amp;</type>
      <name>position_bulb_group</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a6ef46b1a53e8aeb614207fdafa00a308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>orientation_bulb_group</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>ab467320980d4f1f2aeab10a9a58a6f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BulbColor &amp;</type>
      <name>color</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a28d662e5ec047669e22ebbb25fb512c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BulbType &amp;</type>
      <name>type</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a0613ce4191140551b3f1caf877456408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; double &gt;</type>
      <name>arrow_orientation_rad</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>aa8f8812d86698aea8134bd1a112c5e38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BulbState &gt; &amp;</type>
      <name>states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>aa0c5cf7a9e389775d41a46420ccab488</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BulbState</type>
      <name>GetDefaultState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>ad86f30db791c42367fedb4d58a294ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsValidState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>ab608ef2efb5fa1e8cb00719a0161f7b3</anchor>
      <arglist>(const BulbState &amp;bulb_state) const</arglist>
    </member>
    <member kind="function">
      <type>const BoundingBox &amp;</type>
      <name>bounding_box</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>a9c7b45b6d411cdd705f7096c1f3c4212</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BulbGroup *</type>
      <name>bulb_group</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>aa9c890af63ef51ff3bcd41033c1ec3a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBulbGroup</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb.html</anchorfile>
      <anchor>aa72e7658094df14cedd33ed9c289a775</anchor>
      <arglist>(common::Passkey&lt; BulbGroup &gt;, const BulbGroup *bulb_group)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::BulbGroup</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</filename>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; BulbGroup &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a6cad9eb269d3d43124a1303ae764e2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a24a47ead906f9b73fa14b6e89d26a51a</anchor>
      <arglist>(BulbGroup)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BulbGroup</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>ae45b8175979e249b2d34e91efa17930c</anchor>
      <arglist>(const Id &amp;id, const InertialPosition &amp;position_traffic_light, const Rotation &amp;orientation_traffic_light, std::vector&lt; std::unique_ptr&lt; Bulb &gt;&gt; bulbs)</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UniqueBulbGroupId</type>
      <name>unique_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>ac5af672aa81cfb33189839684cb65894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InertialPosition &amp;</type>
      <name>position_traffic_light</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a37ed2f595bab96020b95fb2602e74b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>orientation_traffic_light</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>af3a46477eb53313dbca4b1cb87f0aea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const Bulb * &gt;</type>
      <name>bulbs</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>af257d1876f6d64e9b5871d4e1700e46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Bulb *</type>
      <name>GetBulb</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a62429c384bf5128964e9d9f77f243a17</anchor>
      <arglist>(const Bulb::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const TrafficLight *</type>
      <name>traffic_light</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a62bed0a81df6e33c477e36caa0670b5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTrafficLight</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_bulb_group.html</anchorfile>
      <anchor>a301c394b2fb0dadb7f13644478423de1</anchor>
      <arglist>(common::Passkey&lt; TrafficLight &gt;, const TrafficLight *traffic_light)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Cache</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_cache.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a37e381833649e68b36c7c146d7984f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>aa08621fdf00f850c752078900e9aa831</anchor>
      <arglist>(Cache &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a3fa1145d2324e66289c9a188dec46887</anchor>
      <arglist>(const Cache &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>add7d1807f52d95612b114a26bd1b6c0c</anchor>
      <arglist>(Cache &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>ac12c8c1f54bdc1dff0b06724e213d9d4</anchor>
      <arglist>(const internal::ContextMessageInterface *owning_subcontext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a53bd63d18b65daa77783bba78a162dbd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>CacheEntryValue &amp;</type>
      <name>CreateNewCacheEntryValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>ad75fef3f90f4930e19eac533aa53b80a</anchor>
      <arglist>(CacheIndex index, DependencyTicket ticket, const std::string &amp;description, const std::set&lt; DependencyTicket &gt; &amp;prerequisites, DependencyGraph *graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a4e8a32a90a3801d0585c5fc697ef79f9</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cache_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a1670c61c0b4e42e75c0ce36ffcdc1f2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntryValue &amp;</type>
      <name>get_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a6bc75c4a61d6c3ee456f433cfccc7dad</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>CacheEntryValue &amp;</type>
      <name>get_mutable_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>accff08887e9868111ba6c7d4c93c9e38</anchor>
      <arglist>(CacheIndex index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DisableCaching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a731470d81a5c45420848933105a48775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableCaching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a39bc516683cda18867e677094b095f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAllEntriesOutOfDate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>adee15fa97a3d1b6c92b153fcdc2c9b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeze_cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>aedc23f6283ac85b86b8ba8b7dea11193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unfreeze_cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a6f5b663ff08441b49015a0dd6bb3d75e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cache_frozen</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache.html</anchorfile>
      <anchor>a827fdab7b28e2fb6792f687466dda121</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::CacheEntry</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</filename>
    <member kind="typedef">
      <type>ValueProducer::AllocateCallback</type>
      <name>instead</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ae841008cbcb343bfd227631f9688056b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueProducer::CalcCallback</type>
      <name>instead</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a91db12c206ac1deb5b36c921764042f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; std::unique_ptr&lt; AbstractValue &gt;()&gt;</type>
      <name>AllocateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a4df060317da95358cd76822bd802de72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const ContextBase &amp;, AbstractValue *)&gt;</type>
      <name>CalcCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a3947b9d8e95098739aaaea55af1d1ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ad4ad3e2391c9fb99f24523aa9968b73a</anchor>
      <arglist>(const internal::SystemMessageInterface *owning_system, CacheIndex index, DependencyTicket ticket, std::string description, ValueProducer value_producer, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ae1e7d97cb88f009a4c6e8c22728daf0c</anchor>
      <arglist>(const internal::SystemMessageInterface *owning_system, CacheIndex index, DependencyTicket ticket, std::string description, std::function&lt; std::unique_ptr&lt; AbstractValue &gt;()&gt; alloc_function, std::function&lt; void(const ContextBase &amp;, AbstractValue *)&gt; calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; DependencyTicket &gt; &amp;</type>
      <name>prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ada0878eaab2f34c50f8527852ed119d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; DependencyTicket &gt; &amp;</type>
      <name>mutable_prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a536afa267447cfffb110d41b177802d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Allocate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a5a36b55b69e1bffeae1e9805e8688e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a9a6411f5a003b17d0e355bf02d89def7</anchor>
      <arglist>(const ContextBase &amp;context, AbstractValue *value) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ac18938729319bb35b0085f5e54fa9fff</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>EvalAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>abbf13d0222c1fe7957ab42591000a6d5</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>GetKnownUpToDate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>afa9b55a7a43bdb10ea04f9621dbd8979</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>GetKnownUpToDateAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>abf790ebeb7d49d7f9181d9a9dc8618a7</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_out_of_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>aa61d095f52a88f4693284a0e62b37060</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cache_entry_disabled</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a44c8652f64c775bd9277cd1e04d07744</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_caching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ade60b2fdad0b1712ecee7500b89eded1</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_caching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>aa0d070ee04bd2f4d47707a9d69ab6558</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_caching_by_default</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a923b7a9751b687aa2d1e20d608f52132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_disabled_by_default</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a6a10854ee049921335d8eeb166111844</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntryValue &amp;</type>
      <name>get_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>ad0379a2181b3c00d5e9f14dbbde43c8a</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>CacheEntryValue &amp;</type>
      <name>get_mutable_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a3a3557e2bc095e451d1dabf10ea2cf34</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>CacheIndex</type>
      <name>cache_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a6c531d8aa05b7d07bf4e13b445f18dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_default_prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry.html</anchorfile>
      <anchor>a8414463890e0aa2fab21da57b9a5d3cb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::CacheEntryValue</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</filename>
    <member kind="function">
      <type></type>
      <name>~CacheEntryValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a42ad2b8012d52da5f09aa0c1eaf8153e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetInitialValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a61eb261acbb887bb3bf493b5efdda196</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValue &gt; init_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheEntryValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a72a8f9c95afdc2595e237c897252fd9a</anchor>
      <arglist>(CacheEntryValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a1999a6dad3c5ff4491da7092e32f7e07</anchor>
      <arglist>(const CacheEntryValue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ab14a1710ee977643adbd14ef491464ee</anchor>
      <arglist>(CacheEntryValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>GetAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a6d15941121c656c3590822cb666e9280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>GetValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ac10359602f42169e814d616bea7fcbd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a891ad1a24c8f26e0c31eb243cd55b32a</anchor>
      <arglist>(const V &amp;new_value)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>GetMutableAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ae8e3b48baae296b1353b3f7714817517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>GetMutableValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>adce90f980211f3c087c17466bdb961fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>PeekAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>acb2606afbac0579d141587f4352c79b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>PeekValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a47a88795aa99785d16305c215f68f047</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_abstract_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a73a2680c815be4d89e972d35f3753df6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a73c6a4d95e72a9809b85ef5e537ec27f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a8a5dce6cd1fc7aa0ca81ca0029aa5c73</anchor>
      <arglist>(const V &amp;new_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a42899d3ef0b9916a216db2b6b0c1b304</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValue &gt; *other_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_out_of_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a1da57997e9eee5acf76aece9c7b266db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needs_recomputation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ad064f0774db38abcaa3441d35c94a9ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_up_to_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a7435bb44bc643e221c92877a7b15f63d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_out_of_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a92ee4dff27139ec99ed52c35c68f5b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>serial_number</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a91339909477dbf9f253d972983de32d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetPathDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>afc308e75ca3c442b81fe13a2d985a77b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a78ae320e307335bd655f8767da418e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CacheIndex</type>
      <name>cache_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a6c531d8aa05b7d07bf4e13b445f18dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CacheEntryValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a72a8f9c95afdc2595e237c897252fd9a</anchor>
      <arglist>(CacheEntryValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a1999a6dad3c5ff4491da7092e32f7e07</anchor>
      <arglist>(const CacheEntryValue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ab14a1710ee977643adbd14ef491464ee</anchor>
      <arglist>(CacheEntryValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>GetAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a6d15941121c656c3590822cb666e9280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>GetValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ac10359602f42169e814d616bea7fcbd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a891ad1a24c8f26e0c31eb243cd55b32a</anchor>
      <arglist>(const V &amp;new_value)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>GetMutableAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ae8e3b48baae296b1353b3f7714817517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>GetMutableValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>adce90f980211f3c087c17466bdb961fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>PeekAbstractValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>acb2606afbac0579d141587f4352c79b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>PeekValueOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a47a88795aa99785d16305c215f68f047</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_abstract_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a73a2680c815be4d89e972d35f3753df6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a73c6a4d95e72a9809b85ef5e537ec27f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a8a5dce6cd1fc7aa0ca81ca0029aa5c73</anchor>
      <arglist>(const V &amp;new_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a42899d3ef0b9916a216db2b6b0c1b304</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValue &gt; *other_value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_out_of_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a1da57997e9eee5acf76aece9c7b266db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needs_recomputation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ad064f0774db38abcaa3441d35c94a9ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_up_to_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a7435bb44bc643e221c92877a7b15f63d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_out_of_date</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a92ee4dff27139ec99ed52c35c68f5b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>serial_number</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a91339909477dbf9f253d972983de32d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetPathDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>afc308e75ca3c442b81fe13a2d985a77b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a78ae320e307335bd655f8767da418e36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CacheIndex</type>
      <name>cache_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a6c531d8aa05b7d07bf4e13b445f18dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ac9d22b110b724211d946d911ecacdf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>never_destroyed&lt; CacheEntryValue &gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a37ceaac9af8c1d7ca87f9f326de1220e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>copyable_unique_ptr&lt; CacheEntryValue &gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a598ca03fb10c04b0cbe60b81fd9e0085</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowIfBadCacheEntryValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>ab5508eba32d5d670dc79329a86999e23</anchor>
      <arglist>(const internal::ContextMessageInterface *owning_subcontext=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_caching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a83c30194ce6fef57b521aef913429369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_caching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a79d137c415c8f5664d0d50baf34d9f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cache_entry_disabled</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a1f878923b9caea8c3cef56be12e23450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CacheEntryValue &amp;</type>
      <name>dummy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_cache_entry_value.html</anchorfile>
      <anchor>a8a7c138de6aea82b3c916775f1774c6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::common::ComparisonResult</name>
    <filename>structmaliput_1_1common_1_1_comparison_result.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>message</name>
      <anchorfile>structmaliput_1_1common_1_1_comparison_result.html</anchorfile>
      <anchor>a8cc032668976d50d4dbfe01ea9c15d5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::ComparisonResultCollector</name>
    <filename>classmaliput_1_1common_1_1_comparison_result_collector.html</filename>
    <member kind="function">
      <type></type>
      <name>ComparisonResultCollector</name>
      <anchorfile>classmaliput_1_1common_1_1_comparison_result_collector.html</anchorfile>
      <anchor>aedd2185503f5f5b383fac196a641ee30</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddResult</name>
      <anchorfile>classmaliput_1_1common_1_1_comparison_result_collector.html</anchorfile>
      <anchor>a64d18587a8f54f3a8dae911928d90b40</anchor>
      <arglist>(const char *filename, int line, const char *expression, ComparisonResult&lt; T &gt; result)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>result</name>
      <anchorfile>classmaliput_1_1common_1_1_comparison_result_collector.html</anchorfile>
      <anchor>a5a299cf768e6b270dabb1a29e3ef2325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classmaliput_1_1common_1_1_comparison_result_collector.html</anchorfile>
      <anchor>a0e2c15c517007b91c37b2aa68bf2484a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>failed</name>
      <anchorfile>classmaliput_1_1common_1_1_comparison_result_collector.html</anchorfile>
      <anchor>aa1e9f07e547f38d788c2ef88ef6f95b1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::CompositeEventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a34392f564c5b95506f6dd4e80185c21b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>aa71d36872f416feaa853788a7a7a7ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a4dc9d1e2db03d3a3d6c643bd7a005a5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasPublishEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a7bd20cc8bbfbfd885b40ed23500dec0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDiscreteUpdateEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a4b8fc4d912cf23cd36397a51f3bf4ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasUnrestrictedUpdateEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>ac782ac71ddc07579467afdd4372fa11d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_publish_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a8b232e01727d983c1b37f18abee2c492</anchor>
      <arglist>(std::unique_ptr&lt; PublishEvent&lt; T &gt;&gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a7f70fd97bfb045af00e5d76b8675984d</anchor>
      <arglist>(PublishEvent&lt; T &gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_discrete_update_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>ae7a3d053de473868ad44be854e41aff6</anchor>
      <arglist>(std::unique_ptr&lt; DiscreteUpdateEvent&lt; T &gt;&gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a4071f0f534aaa56080fb1cd3fe018c63</anchor>
      <arglist>(DiscreteUpdateEvent&lt; T &gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_unrestricted_update_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a6c1b2cdf8ff46be861700d7492b73076</anchor>
      <arglist>(std::unique_ptr&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a7fc4a772e99d8aaa34128c564027d675</anchor>
      <arglist>(UnrestrictedUpdateEvent&lt; T &gt; event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>ad4ab4b97281af80faa640ed936bed841</anchor>
      <arglist>(const CompositeEventCollection&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>afe69097a628fe4cbce084bd1cca26f59</anchor>
      <arglist>(const CompositeEventCollection&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const EventCollection&lt; PublishEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>ad0cdf264e40517bdfd3500d264a292f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a301918f7e3e37342c5c00846137d84aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a0806a0a3d9517cf3d1ffda2d0eaca0df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventCollection&lt; PublishEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>aea1225a4b26576aa6e80460eeb792110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>aaca4c4c01de7e1d2a5a7a7f139b6e4dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>ac8821531d03076ad335a28054c22260b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_composite_event_collection.html</anchorfile>
      <anchor>a9387014b922c5390ebdf8c218c8d0065</anchor>
      <arglist>(std::unique_ptr&lt; EventCollection&lt; PublishEvent&lt; T &gt;&gt;&gt; pub, std::unique_ptr&lt; EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt;&gt; discrete, std::unique_ptr&lt; EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt;&gt; unrestricted)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::assert::ConditionTraits</name>
    <filename>structmaliput_1_1drake_1_1assert_1_1_condition_traits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Evaluate</name>
      <anchorfile>structmaliput_1_1drake_1_1assert_1_1_condition_traits.html</anchorfile>
      <anchor>adcdf99b91ee8e387971da32baa5b61cc</anchor>
      <arglist>(const Condition &amp;value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_valid</name>
      <anchorfile>structmaliput_1_1drake_1_1assert_1_1_condition_traits.html</anchorfile>
      <anchor>ac40e2f6b16673621ee11f794813446bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Context</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_context.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::ContextBase</base>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>af604646963810d23d1f0df08f3acc548</anchor>
      <arglist>(Context &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Context &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3fa4f30a98766cf904f92a0b162f7c2a</anchor>
      <arglist>(const Context &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Context &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a672d928d4013a833b2848e2dfbaf20a9</anchor>
      <arglist>(Context &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a9fa7f7dbc373945737eb4fb7b594d6a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const State&lt; T &gt; &amp;</type>
      <name>get_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7d61c4076aa4c0a64f16d1a6fe864be1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stateless</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8d113a6e523b45e5ddc1ddb88ed4dc24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_only_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a981ad14596e6b40c746478fb63f1c2d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_only_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a5afefab824732ae355ba9ae8090f53ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ac544f3f782615e62cb59a3423fbbe812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_continuous_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aa568c26e18ea55bb339893881cff3e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>get_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7a1544a1499821caca5625f00f8ed593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_continuous_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8c7762cc235ff15d35752ec55888a9b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_discrete_state_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1a03d2d5e70020145bd659eba780f967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a4734a73a697822adab6651601f0ede89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_discrete_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1ef8d0cb14f4759833db259e2d7a177f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a923ddf26eb35c376ea23f672520a9229</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ad2c71c7988b370b4e93ea1c33a2a0e9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValues &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a49a3cc1ba02268cb11c8af904336af01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const U &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a6e953da59a69f25bd342bf8885d218d6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; double &gt; &amp;</type>
      <name>get_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>afa3b4965d611f8ff7d7fb719c96ddfca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Parameters&lt; T &gt; &amp;</type>
      <name>get_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3dae6b46eab2a5a117b89fd6461a9181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_numeric_parameter_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aff6508ca0ff8f5e886e63fb9c830e36a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1882d7ad5c503e04bd2aab9de4d196e3</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a0232523ac7f8337a392b321ffd282187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>afbcc55465229ce053092fb250908c0e0</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3d5dddf9b2bb3283f9cd74c7a77517fc</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a0b9308e812da39661dce265468b6f90c</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeAndContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a9ce8807a2a969b40a480e3cc3c6ab2db</anchor>
      <arglist>(const T &amp;time_sec, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab6b22de379384d8336968f13e6480f1a</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a576f417e8e9d3076660b325153f7b348</anchor>
      <arglist>(int group_index, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7ca085977869dd3df37ca2a162273226</anchor>
      <arglist>(int index, const ValueType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStateAndParametersFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a17e6fd1b67831eabcf93c80f346d0216</anchor>
      <arglist>(const Context&lt; U &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStateAndParametersFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae55845b172939052d02ea437df63cfbc</anchor>
      <arglist>(const Context&lt; U &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a82e68f81f3284c08aa1c9acbfabbe1f5</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;accuracy)</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>FixInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7ff73df73c8c83229e8aff5b7068fe2a</anchor>
      <arglist>(int index, const AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>State&lt; T &gt; &amp;</type>
      <name>get_mutable_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a82d273792ee73d3ad431a356dc5030af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ContinuousState&lt; T &gt; &amp;</type>
      <name>get_mutable_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aebac8d5dbb6477ca0c90e9928621c8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_continuous_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>accae935e18c9526d9521c8be6b2e4e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae70b09f6a7cbb48a1138262aa291fb0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a73d73dbf23c2c036bbe1331a46571625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>af792a48ad2c93163065743e8a53c0fd4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValues &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a2a373393e97aa9f2a3d5083b2f6995d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>acdeb8df5c64ce2494984c9e08b74eb9d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>Parameters&lt; T &gt; &amp;</type>
      <name>get_mutable_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8f69a925217316e2ad0b23bc83b07437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae7ccc75f3d6be6aa73aec86ad2a76e67</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>get_mutable_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a064262a130edac83f75ea6f8e3940b86</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>SetTimeAndGetMutableContinuousStateVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1a4512beab2809a8102c3622a085a356</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>SetTimeAndGetMutableQVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a98436b2af64e8f01a9c8bf51977936e8</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorBase&lt; T &gt; *, VectorBase&lt; T &gt; * &gt;</type>
      <name>GetMutableVZVectors</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>abb21407fcbb1a95da06a0449a15ad923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeAndNoteContinuousStateChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab31d44149a81eabee915dd1ed330e524</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NoteContinuousStateChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab2b2b3f5ac625c5db5b0edd40c1f999e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>af604646963810d23d1f0df08f3acc548</anchor>
      <arglist>(Context &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Context &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3fa4f30a98766cf904f92a0b162f7c2a</anchor>
      <arglist>(const Context &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Context &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a672d928d4013a833b2848e2dfbaf20a9</anchor>
      <arglist>(Context &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a9fa7f7dbc373945737eb4fb7b594d6a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const State&lt; T &gt; &amp;</type>
      <name>get_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7d61c4076aa4c0a64f16d1a6fe864be1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stateless</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8d113a6e523b45e5ddc1ddb88ed4dc24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_only_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a981ad14596e6b40c746478fb63f1c2d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_only_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a5afefab824732ae355ba9ae8090f53ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ac544f3f782615e62cb59a3423fbbe812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_continuous_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aa568c26e18ea55bb339893881cff3e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>get_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7a1544a1499821caca5625f00f8ed593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_continuous_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8c7762cc235ff15d35752ec55888a9b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_discrete_state_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1a03d2d5e70020145bd659eba780f967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a4734a73a697822adab6651601f0ede89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_discrete_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1ef8d0cb14f4759833db259e2d7a177f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a923ddf26eb35c376ea23f672520a9229</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ad2c71c7988b370b4e93ea1c33a2a0e9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValues &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a49a3cc1ba02268cb11c8af904336af01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const U &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a6e953da59a69f25bd342bf8885d218d6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; double &gt; &amp;</type>
      <name>get_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>afa3b4965d611f8ff7d7fb719c96ddfca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Parameters&lt; T &gt; &amp;</type>
      <name>get_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3dae6b46eab2a5a117b89fd6461a9181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_numeric_parameter_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aff6508ca0ff8f5e886e63fb9c830e36a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1882d7ad5c503e04bd2aab9de4d196e3</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a0232523ac7f8337a392b321ffd282187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>afbcc55465229ce053092fb250908c0e0</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3d5dddf9b2bb3283f9cd74c7a77517fc</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a0b9308e812da39661dce265468b6f90c</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeAndContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a9ce8807a2a969b40a480e3cc3c6ab2db</anchor>
      <arglist>(const T &amp;time_sec, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab6b22de379384d8336968f13e6480f1a</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a576f417e8e9d3076660b325153f7b348</anchor>
      <arglist>(int group_index, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;xd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7ca085977869dd3df37ca2a162273226</anchor>
      <arglist>(int index, const ValueType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStateAndParametersFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a17e6fd1b67831eabcf93c80f346d0216</anchor>
      <arglist>(const Context&lt; U &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeStateAndParametersFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae55845b172939052d02ea437df63cfbc</anchor>
      <arglist>(const Context&lt; U &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a82e68f81f3284c08aa1c9acbfabbe1f5</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;accuracy)</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>FixInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7ff73df73c8c83229e8aff5b7068fe2a</anchor>
      <arglist>(int index, const AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>State&lt; T &gt; &amp;</type>
      <name>get_mutable_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a82d273792ee73d3ad431a356dc5030af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ContinuousState&lt; T &gt; &amp;</type>
      <name>get_mutable_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aebac8d5dbb6477ca0c90e9928621c8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_continuous_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>accae935e18c9526d9521c8be6b2e4e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae70b09f6a7cbb48a1138262aa291fb0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a73d73dbf23c2c036bbe1331a46571625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>af792a48ad2c93163065743e8a53c0fd4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValues &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a2a373393e97aa9f2a3d5083b2f6995d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>acdeb8df5c64ce2494984c9e08b74eb9d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>Parameters&lt; T &gt; &amp;</type>
      <name>get_mutable_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a8f69a925217316e2ad0b23bc83b07437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae7ccc75f3d6be6aa73aec86ad2a76e67</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>get_mutable_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a064262a130edac83f75ea6f8e3940b86</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>SetTimeAndGetMutableContinuousStateVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a1a4512beab2809a8102c3622a085a356</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>SetTimeAndGetMutableQVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a98436b2af64e8f01a9c8bf51977936e8</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorBase&lt; T &gt; *, VectorBase&lt; T &gt; * &gt;</type>
      <name>GetMutableVZVectors</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>abb21407fcbb1a95da06a0449a15ad923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetTimeAndNoteContinuousStateChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab31d44149a81eabee915dd1ed330e524</anchor>
      <arglist>(const T &amp;time_sec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NoteContinuousStateChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ab2b2b3f5ac625c5db5b0edd40c1f999e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a64dbc7bf95d582c5accdd26acc7b67e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; State&lt; T &gt; &gt;</type>
      <name>CloneState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a766f58b7ba606cc7c8a9e5a1a722b8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aac993ecccd3d88aafefb6b8e3caa1dee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PerturbTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a6b08788afd1900599be632be08b6d56a</anchor>
      <arglist>(const T &amp;time, const T &amp;true_time)</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; T &gt; &amp;</type>
      <name>get_true_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a291aada73dd09ed96663ba0c1043392b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7540648fc201ffee17e0cdea0888a6f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a52a9655097488a7f2c00bf4a6b94c2f9</anchor>
      <arglist>(const Context&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const State&lt; T &gt; &amp;</type>
      <name>do_access_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ad162d70edd8d477b1f26713f0863b6c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual State&lt; T &gt; &amp;</type>
      <name>do_access_mutable_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a6df6d9750a22eb89b2836996c68e0f0a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; State&lt; T &gt; &gt;</type>
      <name>DoCloneState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>ae239621a8ee72ec26db2430cbf1b4541</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::string</type>
      <name>do_to_string</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a7109f29ebaaa3e8c63e158df763d1c1c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateTimeChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aee17830b884bef7b5b182cbf7e9602fb</anchor>
      <arglist>(const T &amp;time_sec, const std::optional&lt; T &gt; &amp;true_time, int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateAccuracyChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a2e45b7db5db1cf0ba916b4d2f9338fc9</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;accuracy, int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aba0aa60909af0c24f7791a2c83876ffa</anchor>
      <arglist>(std::unique_ptr&lt; ContinuousState&lt; T &gt;&gt; xc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a24eb6cfcac34ddd216f99168aab071e8</anchor>
      <arglist>(std::unique_ptr&lt; DiscreteValues&lt; T &gt;&gt; xd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3080ffa1b4c412986990e9c64e87d90c</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValues &gt; xa)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a571d9b7fa01ad6db23cb6585ebbbffcd</anchor>
      <arglist>(std::unique_ptr&lt; Parameters&lt; T &gt;&gt; params)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>PropagateTimeChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a2272aee65c71a06f1bf3f46a535b48f4</anchor>
      <arglist>(Context&lt; T &gt; *context, const T &amp;time, const std::optional&lt; T &gt; &amp;true_time, int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>PropagateAccuracyChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>aa275664dd983d1ec010918ed28115a7f</anchor>
      <arglist>(Context&lt; T &gt; *context, const std::optional&lt; double &gt; &amp;accuracy, int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Parameters&lt; T &gt; &amp;</type>
      <name>access_mutable_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a3ab8cefcf37fad3a0fefb3864b55be62</anchor>
      <arglist>(Context&lt; T &gt; *context)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static State&lt; T &gt; &amp;</type>
      <name>access_mutable_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a4353316f10988bcc6415af805e31f45e</anchor>
      <arglist>(Context&lt; T &gt; *context)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>CloneWithoutPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context.html</anchorfile>
      <anchor>a4ec5eac8b16b142c2c33f28526c77072</anchor>
      <arglist>(const Context&lt; T &gt; &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ContextBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_context_base.html</filename>
    <base>maliput::drake::systems::internal::ContextMessageInterface</base>
    <member kind="function">
      <type>std::unique_ptr&lt; ContextBase &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a14a693ba7ecc55eae82111c973828c94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ad5f6e70b9e66e7ceb7c327bd3c8f14ff</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DisableCaching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a834bb093a64a07cdee915b85f4fb54f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnableCaching</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>adbdf4bba2d7ba88c844a580c7598a2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAllCacheEntriesOutOfDate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ac0a9310eb1266e264f69ed803358deac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FreezeCache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a72d7aa9c0de7f2d0b18fc5dde3e199b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnfreezeCache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>abb3e9df7a99f4d1b7d6aaefdadac28cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cache_frozen</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>aaa4c76ab3b9af3aa02cb455a7143f8ef</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetSystemName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>acf2143907221997b4bfd7cf5fc40b422</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSystemPathname</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ac8f54385db97ee385847ad7577dbe34e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>const Cache &amp;</type>
      <name>get_cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ad2ca63f120e74c385bb51ea22a270d7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cache &amp;</type>
      <name>get_mutable_cache</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ab26e67aded80f284d5aa64d376ba4720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DependencyTracker &amp;</type>
      <name>get_tracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>aae36445554ff0dab1e6a1a10d20f55ae</anchor>
      <arglist>(DependencyTicket ticket) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTracker &amp;</type>
      <name>get_mutable_tracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a290a6ba7f4b91127a264fecd79686d1f</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function">
      <type>const DependencyGraph &amp;</type>
      <name>get_dependency_graph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ab7da9c04ac9fac400ea54557c0079792</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph &amp;</type>
      <name>get_mutable_dependency_graph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a2a7336b88dbeb431e01ca7a45274f4be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_input_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a94a6d73c74c7268734792b3703e8600d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_output_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a7ceec1b22b6b1b25fc675234e78e71be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>input_port_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a85dd7ffab2de58a672f25db933f6109e</anchor>
      <arglist>(InputPortIndex port_num)</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>output_port_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a940440c185b07881ff0cc6f734d7bcb2</anchor>
      <arglist>(OutputPortIndex port_num)</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>FixInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a7ff73df73c8c83229e8aff5b7068fe2a</anchor>
      <arglist>(int index, const AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const FixedInputPortValue *</type>
      <name>MaybeGetFixedInputPortValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a20d9f1c12796b8f3393e4e952aef28c6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue *</type>
      <name>MaybeGetMutableFixedInputPortValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a9e5b79c6956cdd2299c24e63dde0191e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>start_new_change_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a935eb27196f288fe4344307a20c09d8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_root_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>abbb8a99fdf4edf4bf0bf58c4d89ebb18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a865c4b3281a2b641da89f8ad40eb7fea</anchor>
      <arglist>(ContextBase &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ContextBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a3745676c68cd07431fe54dc95cf721c7</anchor>
      <arglist>(const ContextBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ContextBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>adac0c86e967f01463c5ddbac07cf4d6b</anchor>
      <arglist>(ContextBase &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>aa803677f76c9e181def118145809587b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>adeffe8b058b7acfea792472bb2f2d242</anchor>
      <arglist>(const ContextBase &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ae20880944abe56922d7754c48b402ced</anchor>
      <arglist>(InputPortIndex expected_index, DependencyTicket ticket, std::function&lt; void(const AbstractValue &amp;)&gt; fixed_input_type_checker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ac1dc6301a310fa2e6220be9e4c578baa</anchor>
      <arglist>(OutputPortIndex expected_index, DependencyTicket ticket, const internal::OutputPortPrerequisite &amp;prerequisite)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddDiscreteStateTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a8a25146140091f2a36e5a308e62219b1</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractStateTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ada14bd22dbd1f30fc14b933788afbb4c</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddNumericParameterTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ae4802537bd1a8bcfd6b235f38e7fcb13</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractParameterTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a8baf45fc00901dc9fb93cad0fb491bfa</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a865c4b3281a2b641da89f8ad40eb7fea</anchor>
      <arglist>(ContextBase &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ContextBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a3745676c68cd07431fe54dc95cf721c7</anchor>
      <arglist>(const ContextBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ContextBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>adac0c86e967f01463c5ddbac07cf4d6b</anchor>
      <arglist>(ContextBase &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ae20880944abe56922d7754c48b402ced</anchor>
      <arglist>(InputPortIndex expected_index, DependencyTicket ticket, std::function&lt; void(const AbstractValue &amp;)&gt; fixed_input_type_checker)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ac1dc6301a310fa2e6220be9e4c578baa</anchor>
      <arglist>(OutputPortIndex expected_index, DependencyTicket ticket, const internal::OutputPortPrerequisite &amp;prerequisite)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddDiscreteStateTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a8a25146140091f2a36e5a308e62219b1</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractStateTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ada14bd22dbd1f30fc14b933788afbb4c</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddNumericParameterTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ae4802537bd1a8bcfd6b235f38e7fcb13</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractParameterTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a8baf45fc00901dc9fb93cad0fb491bfa</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>internal::SystemBaseContextBaseAttorney</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>afbf57f9a9ba557220adf6f9c6436c548</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteTimeChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a0509f45f1d82b5d3dc2642556a7775d7</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAccuracyChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a47cdbea9776850ad1e01ca574f167f7f</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllStateChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>afc0d494cf3299670ade2d1263da68424</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllContinuousStateChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a36631f66b107361bfe4581eafaa9ef40</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllVZChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>af8f07b89a2a6365b0e9a07f359e6c85f</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllQChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a22af3b809c81c56889ef373317136d75</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllVChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a96f4b7b40cee47f2cb48bef54ec42edd</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllZChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a580617f98507cd13b33c503abb170449</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllDiscreteStateChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>acfe6a7e5d4f039b8850c7c312c3d25fe</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllAbstractStateChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ac221954c5da4babbaf2e9fefe6335585</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllParametersChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a1a6cebd17f7745d24616fac517009861</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllNumericParametersChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>afe0c7da2d2845ef7e484aa5345ccb8c0</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>NoteAllAbstractParametersChanged</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>aa3a650263cf5958cb7957c71276656d2</anchor>
      <arglist>(int64_t change_event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>owns_any_variables_or_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>abbdee63008e17504bb1048e05c30e2a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PropagateBulkChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a65b5befcf0d27a7e5216a38800df55d5</anchor>
      <arglist>(int64_t change_event, void(ContextBase::*note_bulk_change)(int64_t change_event))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; ContextBase &gt;</type>
      <name>DoCloneWithoutPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a41778cd897c51068829979a180db058b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateBuildTrackerPointerMap</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>aae430bd62aaf203cb7cac90d133928e4</anchor>
      <arglist>(const ContextBase &amp;clone, DependencyTracker::PointerMap *tracker_map) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateFixContextPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a95b6623a91be0f2470f1cd43d1399af5</anchor>
      <arglist>(const ContextBase &amp;source, const DependencyTracker::PointerMap &amp;tracker_map)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateCachingChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a0fa84bf8349b0d371e192603a13d76e5</anchor>
      <arglist>(void(Cache::*caching_change)()) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPropagateBulkChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a338490eef16b94fbc294ed2f64132aeb</anchor>
      <arglist>(int64_t change_event, void(ContextBase::*note_bulk_change)(int64_t change_event))</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; ContextBase &gt;</type>
      <name>CloneWithoutPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a8f6bbe6ca23f524dd8cab700edf40a16</anchor>
      <arglist>(const ContextBase &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>BuildTrackerPointerMap</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>afa21e8f1c2df6d8b7ef98faa8f57706b</anchor>
      <arglist>(const ContextBase &amp;source, const ContextBase &amp;clone, DependencyTracker::PointerMap *tracker_map)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>FixContextPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a519706ab3f6484068c377f4e5d45060b</anchor>
      <arglist>(const ContextBase &amp;source, const DependencyTracker::PointerMap &amp;tracker_map, ContextBase *clone)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>PropagateCachingChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a7a2bab0165b60d8aaadee530d78029f1</anchor>
      <arglist>(const ContextBase &amp;context, void(Cache::*caching_change)())</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>PropagateBulkChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>ae81eb6f7c5af318698a995025ea422da</anchor>
      <arglist>(ContextBase *context, int64_t change_event, void(ContextBase::*note_bulk_change)(int64_t change_event))</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>set_parent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_context_base.html</anchorfile>
      <anchor>a1b001db248ae5159d7aa3bf3c89df111</anchor>
      <arglist>(ContextBase *child, ContextBase *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::ContextBaseFixedInputAttorney</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_base_fixed_input_attorney.html</filename>
    <member kind="function">
      <type></type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_base_fixed_input_attorney.html</anchorfile>
      <anchor>ae93a1557f32b3ced3034f503732a9895</anchor>
      <arglist>(ContextBaseFixedInputAttorney)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContextBaseFixedInputAttorney</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_base_fixed_input_attorney.html</anchorfile>
      <anchor>af1b32b9cf357b05f92fa6974177253ff</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>maliput::drake::systems::ContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_base_fixed_input_attorney.html</anchorfile>
      <anchor>a3e22556563af74c7b5d95fa4294a8ecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::ContextMessageInterface</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContextMessageInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>a1d1a57bf6804828838d16fda3275be56</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetSystemName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>aa443a7928b8021fb096c64dbca9520be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>GetSystemPathname</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>a666fc7f4dd0ed645e2d505a84d8c59db</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_cache_frozen</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>ab2e25ca094acc582dd288bc49a9d04bc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContextMessageInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>ae0b615beae42a9cf927c343104d8ff21</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_context_message_interface.html</anchorfile>
      <anchor>aba704b61d24d4bde2039c530871fea78</anchor>
      <arglist>(ContextMessageInterface)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::SystemBase::ContextSizes</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</filename>
    <member kind="function">
      <type>ContextSizes &amp;</type>
      <name>operator+=</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>a316ea670e32f26f70f4402bdb5064d20</anchor>
      <arglist>(const ContextSizes &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_generalized_positions</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>a8266cf4ca7f9a99bcdd4f5b9a63d7588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_generalized_velocities</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>ac6bfe164b01efe1da5cb9104bd8ce708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_misc_continuous_states</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>a24d2b7b9127e9eb52958e80f9c5792a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_discrete_state_groups</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>a4e54a5084a278fc7698e97ac552ded29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_abstract_states</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>a42c9026094f42ad0640cb345ffbe6a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_numeric_parameter_groups</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>af8f29412a52a66576d0ea85108e4d4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_abstract_parameters</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_base_1_1_context_sizes.html</anchorfile>
      <anchor>ad15f084d2247e61bc20310ab56e457a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ContinuousState</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a9bdb59cf7f9cb2a45839c39a952552d2</anchor>
      <arglist>(std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>ac39b3348257262124904dfe95fff8221</anchor>
      <arglist>(std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; state, int num_q, int num_v, int num_z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a1b02f4d387b6990120df659d275f057b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>acbe21f0decea98f6f13ff2db1198e44b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ContinuousState&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>ac8ab391c412fd16dae2d4256cd679a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_q</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a575fa54c71cca89670060ff2ba3a8d96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_v</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a7fdb5bd011e4102cc42131db6434c1b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_z</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a34166e2e6bf4ab12e2daec57b96b7c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a544681f87243cb9f80715bb1aa9c0a99</anchor>
      <arglist>(std::size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a99150adfc55ef9056b7feddc006d8878</anchor>
      <arglist>(std::size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>aac8a3aad57388d77300bbebad3de1ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a20607d17e81da7f065cc95d9ca40d9a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_generalized_position</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a3ae371f7ac91c26ef9cac4f27f3210f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_generalized_position</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a3ce38597399d648e27f32550031a3a79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_generalized_velocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a8120a62d813139e3777f32de9b1e9041</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_generalized_velocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>adbd6c1818e0783a3a173a6e1d81e5f3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; T &gt; &amp;</type>
      <name>get_misc_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a82b6637e316ee41cd356a46efece8f46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_misc_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>aa7eb2e24e194284af170d923c9017729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>afada8502efc681e7f62ff5d47fee1724</anchor>
      <arglist>(const ContinuousState&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFromVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>acf42544d45810d7c74083ba2b00bb9d0</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>CopyToVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>ac9268f6e13f208019d9131cbe98dde0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a73f25319dea21e5c40dc00f527ca1512</anchor>
      <arglist>(std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; state, std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; q, std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; v, std::unique_ptr&lt; VectorBase&lt; T &gt;&gt; z)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; ContinuousState &gt;</type>
      <name>DoClone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_continuous_state.html</anchorfile>
      <anchor>a2a3dca8370bdf98b270346ec4c7daafb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YAML::convert&lt; maliput::api::SRange &gt;</name>
    <filename>struct_y_a_m_l_1_1convert_3_01maliput_1_1api_1_1_s_range_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static Node</type>
      <name>encode</name>
      <anchorfile>struct_y_a_m_l_1_1convert_3_01maliput_1_1api_1_1_s_range_01_4.html</anchorfile>
      <anchor>a9bae7bd86b1c6c3a5df0e69b2924e09b</anchor>
      <arglist>(const maliput::api::SRange &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>decode</name>
      <anchorfile>struct_y_a_m_l_1_1convert_3_01maliput_1_1api_1_1_s_range_01_4.html</anchorfile>
      <anchor>a78646e352877dacb3e820e23d5c3a6af</anchor>
      <arglist>(const Node &amp;node, maliput::api::SRange &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::copyable_unique_ptr</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const T &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; T &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const T &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>copyable_unique_ptr&lt; maliput::drake::AbstractValue &gt;</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::AbstractValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::AbstractValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::AbstractValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::AbstractValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::AbstractValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::AbstractValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::AbstractValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::AbstractValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::AbstractValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::AbstractValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::AbstractValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::AbstractValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::AbstractValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::AbstractValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::AbstractValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>copyable_unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt;</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::CacheEntryValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::CacheEntryValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::CacheEntryValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::CacheEntryValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::CacheEntryValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::CacheEntryValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::CacheEntryValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::CacheEntryValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::CacheEntryValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::CacheEntryValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::CacheEntryValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::CacheEntryValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::CacheEntryValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::CacheEntryValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::CacheEntryValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::CacheEntryValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::CacheEntryValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>copyable_unique_ptr&lt; maliput::drake::systems::EventData &gt;</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::EventData *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::EventData &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::EventData *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::EventData &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::EventData *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::EventData *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::EventData &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::EventData &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::EventData *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::EventData &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::EventData *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::EventData &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::EventData &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::EventData *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::EventData *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::EventData &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::EventData &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>copyable_unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt;</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::FixedInputPortValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::FixedInputPortValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::FixedInputPortValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::FixedInputPortValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::FixedInputPortValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::FixedInputPortValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::FixedInputPortValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::FixedInputPortValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::FixedInputPortValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::FixedInputPortValue &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::FixedInputPortValue *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::FixedInputPortValue &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::FixedInputPortValue &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::FixedInputPortValue *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::FixedInputPortValue *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::FixedInputPortValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::FixedInputPortValue &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>copyable_unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt;</name>
    <filename>classmaliput_1_1drake_1_1copyable__unique__ptr.html</filename>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::Parameters&lt; T &gt; *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::Parameters&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::Parameters&lt; T &gt; *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::Parameters&lt; T &gt; &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::Parameters&lt; T &gt; *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::Parameters&lt; T &gt; *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::Parameters&lt; T &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::Parameters&lt; T &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ab5373c9f8caa95d0cdf8d4b7d1066cb3</anchor>
      <arglist>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const copyable_unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a38cdcb23181ad1c554ef0209a29cd768</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac67cae08914b16290d64a748fb64d6dc</anchor>
      <arglist>(maliput::drake::systems::Parameters&lt; T &gt; *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad454f66aaeaf4bff4953937c55634298</anchor>
      <arglist>(const maliput::drake::systems::Parameters&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a9efa09fdc8aad69db06b649c447d9806</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a1774b97188ce9c5a5cd47c5c4ff63fc0</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac60d2d174b5ce39e94bf59719c997250</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5a34341a71b340b3af3ee3d18e9d09bc</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>copyable_unique_ptr</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ad0b538a9c4ca822d4212226ba51dc0aa</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>aabb236eef6e850a09b441591f0812747</anchor>
      <arglist>(maliput::drake::systems::Parameters&lt; T &gt; *ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a4d4078720893b915d022bd734f6eb5e9</anchor>
      <arglist>(const maliput::drake::systems::Parameters&lt; T &gt; &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a35881f6551d81d4ba11f23bdc695dbf5</anchor>
      <arglist>(const copyable_unique_ptr &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a5d014005bde7838a248d7129023b999c</anchor>
      <arglist>(const copyable_unique_ptr&lt; U &gt; &amp;cu_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a241aa7fdb2e242c6965006831d9e62dd</anchor>
      <arglist>(const std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a67bca368e89b4408972a3f54c09eaab3</anchor>
      <arglist>(const std::unique_ptr&lt; U &gt; &amp;u_ptr)</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af2693139bff4ad445212aa4bb73284ad</anchor>
      <arglist>(copyable_unique_ptr &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a60fa4971dcefe82f931084653b196a55</anchor>
      <arglist>(copyable_unique_ptr&lt; U &gt; &amp;&amp;cu_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a53f1739bcedb13183285a9995d3b9daf</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::Parameters&lt; T &gt; &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>copyable_unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>abf98f86aa60c05f0a546ca78c2a2e857</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;u_ptr) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a3f6fc5de06a318920d84f3c3742db07f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::Parameters&lt; T &gt; *</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a76c791981969a90b67778f87036b032e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::Parameters&lt; T &gt; *</type>
      <name>get_mutable</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>ac684d04fadf2a6b636c98e38aabf7ccb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const maliput::drake::systems::Parameters&lt; T &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>a540e5588dffde890174a282451f73fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>maliput::drake::systems::Parameters&lt; T &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1copyable__unique__ptr.html</anchorfile>
      <anchor>af7f8c6b921dca2b94f6e7ee14e762770</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::common::DelegatingHasher</name>
    <filename>structmaliput_1_1common_1_1_delegating_hasher.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(const void *, size_t)&gt;</type>
      <name>Func</name>
      <anchorfile>structmaliput_1_1common_1_1_delegating_hasher.html</anchorfile>
      <anchor>aa82405da558e1deea00586c32b6c5651</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DelegatingHasher</name>
      <anchorfile>structmaliput_1_1common_1_1_delegating_hasher.html</anchorfile>
      <anchor>a2f06de017c348e04061971db98125a4e</anchor>
      <arglist>(Func func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1common_1_1_delegating_hasher.html</anchorfile>
      <anchor>ab03f097f6c3d31eb2fcdcf71a49d072a</anchor>
      <arglist>(const void *data, size_t length) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::DelegatingHasher</name>
    <filename>structmaliput_1_1drake_1_1_delegating_hasher.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(const void *, size_t)&gt;</type>
      <name>Func</name>
      <anchorfile>structmaliput_1_1drake_1_1_delegating_hasher.html</anchorfile>
      <anchor>aa82405da558e1deea00586c32b6c5651</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DelegatingHasher</name>
      <anchorfile>structmaliput_1_1drake_1_1_delegating_hasher.html</anchorfile>
      <anchor>a2f06de017c348e04061971db98125a4e</anchor>
      <arglist>(Func func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1drake_1_1_delegating_hasher.html</anchorfile>
      <anchor>ab03f097f6c3d31eb2fcdcf71a49d072a</anchor>
      <arglist>(const void *data, size_t length) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DenseOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a69988224169c4e04a80054e5c666b166</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>Evaluate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a5f2d82fca3a304b1c4c277618a4a1d8b</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>EvaluateNth</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a84e2a0ad8be6719d4650925e571751ab</anchor>
      <arglist>(const T &amp;t, int n) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_empty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a5a2b7a58dc85678d08752945ff655362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>ace0ac0b974686b7e2c00fd22912bceeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>ad6c6c44f9070bc963b88512fbab24d8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a32fe37e2c6b62e7f04b037b5b470c885</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual VectorX&lt; T &gt;</type>
      <name>DoEvaluate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a9f6499438f58544e28b72308fad2c775</anchor>
      <arglist>(const T &amp;t) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoEvaluateNth</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a52c97feb7563d6b51d5fb2f0a98a5494</anchor>
      <arglist>(const T &amp;t, int n) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>do_is_empty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a15f16d30700908ddbb386e2e309971f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>do_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>ab3710dec9cbcff741d635420e32ef300</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>do_start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a072e92602879ffb658c4b5b5644531c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>do_end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a167f9e35da2f5715a963a18dfc718de4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowIfOutputIsEmpty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a0777eec1660efea46221dbc4108ac66d</anchor>
      <arglist>(const char *func_name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowIfNthElementIsInvalid</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a81a278060be08d4e053ec7ba4862047b</anchor>
      <arglist>(const char *func_name, int n) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowIfTimeIsInvalid</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dense_output.html</anchorfile>
      <anchor>a29bc9d8d68b2e354d7b63aa6f6637c9e</anchor>
      <arglist>(const char *func_name, const T &amp;t) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DependencyGraph</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a2a3b19cdb2c64a16ccec4399784e6cce</anchor>
      <arglist>(const internal::ContextMessageInterface *owning_subcontext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a2b164c18b865665d99c54c78cbe67274</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>DependencyTracker &amp;</type>
      <name>CreateNewDependencyTracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a256ab5701586f9f1d327ac2f2db32ce6</anchor>
      <arglist>(DependencyTicket known_ticket, std::string description, CacheEntryValue *cache_value=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>DependencyTracker &amp;</type>
      <name>CreateNewDependencyTracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a3a9fe7c0200d0d478ab848ef1da3ca00</anchor>
      <arglist>(std::string description, CacheEntryValue *cache_value=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_tracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a8fc2d63be9298fcd78f09e9438af0b00</anchor>
      <arglist>(DependencyTicket ticket) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>trackers_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>aad6131b11c2a73592ad9f9cb19918e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DependencyTracker &amp;</type>
      <name>get_tracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>aae36445554ff0dab1e6a1a10d20f55ae</anchor>
      <arglist>(DependencyTicket ticket) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTracker &amp;</type>
      <name>get_mutable_tracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a290a6ba7f4b91127a264fecd79686d1f</anchor>
      <arglist>(DependencyTicket ticket)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a39d6fa81fe127832ab685526c99c559f</anchor>
      <arglist>(const DependencyGraph &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendToTrackerPointerMap</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a32f801ebc60ebd200bf0f9dd9ae6ce32</anchor>
      <arglist>(const DependencyGraph &amp;clone, DependencyTracker::PointerMap *tracker_map) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RepairTrackerPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>ac67f28d5c824455843489f2236cb2a94</anchor>
      <arglist>(const DependencyGraph &amp;source, const DependencyTracker::PointerMap &amp;tracker_map, const internal::ContextMessageInterface *owning_subcontext, Cache *new_cache)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a611333e1f39556f629ee297747a40cca</anchor>
      <arglist>(DependencyGraph &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a08fd5430128364097560243149f35ac7</anchor>
      <arglist>(const DependencyGraph &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a6e142c69be738bbe385fbe6ae5e6be0e</anchor>
      <arglist>(DependencyGraph &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a611333e1f39556f629ee297747a40cca</anchor>
      <arglist>(DependencyGraph &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a08fd5430128364097560243149f35ac7</anchor>
      <arglist>(const DependencyGraph &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_graph.html</anchorfile>
      <anchor>a6e142c69be738bbe385fbe6ae5e6be0e</anchor>
      <arglist>(DependencyGraph &amp;&amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DependencyTracker</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</filename>
    <member kind="typedef">
      <type>std::unordered_map&lt; const DependencyTracker *, const DependencyTracker * &gt;</type>
      <name>PointerMap</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a7f2d7cb826a1609573105b5e5b094bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetPathDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>afc308e75ca3c442b81fe13a2d985a77b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aa74667b5b1f3554381e4bbd33ba2540d</anchor>
      <arglist>(CacheEntryValue *cache_value)</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntryValue *</type>
      <name>cache_entry_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a6a056b4674f77186d954f73f98bc25ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NoteValueChange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a4c4305cca4912dea875265e56134f468</anchor>
      <arglist>(int64_t change_event) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubscribeToPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aa964c667857ac244ba47c70faa9d3c21</anchor>
      <arglist>(DependencyTracker *prerequisite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsubscribeFromPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a16e4dd3f95b381bb8ebba270513184cf</anchor>
      <arglist>(DependencyTracker *prerequisite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDownstreamSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aabb613425aec18e2c13da2417e27eb63</anchor>
      <arglist>(const DependencyTracker &amp;subscriber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveDownstreamSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a0595a584aa289e4ba76e8691dee2a970</anchor>
      <arglist>(const DependencyTracker &amp;subscriber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>ace3ae81bdf9329aea03fa138ba0baaf8</anchor>
      <arglist>(const DependencyTracker &amp;prerequisite) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aeaaa3593d6954b14572ab5552ed02019</anchor>
      <arglist>(const DependencyTracker &amp;subscriber) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a434cbd05a3df2f08eb26849dcb3f93b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const DependencyTracker * &gt; &amp;</type>
      <name>prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>ae1cc5daa5bc3ea5185738f34b9b2cb82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_subscribers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a69b8a99844122758ea5859a1a420a355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const DependencyTracker * &gt; &amp;</type>
      <name>subscribers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a774e687756703f1425963140b48d8524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_notifications_received</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a1deae06b98e5a48d08e03fce028c38da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_ignored_notifications</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a1e700a713ce2e3ec475e28f474a42d81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_notifications_sent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a6b5ea5d4bbf58c931f789c8cf89b2a43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_value_change_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a797633736e1a3d2318cac6700d1d066c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_prerequisite_change_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a98f11ae320b7e079850aebb38c4866f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SubscribeToPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aa964c667857ac244ba47c70faa9d3c21</anchor>
      <arglist>(DependencyTracker *prerequisite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>UnsubscribeFromPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a16e4dd3f95b381bb8ebba270513184cf</anchor>
      <arglist>(DependencyTracker *prerequisite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddDownstreamSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aabb613425aec18e2c13da2417e27eb63</anchor>
      <arglist>(const DependencyTracker &amp;subscriber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveDownstreamSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a0595a584aa289e4ba76e8691dee2a970</anchor>
      <arglist>(const DependencyTracker &amp;subscriber)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>ace3ae81bdf9329aea03fa138ba0baaf8</anchor>
      <arglist>(const DependencyTracker &amp;prerequisite) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSubscriber</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>aeaaa3593d6954b14572ab5552ed02019</anchor>
      <arglist>(const DependencyTracker &amp;subscriber) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a434cbd05a3df2f08eb26849dcb3f93b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const DependencyTracker * &gt; &amp;</type>
      <name>prerequisites</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>ae1cc5daa5bc3ea5185738f34b9b2cb82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_subscribers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a69b8a99844122758ea5859a1a420a355</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const DependencyTracker * &gt; &amp;</type>
      <name>subscribers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a774e687756703f1425963140b48d8524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_notifications_received</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a1deae06b98e5a48d08e03fce028c38da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_ignored_notifications</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a1e700a713ce2e3ec475e28f474a42d81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_notifications_sent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a6b5ea5d4bbf58c931f789c8cf89b2a43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_value_change_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a797633736e1a3d2318cac6700d1d066c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_prerequisite_change_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a98f11ae320b7e079850aebb38c4866f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DependencyGraph</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a0e281b1504ddc5ad8c3fdd3de5fc67e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowIfBadDependencyTracker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_dependency_tracker.html</anchorfile>
      <anchor>a7d0b9fb8012fb26b22ad7a16dd1d0d2b</anchor>
      <arglist>(const internal::ContextMessageInterface *owning_subcontext=nullptr, const CacheEntryValue *cache_value=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Diagram</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_diagram.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DiagramCompositeEventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_diagram_composite_event_collection.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::CompositeEventCollection</base>
    <member kind="function">
      <type></type>
      <name>DiagramCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_composite_event_collection.html</anchorfile>
      <anchor>a0027346800de807034aabde2acb814c8</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; CompositeEventCollection&lt; T &gt;&gt;&gt; subevents)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_subsystems</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_composite_event_collection.html</anchorfile>
      <anchor>a09a19eb1363331358c0b847bca6d499c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CompositeEventCollection&lt; T &gt; &amp;</type>
      <name>get_mutable_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_composite_event_collection.html</anchorfile>
      <anchor>ac36ea1c059b5a297ddf02d1f91171e99</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const CompositeEventCollection&lt; T &gt; &amp;</type>
      <name>get_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_composite_event_collection.html</anchorfile>
      <anchor>ac99abe42f9bc739a5d64c31acdcecfd6</anchor>
      <arglist>(int index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DiagramEventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::EventCollection</base>
    <member kind="function">
      <type></type>
      <name>DiagramEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a6092ca28e8d73c562c10b96b84a4e7f3</anchor>
      <arglist>(int num_subsystems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>adad67355ba21095e5133a3d90e2ded0d</anchor>
      <arglist>(std::unique_ptr&lt; EventType &gt;) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>ab67aa296d5a6e7cbe95191f50c262566</anchor>
      <arglist>(EventType) final</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_subsystems</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a09a19eb1363331358c0b847bca6d499c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_and_own_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>ac162a3eb15b931823c56f6aade0e262d</anchor>
      <arglist>(int index, std::unique_ptr&lt; EventCollection&lt; EventType &gt;&gt; subevent_collection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>aecccb5654b9f3ed63220fbd60cacea14</anchor>
      <arglist>(int index, EventCollection&lt; EventType &gt; *subevent_collection)</arglist>
    </member>
    <member kind="function">
      <type>const EventCollection&lt; EventType &gt; &amp;</type>
      <name>get_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a42647ad95c6527ca176af697699113a7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>EventCollection&lt; EventType &gt; &amp;</type>
      <name>get_mutable_subevent_collection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a48221904533291d5ec83ed2a2695f90c</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>aa0d2b6ddea7cb960b90423ac48f555bf</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a58887f2b21360620141e115c71cc168b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_diagram_event_collection.html</anchorfile>
      <anchor>a9078b05da90e14cf53ad375377ac4834</anchor>
      <arglist>(const EventCollection&lt; EventType &gt; &amp;other_collection) final</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::DirectedEdgeIndex</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_directed_edge_index.html</filename>
    <member kind="function">
      <type>DirectedEdgeIndex</type>
      <name>reverse</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_directed_edge_index.html</anchorfile>
      <anchor>a91cb3fd7500ab5e16dc74300cd67a4c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start_vertex_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_directed_edge_index.html</anchorfile>
      <anchor>a5e9d00e29785422a08bcd94d6ca3095a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>end_vertex_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_directed_edge_index.html</anchorfile>
      <anchor>ac069a2a74d72b5eac9ab70301084f7c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DiscreteUpdateEvent</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::Event</base>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const DiscreteUpdateEvent&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *)&gt;</type>
      <name>DiscreteUpdateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a23625c08032a7d524544f45d76b66e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const DiscreteUpdateEvent&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a3803b3bcfb450714b18a963148bf90ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>aef88f1a15118181189e68011a1151bca</anchor>
      <arglist>(DiscreteUpdateEvent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_discrete_update</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a6411929eebb98e856021335d43bcb7f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>ac92214eaf09786073aa1018622733394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a6c984fad162c5db62119c53952ce882c</anchor>
      <arglist>(const DiscreteUpdateCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a31c4a2fd9147f7a30281ad93dbdace30</anchor>
      <arglist>(const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>ab36edf848673cd62b0b5feedab8cc458</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const DiscreteUpdateCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a1f9eb3a04e27eb061aa3ef6c1f197b19</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>abc5020ffa5d44d708fc0baec8f829fb4</anchor>
      <arglist>(const TriggerType &amp;trigger_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a885763a51126dd01130107a8fbb07933</anchor>
      <arglist>(const System&lt; T &gt; &amp;system, const Context&lt; T &gt; &amp;context, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const DiscreteUpdateEvent&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *)&gt;</type>
      <name>DiscreteUpdateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a23625c08032a7d524544f45d76b66e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const DiscreteUpdateEvent&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_update_event.html</anchorfile>
      <anchor>a3803b3bcfb450714b18a963148bf90ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::DiscreteValueRule::DiscreteValue</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</filename>
    <base>maliput::api::rules::Rule::State</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>a0bad07f2509d48699f63f582ddea9c62</anchor>
      <arglist>(DiscreteValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValue</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>a32d7542bd596d338556db12a8f13cf32</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValue</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>a69af167e05cd6aa517c0a653a9a00adb</anchor>
      <arglist>(int severity, RelatedRules related_rules, RelatedUniqueIds related_unique_ids, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>ae1332d97321ead1e4622277557fa940f</anchor>
      <arglist>(const DiscreteValue &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>ab64140a5c9d22bf64e029bfe830d456c</anchor>
      <arglist>(const DiscreteValue &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_discrete_value_rule_1_1_discrete_value.html</anchorfile>
      <anchor>a5c33da5929c9f2f9ef8d006d2350e6ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::DiscreteValueRule</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule.html</filename>
    <base>maliput::api::rules::Rule</base>
    <class kind="struct">maliput::api::rules::DiscreteValueRule::DiscreteValue</class>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule.html</anchorfile>
      <anchor>ad6768ced00f3eedc706254ec7436657e</anchor>
      <arglist>(DiscreteValueRule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule.html</anchorfile>
      <anchor>a27492b222f8505ad41f873d5525740cd</anchor>
      <arglist>(const Rule::Id &amp;id, const Rule::TypeId &amp;type_id, const LaneSRoute &amp;zone, const std::vector&lt; DiscreteValue &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; DiscreteValue &gt; &amp;</type>
      <name>states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule.html</anchorfile>
      <anchor>aa30ba990802f08f3aa4e3a411961b16f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::DiscreteValueRuleConstants</name>
    <filename>structmaliput_1_1_discrete_value_rule_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kValue</name>
      <anchorfile>structmaliput_1_1_discrete_value_rule_constants.html</anchorfile>
      <anchor>aa939f2caeb845562cb87e73551f12295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kValues</name>
      <anchorfile>structmaliput_1_1_discrete_value_rule_constants.html</anchorfile>
      <anchor>aa8c58feb8acd1b82abd23a099abfc484</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::DiscreteValueRuleStateProvider</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</filename>
    <member kind="typedef">
      <type>StateProviderResult&lt; DiscreteValueRule::DiscreteValue &gt;</type>
      <name>StateResult</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a1188b99948ffd2a79b923ed2c564c9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a36fc669db969300cfa5ea070de3ec611</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; StateResult &gt;</type>
      <name>GetState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>af853a1f3f4c940f16d93be1bb639cd6a</anchor>
      <arglist>(const Rule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; StateResult &gt;</type>
      <name>GetState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a4de3b8f0f5aded483fdd3e0a110abf34</anchor>
      <arglist>(const RoadPosition &amp;road_position, const Rule::TypeId &amp;rule_type, double tolerance) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>ad2d9d9dad55b2958a0d465f4f8f763e7</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::DiscreteValues</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DiscreteValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a3e55061c1a2d3227fa98fde06050a14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a9dcc98282589e6fffa4bb6b81975647b</anchor>
      <arglist>(const std::vector&lt; BasicVector&lt; T &gt; * &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>ad04735d45d83dfd2fa387fee8ef39dc1</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; BasicVector&lt; T &gt;&gt;&gt; &amp;&amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a31dd84e8f6b18b629ce9b878af683029</anchor>
      <arglist>(std::unique_ptr&lt; BasicVector&lt; T &gt;&gt; datum)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AppendGroup</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a1921190f40a3b6421e6a7b4311b03623</anchor>
      <arglist>(std::unique_ptr&lt; BasicVector&lt; T &gt;&gt; datum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a19a5e68e383564f5c571d9bb11e57930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>ae3d6aafba237b9251e8fabd0dbe76528</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BasicVector&lt; T &gt; * &gt; &amp;</type>
      <name>get_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>ad35e39bbc1f872f51b88bc0b53da8dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a544681f87243cb9f80715bb1aa9c0a99</anchor>
      <arglist>(std::size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a99150adfc55ef9056b7feddc006d8878</anchor>
      <arglist>(std::size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a781b532f24d827486a4ab324df7f1f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>aae86dd78ddf0ff1f879ae4b6d42e026b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a95cee47ba175ab6b8fd8f7cb2f82ab96</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a4d33aecde019e5f62d662aa2ef142b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a1b0db2779927764099fa8878ccaea85e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a139e5f74414ae8f87153451814f162ae</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a808120e3bb3ff14125effe132ea4b954</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>abaf7c6a1b4908c67e28bf45cfc58965a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>aa4080d4c479eb0baf14cec74d44374b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a2bfa3897316b313139081b8cf8487576</anchor>
      <arglist>(int index, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a04f99bc8d40ae24884981b17f4801866</anchor>
      <arglist>(const DiscreteValues&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a4af818ddd91ebbee04c8354fe32df917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a544681f87243cb9f80715bb1aa9c0a99</anchor>
      <arglist>(std::size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a99150adfc55ef9056b7feddc006d8878</anchor>
      <arglist>(std::size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a781b532f24d827486a4ab324df7f1f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>aae86dd78ddf0ff1f879ae4b6d42e026b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a95cee47ba175ab6b8fd8f7cb2f82ab96</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a4d33aecde019e5f62d662aa2ef142b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a1b0db2779927764099fa8878ccaea85e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a139e5f74414ae8f87153451814f162ae</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a808120e3bb3ff14125effe132ea4b954</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>abaf7c6a1b4908c67e28bf45cfc58965a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>aa4080d4c479eb0baf14cec74d44374b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a2bfa3897316b313139081b8cf8487576</anchor>
      <arglist>(int index, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a04f99bc8d40ae24884981b17f4801866</anchor>
      <arglist>(const DiscreteValues&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a4af818ddd91ebbee04c8354fe32df917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_discrete_values.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::dummy_value</name>
    <filename>structmaliput_1_1drake_1_1dummy__value.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr T</type>
      <name>get</name>
      <anchorfile>structmaliput_1_1drake_1_1dummy__value.html</anchorfile>
      <anchor>a72a5372833437d5493b91087dd74c903</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::dummy_value&lt; int &gt;</name>
    <filename>structmaliput_1_1drake_1_1dummy__value_3_01int_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr int</type>
      <name>get</name>
      <anchorfile>structmaliput_1_1drake_1_1dummy__value_3_01int_01_4.html</anchorfile>
      <anchor>a88985a0444cc6e887f3c57b56eda792d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::EigenPtr</name>
    <filename>classmaliput_1_1drake_1_1_eigen_ptr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Ref&lt; PlainObjectType &gt;</type>
      <name>RefType</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>aec06038f7c3c38b96aa8e4f26fe386d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenPtr</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a5a2e3a3873d77de2554337fefa985de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenPtr</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>ace90471ce65fb11c428ba1f54c86a51b</anchor>
      <arglist>(std::nullptr_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenPtr</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a94f5f238ad74238545ca292805f32ead</anchor>
      <arglist>(const EigenPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenPtr</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a3aeb6c82674ca6d58eb6ed4c47b01239</anchor>
      <arglist>(PlainObjectTypeIn *m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenPtr</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a1e65944ec46136456348b4fab569c749</anchor>
      <arglist>(const EigenPtr&lt; PlainObjectTypeIn &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EigenPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a4c26954944732e0460a9b9acc7b138f4</anchor>
      <arglist>(const EigenPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EigenPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a1101078f8bb6c74f60f44851651289f2</anchor>
      <arglist>(const EigenPtr&lt; PlainObjectTypeIn &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RefType &amp;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a97857144430ea58355cb2441e8cab52c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RefType *</type>
      <name>operator-&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a814a71023a28deaa28ac88e64f801afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>a9750c9f5b6cb3067a6520a02f96f7573</anchor>
      <arglist>(std::nullptr_t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_eigen_ptr.html</anchorfile>
      <anchor>aa938730c573466ee64dae6e33eeda612</anchor>
      <arglist>(std::nullptr_t) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::EigenSizeMinPreferDynamic</name>
    <filename>structmaliput_1_1drake_1_1_eigen_size_min_prefer_dynamic.html</filename>
    <templarg>a</templarg>
    <templarg>b</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1_eigen_size_min_prefer_dynamic.html</anchorfile>
      <anchor>adfbd84e9619cf3366fb744d3f70c8c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::EigenSizeMinPreferFixed</name>
    <filename>structmaliput_1_1drake_1_1_eigen_size_min_prefer_fixed.html</filename>
    <templarg>a</templarg>
    <templarg>b</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1_eigen_size_min_prefer_fixed.html</anchorfile>
      <anchor>adfbd84e9619cf3366fb744d3f70c8c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::GeoVertex::Equiv</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_geo_vertex_1_1_equiv.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_geo_vertex_1_1_equiv.html</anchorfile>
      <anchor>aa20749a63ed2c77f495b32fe4118b5ac</anchor>
      <arglist>(const GeoVertex &amp;lhs, const GeoVertex &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::GeoNormal::Equiv</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_geo_normal_1_1_equiv.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_geo_normal_1_1_equiv.html</anchorfile>
      <anchor>ab9ec50cf649a244595032a030685165d</anchor>
      <arglist>(const GeoNormal &amp;lhs, const GeoNormal &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Event</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>systems::TriggerType</type>
      <name>TriggerType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a9fc02a89fe46ec20b0e5cf68ecf7eee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a85b9e8172cffad1f169d55688e49a72f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>aa28124883bfb17601f85db7e635094b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_discrete_update</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>ab5c6549d0b80154472789124fcfb6b52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Event &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>ae7e597688e8eb0d1d54d322964d49b35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriggerType</type>
      <name>get_trigger_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>aaa07940fbacd0e4c0ed1a226e303afe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_event_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a8417c633cc8646104ae00c407f856044</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EventData *</type>
      <name>get_event_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>aaed6b9f2471fedf1633f8092f49d05f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventData *</type>
      <name>get_mutable_event_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a2b4011486f230f08479c8f0cafe7814c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_trigger_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a1ddd7a465bfd1513d6785fbd46fad84d</anchor>
      <arglist>(const TriggerType trigger_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_event_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a6f898670c4e4c0e01a20a45a63b22860</anchor>
      <arglist>(std::unique_ptr&lt; EventData &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToComposite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>ad715f1cc5984c07268a9b447ac869684</anchor>
      <arglist>(TriggerType trigger_type, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToComposite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a1d68e526e2d4c46b67ca6793968b9b5e</anchor>
      <arglist>(CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a27ccbda210a6c04a29c46ade06b5bda9</anchor>
      <arglist>(Event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a2b3cca37c7436139b9face696f042cc8</anchor>
      <arglist>(const TriggerType &amp;trigger)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoAddToComposite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>abb8c69f1dbd050fd614aef81f50bd104</anchor>
      <arglist>(TriggerType trigger_type, CompositeEventCollection&lt; T &gt; *events) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Event *</type>
      <name>DoClone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event.html</anchorfile>
      <anchor>a8a7d8887ff5695340d11ddf16eb12396</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::EventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a8a7bb86bd2c430815cd89f0216d707e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a9ce0ab57962f71dd5a55eb801142203d</anchor>
      <arglist>(const EventCollection&lt; EventType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a231b56ed21a687d8c8e72fb63b4f9d23</anchor>
      <arglist>(const EventCollection&lt; EventType &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>aa5b31c976cc6734003d9950e731dfed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>af025a9d6b00f00183fde53dd4f31662c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a441779b587accb79f832dd172ddb3285</anchor>
      <arglist>(std::unique_ptr&lt; EventType &gt; event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a962bb5c9418bc0c72fdca0a12484446a</anchor>
      <arglist>(EventType event)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a3e0f03f4733d4061bd5f98f3ba10735c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>acc00fb518bea279685c8c0af09cef984</anchor>
      <arglist>(const EventCollection&lt; EventType &gt; &amp;other)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventCollection&lt; maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; &gt;</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a8a7bb86bd2c430815cd89f0216d707e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a9ce0ab57962f71dd5a55eb801142203d</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a231b56ed21a687d8c8e72fb63b4f9d23</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>aa5b31c976cc6734003d9950e731dfed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>af025a9d6b00f00183fde53dd4f31662c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a441779b587accb79f832dd172ddb3285</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; &gt; event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a962bb5c9418bc0c72fdca0a12484446a</anchor>
      <arglist>(maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; event)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a3e0f03f4733d4061bd5f98f3ba10735c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>acc00fb518bea279685c8c0af09cef984</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::DiscreteUpdateEvent&lt; T &gt; &gt; &amp;other)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventCollection&lt; maliput::drake::systems::PublishEvent&lt; T &gt; &gt;</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a8a7bb86bd2c430815cd89f0216d707e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a9ce0ab57962f71dd5a55eb801142203d</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::PublishEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a231b56ed21a687d8c8e72fb63b4f9d23</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::PublishEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>aa5b31c976cc6734003d9950e731dfed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>af025a9d6b00f00183fde53dd4f31662c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a441779b587accb79f832dd172ddb3285</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::PublishEvent&lt; T &gt; &gt; event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a962bb5c9418bc0c72fdca0a12484446a</anchor>
      <arglist>(maliput::drake::systems::PublishEvent&lt; T &gt; event)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a3e0f03f4733d4061bd5f98f3ba10735c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>acc00fb518bea279685c8c0af09cef984</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::PublishEvent&lt; T &gt; &gt; &amp;other)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EventCollection&lt; maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; &gt;</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a8a7bb86bd2c430815cd89f0216d707e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a9ce0ab57962f71dd5a55eb801142203d</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a231b56ed21a687d8c8e72fb63b4f9d23</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>aa5b31c976cc6734003d9950e731dfed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>af025a9d6b00f00183fde53dd4f31662c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a441779b587accb79f832dd172ddb3285</anchor>
      <arglist>(std::unique_ptr&lt; maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; &gt; event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a962bb5c9418bc0c72fdca0a12484446a</anchor>
      <arglist>(maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; event)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>a3e0f03f4733d4061bd5f98f3ba10735c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_collection.html</anchorfile>
      <anchor>acc00fb518bea279685c8c0af09cef984</anchor>
      <arglist>(const EventCollection&lt; maliput::drake::systems::UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;other)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::EventData</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_data.html</filename>
    <member kind="function">
      <type></type>
      <name>EventData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_data.html</anchorfile>
      <anchor>a81d9969ab11ea5758033221531e98fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_data.html</anchorfile>
      <anchor>a77115852c18f6c01409cc60e136ed8e7</anchor>
      <arglist>(EventData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_data.html</anchorfile>
      <anchor>adef16a0c11f8bc1a011080510b6016a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; EventData &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_data.html</anchorfile>
      <anchor>a4005602abe868bbb0ef30a58458f3a98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual EventData *</type>
      <name>DoClone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_data.html</anchorfile>
      <anchor>a1adea944c1ac1adce784406f85490076</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::EventStatus</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_event_status.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Severity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDidNothing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba447dfb924d9f8eee6216425b843fd5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSucceeded</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba6c37a7435a4069d24dd684abdb57d9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedTermination</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba76d2ce0414adfab1eb799c27b3965197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFailed</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba48ee4661a1d96abae7dda31fbcaec970</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kDidNothing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba447dfb924d9f8eee6216425b843fd5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kSucceeded</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba6c37a7435a4069d24dd684abdb57d9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedTermination</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba76d2ce0414adfab1eb799c27b3965197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFailed</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a11717da96dc4e4a5f79371318448f82ba48ee4661a1d96abae7dda31fbcaec970</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Severity</type>
      <name>severity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a61565d42b3a4c63dbfe14fb29b23c3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemBase *</type>
      <name>system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a1eb3465a33107f25e731948cd3347aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>message</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a77c231e47051f5ce971c8f1ce5976b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EventStatus &amp;</type>
      <name>KeepMoreSevere</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>ab836ce65ca0a13d07413608f5e22d86b</anchor>
      <arglist>(EventStatus candidate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EventStatus</type>
      <name>DidNothing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a0de7932f15a164a46523113d36e922e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EventStatus</type>
      <name>Succeeded</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a3a4f9a8cd5a2983e3f2dd498cfe70318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EventStatus</type>
      <name>ReachedTermination</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>a6912cef3a362910036f9b5eb31e977ce</anchor>
      <arglist>(const SystemBase *system, std::string message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EventStatus</type>
      <name>Failed</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_event_status.html</anchorfile>
      <anchor>ae3e0adfccd544505d326a579ac65fba5</anchor>
      <arglist>(const SystemBase *system, std::string message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ExternalSystemConstraint</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</filename>
    <member kind="function">
      <type></type>
      <name>ExternalSystemConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>ac988e600e07b8bac495537e69ea9c4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExternalSystemConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>abb48ac4ee0163a0fc28e2554b34c8599</anchor>
      <arglist>(std::string description, SystemConstraintBounds bounds, SystemConstraintCalc&lt; double &gt; calc_double)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraintBounds &amp;</type>
      <name>bounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>ae87e33ae13c59fffc72c5519a9741504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraintCalc&lt; T &gt; &amp;</type>
      <name>get_calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>a3be50809f8387dfa454b891ef44be4b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraintCalc&lt; double &gt; &amp;</type>
      <name>do_get_calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>ad55d87a3a5e8d804da219319267527c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExternalSystemConstraint</type>
      <name>MakeForAllScalars</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>a737900fde0c18800a85fcfa65d666380</anchor>
      <arglist>(std::string description, SystemConstraintBounds bounds, GenericSystemConstraintCalc calc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExternalSystemConstraint</type>
      <name>MakeForNonsymbolicScalars</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_external_system_constraint.html</anchorfile>
      <anchor>a445e502706923d6b6943743a76c0ab6e</anchor>
      <arglist>(std::string description, SystemConstraintBounds bounds, GenericSystemConstraintCalc calc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::FaceEdgeIndex</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_face_edge_index.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>face_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_face_edge_index.html</anchorfile>
      <anchor>a17306652175cc5f61e86f203b86bd9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>edge_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_face_edge_index.html</anchorfile>
      <anchor>a44f0b70c5a37513de36361fd5f74f66a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::FaceVertexIndex</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_face_vertex_index.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>face_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_face_vertex_index.html</anchorfile>
      <anchor>a17306652175cc5f61e86f203b86bd9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vertex_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_face_vertex_index.html</anchorfile>
      <anchor>a9ae457d1b6caa08add101f7a86d4686d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::Filesystem</name>
    <filename>classmaliput_1_1common_1_1_filesystem.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>remove_file</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>ac0213601509aab33fa95ee039e8cabb6</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>remove_directory</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>a02111575e2a5be1b1c29f324e171bba9</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create_directory</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>a1979c5c44b76b9b8d40c2d738a35e25a</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Path</type>
      <name>get_cwd</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>ae53e10c5fba5b5480f82b37fd315fcd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>read_as_string</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>a8a3de5d802f8d4c23f38c4c5f0076ce3</anchor>
      <arglist>(const Path &amp;path, std::string &amp;read_to)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create_directory_recursive</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>adf932e8a40a553d8185e04e175bb0f19</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>get_env_path</name>
      <anchorfile>classmaliput_1_1common_1_1_filesystem.html</anchorfile>
      <anchor>a6265df51b3a595f5734ee5d3ca5f93d0</anchor>
      <arglist>(const std::string &amp;env_var)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::FixedInputPortValue</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</filename>
    <member kind="function">
      <type></type>
      <name>~FixedInputPortValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a1e56111464e39ee9f13dc56b20ae5297</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ab60c724bd992fa4b01bf4c205dafbe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_vector_value</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ab229bfe4c6a102355056387ed743dcc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue *</type>
      <name>GetMutableData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ac21888cac9b2a80b82add3f1efaa8bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; *</type>
      <name>GetMutableVectorData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a8834aa01b76c86934cd9159205b35dbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>serial_number</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a91339909477dbf9f253d972983de32d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ContextBase &amp;</type>
      <name>get_owning_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ae75a0c643ca43797ef55f6da7c56fc98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedInputPortValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>aa3ed9419de7a057710002a78e1ddf40b</anchor>
      <arglist>(FixedInputPortValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a4c51ca1b54a7de76cd8a40c82915d949</anchor>
      <arglist>(const FixedInputPortValue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ad60f5533dda132709243f41a1c0dc0ed</anchor>
      <arglist>(FixedInputPortValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>internal::ContextBaseFixedInputAttorney</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a43d8b7d58d06cb358d96154be2b7d624</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>copyable_unique_ptr&lt; FixedInputPortValue &gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a9e24d4c4c6dcaa145e2421e0ba44007c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedInputPortValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>aa3ed9419de7a057710002a78e1ddf40b</anchor>
      <arglist>(FixedInputPortValue &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>a4c51ca1b54a7de76cd8a40c82915d949</anchor>
      <arglist>(const FixedInputPortValue &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_fixed_input_port_value.html</anchorfile>
      <anchor>ad60f5533dda132709243f41a1c0dc0ed</anchor>
      <arglist>(FixedInputPortValue &amp;&amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::internal::FNV1aHasher</name>
    <filename>classmaliput_1_1common_1_1internal_1_1_f_n_v1a_hasher.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>classmaliput_1_1common_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>a21330be45898b798e0b31bbf6e17f13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1common_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>ab03f097f6c3d31eb2fcdcf71a49d072a</anchor>
      <arglist>(const void *data, size_t length) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_byte</name>
      <anchorfile>classmaliput_1_1common_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>a47529eef5743afbca076d4798673db68</anchor>
      <arglist>(uint8_t byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator size_t</name>
      <anchorfile>classmaliput_1_1common_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>a1a81f586ecd81731b7ac6b93c8242e17</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::internal::FNV1aHasher</name>
    <filename>classmaliput_1_1drake_1_1internal_1_1_f_n_v1a_hasher.html</filename>
    <member kind="typedef">
      <type>size_t</type>
      <name>result_type</name>
      <anchorfile>classmaliput_1_1drake_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>a21330be45898b798e0b31bbf6e17f13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1drake_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>ab03f097f6c3d31eb2fcdcf71a49d072a</anchor>
      <arglist>(const void *data, size_t length) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>add_byte</name>
      <anchorfile>classmaliput_1_1drake_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>afa7a53c7d9232da75f09751860337ec3</anchor>
      <arglist>(uint8_t byte) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator size_t</name>
      <anchorfile>classmaliput_1_1drake_1_1internal_1_1_f_n_v1a_hasher.html</anchorfile>
      <anchor>a1a81f586ecd81731b7ac6b93c8242e17</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::FrameworkFactory</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_framework_factory.html</filename>
    <member kind="function">
      <type></type>
      <name>FrameworkFactory</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_framework_factory.html</anchorfile>
      <anchor>a03bae11a1780b144ab6b02b046e248e4</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrameworkFactory</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_framework_factory.html</anchorfile>
      <anchor>a258cc824d3bede40907e390aa4c43846</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; T &gt;</type>
      <name>Make</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_framework_factory.html</anchorfile>
      <anchor>a2ec0ea930846c501f3d7165784c663bb</anchor>
      <arglist>(Args... args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::scalar_conversion::FromDoubleTraits</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_from_double_traits.html</filename>
    <member kind="typedef">
      <type>typename std::bool_constant&lt; std::is_same_v&lt; U, double &gt; &gt;</type>
      <name>supported</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_from_double_traits.html</anchorfile>
      <anchor>ada71661baddc01a12a0ca7a6a70d9c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::GenerateStringOptions</name>
    <filename>structmaliput_1_1utility_1_1_generate_string_options.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>include_type_labels</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>a3833a25e55298c985fabdc2fd6cd6f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_road_geometry_id</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>a03e4f9aa01b1c84a6a502c80d9b4b511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_junction_ids</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>ab7ca2ec213e95bbdb2cd3bbdb2329530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_segment_ids</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>a74d19280ba572f14fdb1e533135b5844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_lane_ids</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>aa251275f0c8f5fb7b4ca2541763f2fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>include_lane_details</name>
      <anchorfile>structmaliput_1_1utility_1_1_generate_string_options.html</anchorfile>
      <anchor>aefac6a6b2e99e2bfa5a0e65ac2747e4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::GeoFace</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</filename>
    <member kind="function">
      <type></type>
      <name>GeoFace</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</anchorfile>
      <anchor>a9c3a92eb6cdcfc747f307f9ea3436502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoFace</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</anchorfile>
      <anchor>ad7f5080f5a117c261601125d6cd39b02</anchor>
      <arglist>(const std::vector&lt; GeoVertex &gt; &amp;vertices, const std::vector&lt; GeoNormal &gt; &amp;normals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_vn</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</anchorfile>
      <anchor>a521cfb3264f4d9d8ab2548a2efaf3320</anchor>
      <arglist>(const GeoVertex &amp;vertex, const GeoNormal &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeoVertex &gt; &amp;</type>
      <name>vertices</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</anchorfile>
      <anchor>ade3258bcdd007060177a17c4720555a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeoNormal &gt; &amp;</type>
      <name>normals</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_face.html</anchorfile>
      <anchor>a644a22752273c35e6615698865935be7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::GeoMesh</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</filename>
    <member kind="function">
      <type></type>
      <name>GeoMesh</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>ac224f0d3a0fe0b0889bdaa12c0f18a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PushFace</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a203102ba6bf0ef1a3fc6d491944e8193</anchor>
      <arglist>(const GeoFace &amp;inertial_face)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddFacesFrom</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a515c88f9fdc30c97f2096fdf80c321d2</anchor>
      <arglist>(const GeoMesh &amp;other_mesh)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int &gt;</type>
      <name>EmitObj</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a514b19851bbeef06b176a0ecf043944f</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;material, int precision, const api::InertialPosition &amp;origin, int vertex_index_offset, int normal_index_offset) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const GeoVertex * &gt; &amp;</type>
      <name>vertices</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a4f360e9375800012bd042e69fe317e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const GeoNormal * &gt; &amp;</type>
      <name>normals</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a74207a21080d6aa13e8ce38df74aa5b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IndexFace &gt; &amp;</type>
      <name>faces</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a49dd84b77bf843f4e60c9135df2e5453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a319e621fc359dd8daad48247f95b12fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_normals</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a6bb4a1ded232b6392cdc7cff1b8e9a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GeoVertex &amp;</type>
      <name>get_vertex</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a8d003c56a06c15c1c20624f716035086</anchor>
      <arglist>(int vi) const</arglist>
    </member>
    <member kind="function">
      <type>const GeoNormal &amp;</type>
      <name>get_normal</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_mesh.html</anchorfile>
      <anchor>a6ff895726c11e55f82f0f441a45668bd</anchor>
      <arglist>(int ni) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::GeoNormal</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</filename>
    <class kind="struct">maliput::utility::mesh::GeoNormal::Equiv</class>
    <member kind="typedef">
      <type>maliput::common::DefaultHash</type>
      <name>Hash</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</anchorfile>
      <anchor>a87f54e3612945c7fe1a61f9da3030a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoNormal</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</anchorfile>
      <anchor>ad503f15f0988c31170edb8cb443fd399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoNormal</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</anchorfile>
      <anchor>a13375640b248541b8995582d991a34b6</anchor>
      <arglist>(const api::InertialPosition &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>const api::InertialPosition &amp;</type>
      <name>n</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</anchorfile>
      <anchor>a46e1bcb563c65054e876f17a98886c2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_normal.html</anchorfile>
      <anchor>a0d9eac56f6bf0d31ad1e5c5a111470bc</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const GeoNormal &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::GeoVertex</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</filename>
    <class kind="struct">maliput::utility::mesh::GeoVertex::Equiv</class>
    <member kind="typedef">
      <type>maliput::common::DefaultHash</type>
      <name>Hash</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</anchorfile>
      <anchor>a87f54e3612945c7fe1a61f9da3030a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoVertex</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</anchorfile>
      <anchor>a156c7ab497ef02eb1e2ad3805940df4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoVertex</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</anchorfile>
      <anchor>a0bf9e45f17245e9cab8b5242a0942bde</anchor>
      <arglist>(const api::InertialPosition &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const api::InertialPosition &amp;</type>
      <name>v</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</anchorfile>
      <anchor>a2b2d5bbcee19e3a2f0432609e1dc27d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_geo_vertex.html</anchorfile>
      <anchor>a24300d979abdf2b0b8d61956deedac72</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const GeoVertex &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::api::rules::UniqueBulbGroupId &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_group_id_01_4.html</filename>
    <base>maliput::common::uhash</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::api::rules::UniqueBulbId &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_id_01_4.html</filename>
    <base>maliput::common::uhash</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::api::TypeSpecificIdentifier&lt; T &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1api_1_1_type_specific_identifier_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>maliput::common::uhash</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::api::UniqueId &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1api_1_1_unique_id_01_4.html</filename>
    <base>maliput::common::uhash</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::drake::Identifier&lt; Tag &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1drake_1_1_identifier_3_01_tag_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>maliput::drake::uhash</base>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; maliput::drake::TypeSafeIndex&lt; Tag &gt; &gt;</name>
    <filename>structstd_1_1hash_3_01maliput_1_1drake_1_1_type_safe_index_3_01_tag_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>maliput::drake::uhash</base>
  </compound>
  <compound kind="class">
    <name>maliput::api::HBounds</name>
    <filename>classmaliput_1_1api_1_1_h_bounds.html</filename>
    <member kind="function">
      <type></type>
      <name>HBounds</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>aa7678f2465b542ad6051e1b80f93d2cf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HBounds</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>a2da0a218e9834891de5cb3e5080f5fa8</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>a74ad3cfdc000a999ae2d456fe3ec3418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_min</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>ac21dffdc86052847014c3a19c08a3759</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>ae10f649a540c212781c2d0a4c7385eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classmaliput_1_1api_1_1_h_bounds.html</anchorfile>
      <anchor>a2b07dcd33fdf62555398c5a587035999</anchor>
      <arglist>(double max)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::HermitianDenseOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::StepwiseDenseOutput</base>
    <class kind="class">maliput::drake::systems::HermitianDenseOutput::IntegrationStep</class>
    <member kind="function">
      <type></type>
      <name>HermitianDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a63d1921bbf3cd0f2b2a74dcb35e1c989</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HermitianDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a89254cb7b16ec322ca3bb358823a66fe</anchor>
      <arglist>(const trajectories::PiecewisePolynomial&lt; T &gt; &amp;trajectory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Update</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a66a2626184670ebcb8c1d1460a1278f6</anchor>
      <arglist>(IntegrationStep step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Rollback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>aed04b7e97da1d4a8f905bea32e3dba0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Consolidate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a1cf328ae201f839c19f23ef9e8354502</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VectorX&lt; T &gt;</type>
      <name>DoEvaluate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a3ee4672a4597cc60597444085106fff9</anchor>
      <arglist>(const T &amp;t) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>DoEvaluateNth</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>ac9cc76174728c9aca42e73ffa84944d5</anchor>
      <arglist>(const T &amp;t, const int n) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>do_is_empty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>ac083345d14acf38ae166338ca84b3759</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>do_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a391a65a7d2b4f5059ef524ac3a9b97e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>do_end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>aa9bde78de5e70d1642794ce746520155</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>do_start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output.html</anchorfile>
      <anchor>a92930061483d0cfcd3609603e34cc7b9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::Identifier</name>
    <filename>classmaliput_1_1drake_1_1_identifier.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a6f186fd19e7abd111fcb3c1446175220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ad945f7a3cc39caafc0527fcf2f7d4a46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a424e4bc2112c2f23ca3015ae6a35360e</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a0093b69f6226e8b6a60500c794853ede</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ae1947275fb04e36d9eae9372158af126</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same_as_valid_id</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a9a7209945e46c82c1e361392a8f87e68</anchor>
      <arglist>(Identifier valid_id) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Identifier</type>
      <name>get_new_id</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a875fb8cf881e4660633619843c7edd0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ab2e2f80bc59756bcdb53579e65e40837</anchor>
      <arglist>(int64_t val)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>af0531ebb4dfb5e29a77219d184127d37</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const Identifier &amp;i) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a6f77603aea6d719b71744d902e66a84d</anchor>
      <arglist>(std::ostream &amp;out, const Identifier&lt; Tag &gt; &amp;id)</arglist>
    </member>
    <docanchor file="classmaliput_1_1drake_1_1_identifier.html">TypeSafeIndexVsIndentifier</docanchor>
  </compound>
  <compound kind="class">
    <name>Identifier&lt; class SystemIdTag &gt;</name>
    <filename>classmaliput_1_1drake_1_1_identifier.html</filename>
    <member kind="function">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a6f186fd19e7abd111fcb3c1446175220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ad945f7a3cc39caafc0527fcf2f7d4a46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a424e4bc2112c2f23ca3015ae6a35360e</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a0093b69f6226e8b6a60500c794853ede</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ae1947275fb04e36d9eae9372158af126</anchor>
      <arglist>(Identifier other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same_as_valid_id</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a9a7209945e46c82c1e361392a8f87e68</anchor>
      <arglist>(Identifier valid_id) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Identifier</type>
      <name>get_new_id</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a875fb8cf881e4660633619843c7edd0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Identifier</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>ab2e2f80bc59756bcdb53579e65e40837</anchor>
      <arglist>(int64_t val)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>af0531ebb4dfb5e29a77219d184127d37</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const Identifier &amp;i) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_identifier.html</anchorfile>
      <anchor>a6f77603aea6d719b71744d902e66a84d</anchor>
      <arglist>(std::ostream &amp;out, const Identifier&lt; class SystemIdTag &gt; &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::RoadGeometry::IdIndex</name>
    <filename>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>ad1e50c1a4d6e6a9880c624d371abb09e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Lane *</type>
      <name>GetLane</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>aa2de7296fba895a18b91321e7c2463ec</anchor>
      <arglist>(const LaneId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; LaneId, const Lane * &gt; &amp;</type>
      <name>GetLanes</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>adfa0ae7e84918a458235a61d8d2328fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment *</type>
      <name>GetSegment</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>ab5c1017f270fffd0d9a8cae5ce523e50</anchor>
      <arglist>(const SegmentId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const Junction *</type>
      <name>GetJunction</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>aaac92efabd328b903465f66fdb4494b1</anchor>
      <arglist>(const JunctionId &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const BranchPoint *</type>
      <name>GetBranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>ae218634cfe9138f854272c0d0ddbe04b</anchor>
      <arglist>(const BranchPointId &amp;id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry_1_1_id_index.html</anchorfile>
      <anchor>ac56ca4695899b873b07052d3227d9880</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::IndexFace</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_index_face.html</filename>
    <class kind="struct">maliput::utility::mesh::IndexFace::Vertex</class>
    <member kind="function">
      <type>void</type>
      <name>push_vertex</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_index_face.html</anchorfile>
      <anchor>a963e65e2816c85545df4f5a09f5f845e</anchor>
      <arglist>(int vertex_index, int normal_index)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vertex &gt; &amp;</type>
      <name>vertices</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_index_face.html</anchorfile>
      <anchor>a7b6567f154b09d06256a191c773080bb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::InertialPosition</name>
    <filename>classmaliput_1_1api_1_1_inertial_position.html</filename>
    <member kind="function">
      <type></type>
      <name>InertialPosition</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>abf01b37c613f711e32196dda3b9b82d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InertialPosition</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>ad040cc674cbc8d1f1c4a8b5ea94ec324</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>xyz</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a804a5ee371457c848f57838ff18d7644</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_xyz</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>ac2a254b83de7d0c1d08f967fa305115a</anchor>
      <arglist>(const math::Vector3 &amp;xyz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InertialPosition</type>
      <name>FromXyz</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>abc80c762edd37054fae4202411a7e630</anchor>
      <arglist>(const math::Vector3 &amp;xyz)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a833e1cf314b7b7a5537b2b6a56fee6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>aa97527d9de194f5227bef2e9fecbc26d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>aca424ddaf2902c1cde483f37813d4278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_y</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>abbc9f19c6ed5de1b914ada0af080f986</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>ae7bc7213001e326be4d4eb2d8a035c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_z</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a00727089d68cdce27c4b62a88d82644c</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a80401d480f15e1418a3274a2b2b51649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>ab0a2e1166f24d03f44021d7d01234fc8</anchor>
      <arglist>(const InertialPosition &amp;inertial_position) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a8ac81ad895ad558a02b79ef000081797</anchor>
      <arglist>(const InertialPosition &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a9c67a7baaf1b9a337003e404d83fc854</anchor>
      <arglist>(const InertialPosition &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a2be5dd25d5be84c87b678a6d635a8ffa</anchor>
      <arglist>(const InertialPosition &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a27f6d9b943938dae24c67751d79ce1cc</anchor>
      <arglist>(const InertialPosition &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>aebb5e3dcecad4cf82cf2743921f99f46</anchor>
      <arglist>(double rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend InertialPosition</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1api_1_1_inertial_position.html</anchorfile>
      <anchor>a9f75f59c7af52fce3725194d8ccd2201</anchor>
      <arglist>(double lhs, const InertialPosition &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::InitialValueProblem</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</filename>
    <templarg></templarg>
    <class kind="struct">maliput::drake::systems::InitialValueProblem::OdeContext</class>
    <member kind="typedef">
      <type>std::function&lt; VectorX&lt; T &gt;(const T &amp;t, const VectorX&lt; T &gt; &amp;x, const VectorX&lt; T &gt; &amp;k)&gt;</type>
      <name>OdeFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>afb82099555a08ddfc85d8565f7d2b434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a53c93436e2449017ba5a65ce50373500</anchor>
      <arglist>(InitialValueProblem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InitialValueProblem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a1eade0b0488e3a077f74007ee7b8700e</anchor>
      <arglist>(const OdeFunction &amp;ode_function, const OdeContext &amp;default_values)</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>Solve</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a70e2432f9f994e36a37932968eebe09a</anchor>
      <arglist>(const T &amp;tf, const OdeContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DenseOutput&lt; T &gt; &gt;</type>
      <name>DenseSolve</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a083c20900ef4e361970a0e3ce1f609b3</anchor>
      <arglist>(const T &amp;tf, const OdeContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>Integrator *</type>
      <name>reset_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>aaf92f89ed3fb6ea7acde795d33645a3c</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>adbc3bf152afe75736c6b8b3ecf8cd65e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>af7c4ee8378a24e575a176dfb7d308ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>kDefaultAccuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a35ff185e17772e89c9353aa86ef63c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>kInitialStepSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a65a1dfc9f24c0d2e21e9cfcdf3565ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>kMaxStepSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_initial_value_problem.html</anchorfile>
      <anchor>a3ca174f651b0bd1cabc94d7245114aba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::InputPort</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_input_port.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::InputPortBase</base>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a4ef25e30496b0c4fe87de7614849a67e</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>afc7d44a180994ec2ed83f96f5c3cdff4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a9c65058916abfe330ffe988e261bfe81</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a257a00b7b8215f93499e0ae111e66765</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>FixedInputPortValue &amp;</type>
      <name>FixValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>ab285168d3a19d8ed367e11053aec79c3</anchor>
      <arglist>(Context&lt; T &gt; *context, const ValueType &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a5536b94a4642fa4cf47164437dc66ae8</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const System&lt; T &gt; &amp;</type>
      <name>get_system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a5c403016877fd5f6291208aeb9a8063c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InputPortIndex</type>
      <name>get_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a3fbc75214d2c4d8dbbbcc14a6e42194c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; RandomDistribution &gt;</type>
      <name>get_random_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>adc91200b03493b30470dba23fff30a72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_random</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>ae977b5e71b96f702adfb99b4f862df43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PortDataType</type>
      <name>get_data_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a2d903c43489b2f5bd6e830a7bacb9bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFullDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>aec11c25e1727cfb34267f023c55523b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>internal::FrameworkFactory</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port.html</anchorfile>
      <anchor>aec09700393c1247c681b270e72729bce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::InputPortBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</filename>
    <base>maliput::drake::systems::PortBase</base>
    <member kind="function">
      <type></type>
      <name>~InputPortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a4e04dc244638d350d97b3e3da4e12f96</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>InputPortIndex</type>
      <name>get_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a3fbc75214d2c4d8dbbbcc14a6e42194c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_random</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>ae977b5e71b96f702adfb99b4f862df43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; RandomDistribution &gt;</type>
      <name>get_random_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>adc91200b03493b30470dba23fff30a72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PortDataType</type>
      <name>get_data_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a2d903c43489b2f5bd6e830a7bacb9bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFullDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>aec11c25e1727cfb34267f023c55523b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::function&lt; const AbstractValue *(const ContextBase &amp;)&gt;</type>
      <name>EvalAbstractCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a7f8954776b80d1be380b0ef18b39fcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputPortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>a141d408cf4695fe3727784ac88c3a501</anchor>
      <arglist>(internal::SystemMessageInterface *owning_system, internal::SystemId owning_system_id, std::string name, InputPortIndex index, DependencyTicket ticket, PortDataType data_type, int size, const std::optional&lt; RandomDistribution &gt; &amp;random_type, EvalAbstractCallback eval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractValue &amp;</type>
      <name>DoEvalRequired</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>abe6bb4b3df7bb5a5f2415827f7098fdc</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractValue *</type>
      <name>DoEvalOptional</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>af6dca4e6beb6a40b56f25911cf6261db</anchor>
      <arglist>(const ContextBase &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowRequiredMissing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_input_port_base.html</anchorfile>
      <anchor>ad421365c1e90cb806365432ec9a1bbbe</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::AntiderivativeFunction::IntegrableFunctionContext</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_antiderivative_function_1_1_integrable_function_context.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegrableFunctionContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_antiderivative_function_1_1_integrable_function_context.html</anchorfile>
      <anchor>ac889e7a98cdd339004f5997d60da4304</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegrableFunctionContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_antiderivative_function_1_1_integrable_function_context.html</anchorfile>
      <anchor>a679aaa175c31a52db8c054ce5387f50b</anchor>
      <arglist>(const std::optional&lt; T &gt; &amp;v_in, const std::optional&lt; VectorX&lt; T &gt;&gt; &amp;k_in)</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>v</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_antiderivative_function_1_1_integrable_function_context.html</anchorfile>
      <anchor>a4ea421bf7af0092fa62093e57aa8ef0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; VectorX&lt; T &gt; &gt;</type>
      <name>k</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_antiderivative_function_1_1_integrable_function_context.html</anchorfile>
      <anchor>ab853a3a6d8692d0994a854ad92b6ab3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::HermitianDenseOutput::IntegrationStep</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegrationStep</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>afe1e006a0e64d51de9749f7b25fc54ec</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegrationStep</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>a18e8629721fba72c13e41ff893676906</anchor>
      <arglist>(const T &amp;initial_time, MatrixX&lt; T &gt; initial_state, MatrixX&lt; T &gt; initial_state_derivative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Extend</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>a4d7d8d4e3beb9d17cfe9886e62d4c5c9</anchor>
      <arglist>(const T &amp;time, MatrixX&lt; T &gt; state, MatrixX&lt; T &gt; state_derivative)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>ace0ac0b974686b7e2c00fd22912bceeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>ad6c6c44f9070bc963b88512fbab24d8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; T &gt; &amp;</type>
      <name>get_times</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>ad3f95df0363bb1a218590e8acc4c0233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; MatrixX&lt; T &gt; &gt; &amp;</type>
      <name>get_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>ab3c38718aad98cf840dd96eacd915ec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; MatrixX&lt; T &gt; &gt; &amp;</type>
      <name>get_state_derivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_hermitian_dense_output_1_1_integration_step.html</anchorfile>
      <anchor>a85eb5d3f00fb3e427ac30a4256bff0f1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::IntegratorBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</filename>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>StepResult</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedPublishTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a1eb5c205e3572ba9946f3c86f093c845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedZeroCrossing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a1d1f7136371fa0489571cddeb08084e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a804060ac669eb47e5d384d3800e59d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTimeHasAdvanced</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a8d552f806d347dcd4031fbce86195737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedBoundaryTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9ab50d451e0bcc5385a4bdfd6b3bf5482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedStepLimit</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a7ea4dacf674c208f87e90fa976d0829f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedPublishTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a1eb5c205e3572ba9946f3c86f093c845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedZeroCrossing</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a1d1f7136371fa0489571cddeb08084e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a804060ac669eb47e5d384d3800e59d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTimeHasAdvanced</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a8d552f806d347dcd4031fbce86195737</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedBoundaryTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9ab50d451e0bcc5385a4bdfd6b3bf5482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kReachedStepLimit</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95ae527571e3f25c4415b93d12cb0ad9a7ea4dacf674c208f87e90fa976d0829f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegratorBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a447030379c5091a36af0c158a0945c6e</anchor>
      <arglist>(const System&lt; T &gt; &amp;system, Context&lt; T &gt; *context=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntegratorBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>af88b1b96e061ad4e07a71561bf95fad4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_target_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a6dbb07017a30541d06b2b597d1e4f30f</anchor>
      <arglist>(double accuracy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_target_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a630ba1d30cec20bb83e5a678945ffaa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_accuracy_in_use</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a4ecfd0a8cbb76b7f43921e284b2a6980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supports_error_estimation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5fa66573f5abb1dc153098d2920c32b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_error_estimate_order</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ab09a2cc2db0a776ca7bb11c8d8fe4831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; *</type>
      <name>get_error_estimate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a91c0da3a86a705e44833ec423e513971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_ideal_next_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>aa06585bb16e4b92bb3c8f3c005fb6071</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fixed_step_mode</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a53f8dced020f4fa9c3ccfc2eb6982a86</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_fixed_step_mode</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae35b01e013bbfa64d9cdccfa01f034fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>get_generalized_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a1286e54624e71a19fa28e3564d2d9c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; Eigen::VectorXd &gt;</type>
      <name>get_mutable_generalized_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a1a94ee74ec3449ce6a3e4601d7459e4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>get_misc_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac3ccdda880715d682c035e1264441303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; Eigen::VectorXd &gt;</type>
      <name>get_mutable_misc_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a80ee60f8a8a649e684340a9d19133098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_initial_step_size_target</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>aaa818a52a133131208f51b1c0a3a906c</anchor>
      <arglist>(const T &amp;step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_initial_step_size_target</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac19919024e6d4d17453e610f57e53eba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae878ce4cdab7a01165423d8a902df452</anchor>
      <arglist>(const T &amp;max_step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_maximum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0dafbc057f2a5a4828813e7ea5e3f99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_stretch_factor</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ab693dd7dd1da02154fc0f0ff6ef20692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_requested_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0f186af10e0fc1fc8f32fafa4fed7ba7</anchor>
      <arglist>(const T &amp;min_step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_requested_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a59add268d553fd546ffb04eca70b693b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_minimum_step_size_violation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a78773e63a07381351e18380040f5fc13</anchor>
      <arglist>(bool throws)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_throw_on_minimum_step_size_violation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5b89a6384ec3f94a33c8fd2f4c384369</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_working_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a47399e48a6a661ce1b8252d86a305b54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a372de693ad40b3f42839c8ec6ac845f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a98b1050f09da390896f964fb7a892391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StepResult</type>
      <name>IntegrateNoFurtherThanTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a454bf331ab3d5134a0e119ccc8f0e5ce</anchor>
      <arglist>(const T &amp;publish_time, const T &amp;update_time, const T &amp;boundary_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IntegrateWithMultipleStepsToTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>acb2ebec0fff763d592464afb49bffe13</anchor>
      <arglist>(const T &amp;t_final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IntegrateWithSingleFixedStepToTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a33ee182a7a34894a888a3bcd3dfd5674</anchor>
      <arglist>(const T &amp;t_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetStatistics</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a64a01ac56f8a0086cc6ed335ee9e5caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_substep_failures</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>afa1597c69b7f633624a3693142ad3f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_step_shrinkages_from_substep_failures</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a64333e8ed51bb6a29af25c2c4da153aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_step_shrinkages_from_error_control</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a2b588edb71f956edad8a88d5c8b86479</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_derivative_evaluations</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac3152b858f89491817273d05fa518289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_actual_initial_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0ada2c620af585fefd269bbf0a7ff1e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_smallest_adapted_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a245008509fc19d0282b2dfe9171740f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_largest_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a4d2e467101cf8c82f53ee1688227cf16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_steps_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a215741958afe19af17a62470f883878b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_derivative_evaluations</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a644f18faa19a24bd106100bd575e1934</anchor>
      <arglist>(double evals)</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>get_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0ca73e48fb4c24fcf1893459f57eb86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; *</type>
      <name>get_mutable_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a2d03f8fbbd6a4bce39d8fed752a5d446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae9ec42d998ad39014c3dc64c50cfbc4d</anchor>
      <arglist>(Context&lt; T &gt; *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_target_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a6dbb07017a30541d06b2b597d1e4f30f</anchor>
      <arglist>(double accuracy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_target_accuracy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a630ba1d30cec20bb83e5a678945ffaa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_accuracy_in_use</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a4ecfd0a8cbb76b7f43921e284b2a6980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supports_error_estimation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5fa66573f5abb1dc153098d2920c32b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_error_estimate_order</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ab09a2cc2db0a776ca7bb11c8d8fe4831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; *</type>
      <name>get_error_estimate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a91c0da3a86a705e44833ec423e513971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_ideal_next_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>aa06585bb16e4b92bb3c8f3c005fb6071</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fixed_step_mode</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a53f8dced020f4fa9c3ccfc2eb6982a86</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_fixed_step_mode</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae35b01e013bbfa64d9cdccfa01f034fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>get_generalized_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a1286e54624e71a19fa28e3564d2d9c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; Eigen::VectorXd &gt;</type>
      <name>get_mutable_generalized_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a1a94ee74ec3449ce6a3e4601d7459e4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>get_misc_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac3ccdda880715d682c035e1264441303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; Eigen::VectorXd &gt;</type>
      <name>get_mutable_misc_state_weight_vector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a80ee60f8a8a649e684340a9d19133098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>request_initial_step_size_target</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>aaa818a52a133131208f51b1c0a3a906c</anchor>
      <arglist>(const T &amp;step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_initial_step_size_target</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac19919024e6d4d17453e610f57e53eba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae878ce4cdab7a01165423d8a902df452</anchor>
      <arglist>(const T &amp;max_step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_maximum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0dafbc057f2a5a4828813e7ea5e3f99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_stretch_factor</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ab693dd7dd1da02154fc0f0ff6ef20692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_requested_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0f186af10e0fc1fc8f32fafa4fed7ba7</anchor>
      <arglist>(const T &amp;min_step_size)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_requested_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a59add268d553fd546ffb04eca70b693b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_throw_on_minimum_step_size_violation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a78773e63a07381351e18380040f5fc13</anchor>
      <arglist>(bool throws)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_throw_on_minimum_step_size_violation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5b89a6384ec3f94a33c8fd2f4c384369</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_working_minimum_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a47399e48a6a661ce1b8252d86a305b54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reset</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a372de693ad40b3f42839c8ec6ac845f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a98b1050f09da390896f964fb7a892391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StepResult</type>
      <name>IntegrateNoFurtherThanTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a454bf331ab3d5134a0e119ccc8f0e5ce</anchor>
      <arglist>(const T &amp;publish_time, const T &amp;update_time, const T &amp;boundary_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>IntegrateWithMultipleStepsToTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>acb2ebec0fff763d592464afb49bffe13</anchor>
      <arglist>(const T &amp;t_final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IntegrateWithSingleFixedStepToTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a33ee182a7a34894a888a3bcd3dfd5674</anchor>
      <arglist>(const T &amp;t_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ResetStatistics</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a64a01ac56f8a0086cc6ed335ee9e5caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_substep_failures</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>afa1597c69b7f633624a3693142ad3f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_step_shrinkages_from_substep_failures</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a64333e8ed51bb6a29af25c2c4da153aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_step_shrinkages_from_error_control</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a2b588edb71f956edad8a88d5c8b86479</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_derivative_evaluations</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac3152b858f89491817273d05fa518289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_actual_initial_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0ada2c620af585fefd269bbf0a7ff1e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_smallest_adapted_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a245008509fc19d0282b2dfe9171740f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_largest_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a4d2e467101cf8c82f53ee1688227cf16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_num_steps_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a215741958afe19af17a62470f883878b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_derivative_evaluations</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a644f18faa19a24bd106100bd575e1934</anchor>
      <arglist>(double evals)</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>get_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0ca73e48fb4c24fcf1893459f57eb86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; *</type>
      <name>get_mutable_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a2d03f8fbbd6a4bce39d8fed752a5d446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_context</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae9ec42d998ad39014c3dc64c50cfbc4d</anchor>
      <arglist>(Context&lt; T &gt; *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartDenseIntegration</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a0cdd4796b7f98a09da058b9764f13b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const trajectories::PiecewisePolynomial&lt; T &gt; *</type>
      <name>get_dense_output</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a3c547286e5a0cbdbc3684b590638361d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; trajectories::PiecewisePolynomial&lt; T &gt; &gt;</type>
      <name>StopDenseIntegration</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>af5801cb8f02c7ae4aaffff94972ad324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const System&lt; T &gt; &amp;</type>
      <name>get_system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5c403016877fd5f6291208aeb9a8063c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a7a2108348656c73efe1d72702c96d5c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_previous_integration_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a9442cfd0320da3227579970a3ea0b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoResetStatistics</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac5f5259be2ac9352879b53f559cbd567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>EvalTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a7eb69a2e22eecf59ffc281d1075710b7</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ContinuousState&lt; U &gt; &amp;</type>
      <name>EvalTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac1c7b89b9ff697cfe9b208a56c98abb1</anchor>
      <arglist>(const System&lt; U &gt; &amp;system, const Context&lt; U &gt; &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_accuracy_in_use</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a5296d2467ea109300a687233eb159a46</anchor>
      <arglist>(double accuracy)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>StepOnceErrorControlledAtMost</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a818099c976f6b62d04c9c5d525556a9d</anchor>
      <arglist>(const T &amp;h_max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>CalcStateChangeNorm</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a251c75be3ec4f5b14aeaf5ca2467416f</anchor>
      <arglist>(const ContinuousState&lt; T &gt; &amp;dx_state) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::pair&lt; bool, T &gt;</type>
      <name>CalcAdjustedStepSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a673eb33420503190006ca91d01ec779e</anchor>
      <arglist>(const T &amp;err, const T &amp;attempted_step_size, bool *at_minimum_step_size) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoInitialize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ae1949ad54a9dc1dc95f632a066aa12e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoReset</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a22d9215849b8b5dfbdfce1cf00ce3221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>trajectories::PiecewisePolynomial&lt; T &gt; *</type>
      <name>get_mutable_dense_output</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a4bd52deed03b4782ed01dd96f8acca6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>DoStep</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a896ef63038c6eb979ed9b5e3fbc4a16f</anchor>
      <arglist>(const T &amp;h)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>DoDenseStep</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ad197f82788b0f33f15e71ec5a261be99</anchor>
      <arglist>(const T &amp;h)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousState&lt; T &gt; *</type>
      <name>get_mutable_error_estimate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a95119340ec2f55ffe46e52252ef45855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_actual_initial_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>afa5f6af023ede03e36fd44a079f7440d</anchor>
      <arglist>(const T &amp;h)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_smallest_adapted_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>a2cd5795eec65555263f9b804260b6dcd</anchor>
      <arglist>(const T &amp;h)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_largest_step_size_taken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ab0fd2440d87169f64766fee57612d577</anchor>
      <arglist>(const T &amp;h)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_ideal_next_step_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_integrator_base.html</anchorfile>
      <anchor>ac04da433607f913e10ee9d485d675fb1</anchor>
      <arglist>(const T &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::Intersection</name>
    <filename>classmaliput_1_1_intersection.html</filename>
    <base>maliput::api::Intersection</base>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>classmaliput_1_1_intersection.html</anchorfile>
      <anchor>a3e74eea120193e890b3d27e8fcba5417</anchor>
      <arglist>(const Id &amp;id, const std::vector&lt; api::LaneSRange &gt; &amp;region, const api::rules::PhaseRing &amp;ring, ManualPhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Intersection</name>
      <anchorfile>classmaliput_1_1_intersection.html</anchorfile>
      <anchor>abd1ccc56370f679181137f07fac0f04e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; api::rules::PhaseProvider::Result &gt;</type>
      <name>Phase</name>
      <anchorfile>classmaliput_1_1_intersection.html</anchorfile>
      <anchor>a8ddce4c4c76cb5d4670651e09f2d80d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPhase</name>
      <anchorfile>classmaliput_1_1_intersection.html</anchorfile>
      <anchor>a74a041e3e4dc79e806c8cbddd9e569fc</anchor>
      <arglist>(const api::rules::Phase::Id &amp;phase_id, const std::optional&lt; api::rules::Phase::Id &gt; &amp;next_phase=std::nullopt, const std::optional&lt; double &gt; &amp;duration_until=std::nullopt) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::Intersection</name>
    <filename>classmaliput_1_1api_1_1_intersection.html</filename>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Intersection &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a12ab024b49acf8831130038bf7ff508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a94aa7c39f4e8c170995ce4b399fbd769</anchor>
      <arglist>(const Id &amp;id, const std::vector&lt; LaneSRange &gt; &amp;region, const rules::PhaseRing &amp;ring)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Intersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>abd1ccc56370f679181137f07fac0f04e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::optional&lt; rules::PhaseProvider::Result &gt;</type>
      <name>Phase</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>afd7a73a5386e7cf200ff265ae00ba792</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetPhase</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a5deaa95fbac0067075d8c79f8a749e40</anchor>
      <arglist>(const api::rules::Phase::Id &amp;phase_id, const std::optional&lt; api::rules::Phase::Id &gt; &amp;next_phase=std::nullopt, const std::optional&lt; double &gt; &amp;duration_until=std::nullopt)=0</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; LaneSRange &gt; &amp;</type>
      <name>region</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a0263196bd7d7e10163a2e2ec9a6ac5ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rules::PhaseRing::Id &amp;</type>
      <name>ring_id</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>adf052cfb21bd773834750efe702deece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; rules::BulbStates &gt;</type>
      <name>bulb_states</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>adc191f81111cfa8c15fb28a1d8847824</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; rules::DiscreteValueRuleStates &gt;</type>
      <name>DiscreteValueRuleStates</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a7fde8d978976c4d8993fc319e0a4c80e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; rules::RuleStates &gt;</type>
      <name>RuleStates</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>abf0bf0d68a440f4791b08aaecbbcd62d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Includes</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a22dc82a6d81d43272b00650e877555e1</anchor>
      <arglist>(const rules::TrafficLight::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Includes</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>ae6f8a392049b420446fcbd09103be5f9</anchor>
      <arglist>(const rules::DiscreteValueRule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Includes</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>ae409c2e9022bf459a46af5b50b1b934e</anchor>
      <arglist>(const rules::RightOfWayRule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Includes</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection.html</anchorfile>
      <anchor>a05c8e4aee971ba77472438f39b826105</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, const RoadGeometry *road_geometry) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::IntersectionBook</name>
    <filename>classmaliput_1_1_intersection_book.html</filename>
    <base>maliput::api::IntersectionBook</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_intersection_book.html</anchorfile>
      <anchor>ae84c8ada3277f76565a16f7d52fc3c7b</anchor>
      <arglist>(IntersectionBook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionBook</name>
      <anchorfile>classmaliput_1_1_intersection_book.html</anchorfile>
      <anchor>a0d791b0939fd23e0ca25522b443a23fc</anchor>
      <arglist>(const api::RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntersectionBook</name>
      <anchorfile>classmaliput_1_1_intersection_book.html</anchorfile>
      <anchor>ade05a11838cee11a6634b04d34d2f7c0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIntersection</name>
      <anchorfile>classmaliput_1_1_intersection_book.html</anchorfile>
      <anchor>a2e57afefc075b6f5e2b517ac1683ce8a</anchor>
      <arglist>(std::unique_ptr&lt; api::Intersection &gt; intersection)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; api::Intersection * &gt;</type>
      <name>FindIntersections</name>
      <anchorfile>classmaliput_1_1_intersection_book.html</anchorfile>
      <anchor>a9eb6fc4b2de20d67d9a62fb81a0865f0</anchor>
      <arglist>(const std::vector&lt; api::LaneSRange &gt; &amp;region, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::IntersectionBook</name>
    <filename>classmaliput_1_1api_1_1_intersection_book.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>ae84c8ada3277f76565a16f7d52fc3c7b</anchor>
      <arglist>(IntersectionBook)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntersectionBook</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>a367bbbc791bd9b39b817ae8da3fb5375</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Intersection * &gt;</type>
      <name>GetIntersections</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>ae65f6b60556d95a4ed031121e0eeb12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Intersection *</type>
      <name>GetIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>a3c597b80bf6f990d6c96d4fc779f4e35</anchor>
      <arglist>(const Intersection::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>Intersection *</type>
      <name>FindIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>abfef1d8de6c36ddb8ae43596f559fa2a</anchor>
      <arglist>(const rules::TrafficLight::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>Intersection *</type>
      <name>FindIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>a4c9e6f25c23929b4738c5b5b2fbe50a8</anchor>
      <arglist>(const rules::DiscreteValueRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>Intersection *</type>
      <name>FindIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>a5cb7826676611e4e47e914a84d8c416f</anchor>
      <arglist>(const InertialPosition &amp;inertial_pos)</arglist>
    </member>
    <member kind="function">
      <type>Intersection *</type>
      <name>FindIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>a7a62cfe6c364cd32368f03b13f664c1e</anchor>
      <arglist>(const rules::RightOfWayRule::Id &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntersectionBook</name>
      <anchorfile>classmaliput_1_1api_1_1_intersection_book.html</anchorfile>
      <anchor>ae9fc7972b4bf1e5a40b32387c3109148</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::IntPackHasher</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_int_pack_hasher.html</filename>
    <templarg>Ns</templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::IntPackHasher&lt; N, Ns... &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_int_pack_hasher_3_01_n_00_01_ns_8_8_8_01_4.html</filename>
    <templarg>N</templarg>
    <templarg>Ns</templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_int_pack_hasher_3_01_n_00_01_ns_8_8_8_01_4.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::IntPackHasher&lt;&gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_int_pack_hasher_3_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_int_pack_hasher_3_4.html</anchorfile>
      <anchor>a9ffb875810fab10d43b2fa137a229a67</anchor>
      <arglist>(FNV1aHasher *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::is_eigen_nonvector_of</name>
    <filename>structmaliput_1_1drake_1_1is__eigen__nonvector__of.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::is_eigen_scalar_same</name>
    <filename>structmaliput_1_1drake_1_1is__eigen__scalar__same.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::is_eigen_type</name>
    <filename>structmaliput_1_1drake_1_1is__eigen__type.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::is_eigen_vector</name>
    <filename>structmaliput_1_1drake_1_1is__eigen__vector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::is_eigen_vector_of</name>
    <filename>structmaliput_1_1drake_1_1is__eigen__vector__of.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::api::IsoLaneVelocity</name>
    <filename>structmaliput_1_1api_1_1_iso_lane_velocity.html</filename>
    <member kind="function">
      <type></type>
      <name>IsoLaneVelocity</name>
      <anchorfile>structmaliput_1_1api_1_1_iso_lane_velocity.html</anchorfile>
      <anchor>a10f42953901acfdedb9cabafc069a6f4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IsoLaneVelocity</name>
      <anchorfile>structmaliput_1_1api_1_1_iso_lane_velocity.html</anchorfile>
      <anchor>a445a6260255bb5e14482e2eaa8689a80</anchor>
      <arglist>(double _sigma_v, double _rho_v, double _eta_v)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>sigma_v</name>
      <anchorfile>structmaliput_1_1api_1_1_iso_lane_velocity.html</anchorfile>
      <anchor>a8afd1c855602caaabe7b7a9c75e8268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rho_v</name>
      <anchorfile>structmaliput_1_1api_1_1_iso_lane_velocity.html</anchorfile>
      <anchor>a0b952a5c7316c18689a4ed0d52116e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eta_v</name>
      <anchorfile>structmaliput_1_1api_1_1_iso_lane_velocity.html</anchorfile>
      <anchor>afebcdb204b56a32639d88fa2299526d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::Junction</name>
    <filename>classmaliput_1_1api_1_1_junction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Junction</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>afbe0c68e8aa9429b5169a929fbd482f5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>JunctionId</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>a571e2a8c0915fa04a3d137eb536f28c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RoadGeometry *</type>
      <name>road_geometry</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>aa5b5de3cdefe8ef0d3ffa573f3822d4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_segments</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>a991a687ecbd4d0bf0005c02dfd0048f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment *</type>
      <name>segment</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>a4a403c748b57f55d7474b23cba17e970</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Junction</name>
      <anchorfile>classmaliput_1_1api_1_1_junction.html</anchorfile>
      <anchor>acaad14416565fb4fe2f822422f9ee231</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::Junction</name>
    <filename>classmaliput_1_1geometry__base_1_1_junction.html</filename>
    <base>maliput::api::Junction</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_junction.html</anchorfile>
      <anchor>afaf6c0ab8777693eaf810ec9f9850fb7</anchor>
      <arglist>(Junction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Junction</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_junction.html</anchorfile>
      <anchor>aacb3cda5e3884118837090ff47e7bf5e</anchor>
      <arglist>(const api::JunctionId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AddSegment</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_junction.html</anchorfile>
      <anchor>ac3f4ccab5e6fddc051fbfb87cae3bcb0</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; segment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Junction</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_junction.html</anchorfile>
      <anchor>a74b00113cc0a0e9c085c7744177fc623</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AttachToRoadGeometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_junction.html</anchorfile>
      <anchor>abb4fb610362528afc7a6c771d6bb361f</anchor>
      <arglist>(common::Passkey&lt; RoadGeometry &gt;, const api::RoadGeometry *road_geometry, const std::function&lt; void(const api::Segment *)&gt; &amp;segment_indexing_callback, const std::function&lt; void(const api::Lane *)&gt; &amp;lane_indexing_callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::KDTree</name>
    <filename>classmaliput_1_1math_1_1_k_d_tree.html</filename>
    <templarg></templarg>
    <templarg>Dimension</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>KDTreeBase&lt; KDTree&lt; Coordinate, Dimension, BoundingRegion&lt; Coordinate &gt;, details::SquaredDistance&lt; Coordinate, Dimension &gt;, details::NodeCmp&lt; Dimension &gt; &gt;, Coordinate, Dimension, BoundingRegion&lt; Coordinate &gt;, details::SquaredDistance&lt; Coordinate, Dimension &gt;, details::NodeCmp&lt; Dimension &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree.html</anchorfile>
      <anchor>ab9e7968ccd497e55de6853bb72bfe7d6</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTree</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree.html</anchorfile>
      <anchor>a5c044659ab0ac54247bbf22f25f8f8e9</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::KDTree3D</name>
    <filename>classmaliput_1_1math_1_1_k_d_tree3_d.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>KDTreeBase&lt; KDTree3D&lt; Coordinate, details::SquaredDistance&lt; Coordinate, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;, Coordinate, 3, AxisAlignedBox, details::SquaredDistance&lt; Coordinate, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>KDTree3D</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>ab5df4d41213346e18a761e1a2fd52227</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTree3D</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>add8720ef73018f0d93161f09de9ca547</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; const Coordinate * &gt;</type>
      <name>RangeSearch</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>ae7eba6bd1134f4e83e7068639aaaa60e</anchor>
      <arglist>(const AxisAlignedBox &amp;region) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDTree3D&lt; MaliputPoint &gt;</name>
    <filename>classmaliput_1_1math_1_1_k_d_tree3_d.html</filename>
    <base>KDTreeBase&lt; KDTree3D&lt; MaliputPoint, details::SquaredDistance&lt; MaliputPoint, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;, MaliputPoint, 3, AxisAlignedBox, details::SquaredDistance&lt; MaliputPoint, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>KDTree3D</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>ab5df4d41213346e18a761e1a2fd52227</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTree3D</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>add8720ef73018f0d93161f09de9ca547</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; const MaliputPoint * &gt;</type>
      <name>RangeSearch</name>
      <anchorfile>classmaliput_1_1math_1_1_k_d_tree3_d.html</anchorfile>
      <anchor>ae7eba6bd1134f4e83e7068639aaaa60e</anchor>
      <arglist>(const AxisAlignedBox &amp;region) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::details::KDTreeBase</name>
    <filename>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Dimension</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>af7af2ef932ea65abff7173f764af211d</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a33e77e8fffc7d667752bcf71940ece47</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a7e768a0c4fde19047d46d84cb4075bc1</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a6bf2c3171ed3c232854d6492a6b2987b</anchor>
      <arglist>(const Coordinate &amp;point, double tolerance) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>details::Node&lt; Coordinate, Region &gt;</type>
      <name>Node</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a64cfc8f86af0ce137dc024c7371887c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>afcd770c31352b49978ae18f84d8ffc0a</anchor>
      <arglist>(const Node *node, const Coordinate &amp;point, std::size_t index, double tolerance, Node *&amp;nearest_neighbour_node, double *nearest_neighbour_distance) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>root_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a0eea8a17e55a35a137fd9628d5dc98d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; Node &gt;</type>
      <name>nodes_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a174e5434b9e00ee65033e2beaf74f22c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDTreeBase&lt; KDTree3D&lt; Coordinate, details::SquaredDistance&lt; Coordinate, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;, Coordinate, 3, AxisAlignedBox, details::SquaredDistance&lt; Coordinate, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;</name>
    <filename>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</filename>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>af7af2ef932ea65abff7173f764af211d</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a33e77e8fffc7d667752bcf71940ece47</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a7e768a0c4fde19047d46d84cb4075bc1</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a6bf2c3171ed3c232854d6492a6b2987b</anchor>
      <arglist>(const Coordinate &amp;point, double tolerance) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>details::Node&lt; Coordinate, AxisAlignedBox &gt;</type>
      <name>Node</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a64cfc8f86af0ce137dc024c7371887c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>afcd770c31352b49978ae18f84d8ffc0a</anchor>
      <arglist>(const Node *node, const Coordinate &amp;point, std::size_t index, double tolerance, Node *&amp;nearest_neighbour_node, double *nearest_neighbour_distance) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>root_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a0eea8a17e55a35a137fd9628d5dc98d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; Node &gt;</type>
      <name>nodes_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a174e5434b9e00ee65033e2beaf74f22c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDTreeBase&lt; KDTree3D&lt; MaliputPoint, details::SquaredDistance&lt; MaliputPoint, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;, MaliputPoint, 3, AxisAlignedBox, details::SquaredDistance&lt; MaliputPoint, 3 &gt;, details::NodeCmp&lt; 3 &gt; &gt;</name>
    <filename>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</filename>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>af7af2ef932ea65abff7173f764af211d</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a33e77e8fffc7d667752bcf71940ece47</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const MaliputPoint &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a7e768a0c4fde19047d46d84cb4075bc1</anchor>
      <arglist>(const MaliputPoint &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>const MaliputPoint &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a6bf2c3171ed3c232854d6492a6b2987b</anchor>
      <arglist>(const MaliputPoint &amp;point, double tolerance) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>details::Node&lt; MaliputPoint, AxisAlignedBox &gt;</type>
      <name>Node</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a64cfc8f86af0ce137dc024c7371887c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>afcd770c31352b49978ae18f84d8ffc0a</anchor>
      <arglist>(const Node *node, const MaliputPoint &amp;point, std::size_t index, double tolerance, Node *&amp;nearest_neighbour_node, double *nearest_neighbour_distance) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>root_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a0eea8a17e55a35a137fd9628d5dc98d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; Node &gt;</type>
      <name>nodes_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a174e5434b9e00ee65033e2beaf74f22c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDTreeBase&lt; KDTree&lt; Coordinate, Dimension, BoundingRegion&lt; Coordinate &gt;, details::SquaredDistance&lt; Coordinate, Dimension &gt;, details::NodeCmp&lt; Dimension &gt; &gt;, Coordinate, Dimension, BoundingRegion&lt; Coordinate &gt;, details::SquaredDistance&lt; Coordinate, Dimension &gt;, details::NodeCmp&lt; Dimension &gt; &gt;</name>
    <filename>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</filename>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>af7af2ef932ea65abff7173f764af211d</anchor>
      <arglist>(Iterator begin, Iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDTreeBase</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a33e77e8fffc7d667752bcf71940ece47</anchor>
      <arglist>(Collection &amp;&amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a7e768a0c4fde19047d46d84cb4075bc1</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a6bf2c3171ed3c232854d6492a6b2987b</anchor>
      <arglist>(const Coordinate &amp;point, double tolerance) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>details::Node&lt; Coordinate, BoundingRegion&lt; Coordinate &gt; &gt;</type>
      <name>Node</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a64cfc8f86af0ce137dc024c7371887c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearest_point</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>afcd770c31352b49978ae18f84d8ffc0a</anchor>
      <arglist>(const Node *node, const Coordinate &amp;point, std::size_t index, double tolerance, Node *&amp;nearest_neighbour_node, double *nearest_neighbour_distance) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>root_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a0eea8a17e55a35a137fd9628d5dc98d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; Node &gt;</type>
      <name>nodes_</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_k_d_tree_base.html</anchorfile>
      <anchor>a174e5434b9e00ee65033e2beaf74f22c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::KDTreeStrategy</name>
    <filename>classmaliput_1_1geometry__base_1_1_k_d_tree_strategy.html</filename>
    <base>maliput::geometry_base::StrategyBase</base>
    <member kind="function">
      <type></type>
      <name>KDTreeStrategy</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_k_d_tree_strategy.html</anchorfile>
      <anchor>af75d0dbac62acde1b161ca7218bbfa37</anchor>
      <arglist>(const api::RoadGeometry *rg, double sampling_step)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KDTreeStrategy</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_k_d_tree_strategy.html</anchorfile>
      <anchor>a45d43e385c1888ba1e0ea2f322a15e6c</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::Lane</name>
    <filename>classmaliput_1_1api_1_1_lane.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Lane</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>aa8bed2c4e2afca75c6a33c5c4018c034</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>LaneId</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ad7ac028203eb2b168bc5b5c534e07fda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Segment *</type>
      <name>segment</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ad8845fec4e26bcdd1b82a171355725db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>acca41811e8aaab0112b987749c0ecb93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Lane *</type>
      <name>to_left</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>af65f9709a7bfb2d8d93cf8b3725a7e52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Lane *</type>
      <name>to_right</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ad7163836bd1e363c44eec492fcdf90a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a80401d480f15e1418a3274a2b2b51649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RBounds</type>
      <name>lane_bounds</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ae752f15836c67feb95eb494e832f62b2</anchor>
      <arglist>(double s) const</arglist>
    </member>
    <member kind="function">
      <type>RBounds</type>
      <name>segment_bounds</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a331f3535227560599f39df75b1c925d1</anchor>
      <arglist>(double s) const</arglist>
    </member>
    <member kind="function">
      <type>HBounds</type>
      <name>elevation_bounds</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a9bd2cab5a5873c0210caa33a1067f85a</anchor>
      <arglist>(double s, double r) const</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>ToInertialPosition</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ac2b4153a3a9bf55d07255331bf0223c2</anchor>
      <arglist>(const LanePosition &amp;lane_pos) const</arglist>
    </member>
    <member kind="function">
      <type>LanePositionResult</type>
      <name>ToLanePosition</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>acda224f66653385e297534edc3e98395</anchor>
      <arglist>(const InertialPosition &amp;inertial_pos) const</arglist>
    </member>
    <member kind="function">
      <type>LanePositionResult</type>
      <name>ToSegmentPosition</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a1c2d12c4d8d739db16f2da6aeaa37bcb</anchor>
      <arglist>(const InertialPosition &amp;inertial_pos) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>GetOrientation</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a906c4381f7140717da253134fcb07c50</anchor>
      <arglist>(const LanePosition &amp;lane_pos) const</arglist>
    </member>
    <member kind="function">
      <type>LanePosition</type>
      <name>EvalMotionDerivatives</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a369426275d47c6d35ce024852330bbe0</anchor>
      <arglist>(const LanePosition &amp;position, const IsoLaneVelocity &amp;velocity) const</arglist>
    </member>
    <member kind="function">
      <type>const BranchPoint *</type>
      <name>GetBranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ad92730c3ece74174d55717f09a2e3e71</anchor>
      <arglist>(const LaneEnd::Which which_end) const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetConfluentBranches</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>ac18dfa3a3eca308f4ba87c10f4212bcf</anchor>
      <arglist>(const LaneEnd::Which which_end) const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEndSet *</type>
      <name>GetOngoingBranches</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>afa33b67de468a61c9986b427fc6ae3c6</anchor>
      <arglist>(const LaneEnd::Which which_end) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; LaneEnd &gt;</type>
      <name>GetDefaultBranch</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a7777f97ac80666f157d04c35edf911ce</anchor>
      <arglist>(const LaneEnd::Which which_end) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a040d47e697181081a37e19396ed8ff5b</anchor>
      <arglist>(const LanePosition &amp;lane_position) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Lane</name>
      <anchorfile>classmaliput_1_1api_1_1_lane.html</anchorfile>
      <anchor>a6a2900f79780efd31f2b29db8d17223f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::Lane</name>
    <filename>classmaliput_1_1geometry__base_1_1_lane.html</filename>
    <base>maliput::api::Lane</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a99b7649e8342fe7c216553e0a8476d77</anchor>
      <arglist>(Lane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lane</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a1aad8d7166ca6dc56865ee932ebcfee6</anchor>
      <arglist>(const api::LaneId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>BranchPoint *</type>
      <name>mutable_start_branch_point</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a31184adf29283175d1a907f4a67269cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BranchPoint *</type>
      <name>mutable_finish_branch_point</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a44b25a4e31d8cd8dcd48bf1ab1c49364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AttachToSegment</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a641be6120d87c39a1713d8d2a2f7cdf0</anchor>
      <arglist>(common::Passkey&lt; Segment &gt;, const api::Segment *segment, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetStartBranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a6d68eac612ca85e7bdf7c1068778ee92</anchor>
      <arglist>(common::Passkey&lt; BranchPoint &gt;, BranchPoint *branch_point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFinishBranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a2959547e5d8983e00e1b88ff19aa2ec1</anchor>
      <arglist>(common::Passkey&lt; BranchPoint &gt;, BranchPoint *branch_point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lane</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane.html</anchorfile>
      <anchor>a0f0303065df0aa69138d691204a97f90</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::LaneEnd</name>
    <filename>structmaliput_1_1api_1_1_lane_end.html</filename>
    <class kind="struct">maliput::api::LaneEnd::StrictOrder</class>
    <member kind="enumeration">
      <type></type>
      <name>Which</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a76832237d5d837232469a6c46f1eeff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kStart</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a76832237d5d837232469a6c46f1eeff2aaf95f6aef1f9f36214053d164ccb5ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFinish</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a76832237d5d837232469a6c46f1eeff2aff577f73e6ea4af10a732b6cb362eb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kStart</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a76832237d5d837232469a6c46f1eeff2aaf95f6aef1f9f36214053d164ccb5ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kFinish</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a76832237d5d837232469a6c46f1eeff2aff577f73e6ea4af10a732b6cb362eb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneEnd</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a35c9505afb68554c0194084d3f4b6c80</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneEnd</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>afd38b6ff3ad84a158d0d33fdf35ce097</anchor>
      <arglist>(const Lane *_lane, Which _end)</arglist>
    </member>
    <member kind="variable">
      <type>const Lane *</type>
      <name>lane</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a7f4404a6c9065d06842311b7308a6cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Which</type>
      <name>end</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end.html</anchorfile>
      <anchor>a23aa4c5b3ea898434ccf593ca47c56b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::LaneEndSet</name>
    <filename>classmaliput_1_1api_1_1_lane_end_set.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LaneEndSet</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_end_set.html</anchorfile>
      <anchor>a46fc620a2191a9f54fe174ce817ff881</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_end_set.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LaneEnd &amp;</type>
      <name>get</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_end_set.html</anchorfile>
      <anchor>a5ec189215248174c2f97eab42f685796</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LaneEndSet</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_end_set.html</anchorfile>
      <anchor>ad30d4a5fc72d62e1309a5f24c63e799a</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::LaneEndSet</name>
    <filename>classmaliput_1_1geometry__base_1_1_lane_end_set.html</filename>
    <base>maliput::api::LaneEndSet</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane_end_set.html</anchorfile>
      <anchor>ae9ddcb6a94065c8f6b57c9ea53c6e3ff</anchor>
      <arglist>(LaneEndSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneEndSet</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane_end_set.html</anchorfile>
      <anchor>ad30d4a5fc72d62e1309a5f24c63e799a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane_end_set.html</anchorfile>
      <anchor>a9355b58613ca48b7f3b9bfaf7d7f9452</anchor>
      <arglist>(const api::LaneEnd &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LaneEndSet</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_lane_end_set.html</anchorfile>
      <anchor>a3eea0aa0c1e1e523c3d1b42d1e56b44b</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::LanePosition</name>
    <filename>classmaliput_1_1api_1_1_lane_position.html</filename>
    <member kind="function">
      <type></type>
      <name>LanePosition</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>ab3e396cc050a90c33ebfc7b64e41d02d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LanePosition</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a4b500ff473b14af99c74fd6299ed9fa2</anchor>
      <arglist>(double s, double r, double h)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>srh</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a68d8b0a3dc0973d85510a6bb0cd1d167</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_srh</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>aabd3319fe78aac4fcac521edec6d4e11</anchor>
      <arglist>(const math::Vector3 &amp;srh)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LanePosition</type>
      <name>FromSrh</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a7bb1dd21604bf5a4b0217700d640eec1</anchor>
      <arglist>(const math::Vector3 &amp;srh)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a88389a186803f18425711478d19c586f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_s</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a0cc6f01bceaf0ccbfadc11c67e936a13</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>r</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a2158ad8213f28ce9ad6c74b562deecca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_r</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a89aed38a97f1fda9ef1a61a92c3ca879</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>h</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>aaee1a7019059c8a9ae11e24ec5879824</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_h</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_position.html</anchorfile>
      <anchor>a886778aa410bd96234a619fdca5000cb</anchor>
      <arglist>(double h)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::LanePositionResult</name>
    <filename>structmaliput_1_1api_1_1_lane_position_result.html</filename>
    <member kind="variable">
      <type>LanePosition</type>
      <name>lane_position</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_position_result.html</anchorfile>
      <anchor>a381e8f9bf948edc81169fda9329380fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InertialPosition</type>
      <name>nearest_position</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_position_result.html</anchorfile>
      <anchor>a65cf38def1177b13564494a5c5d48655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_position_result.html</anchorfile>
      <anchor>a79b8e036dca6911e3295a47d99f21f43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::LaneSRange</name>
    <filename>classmaliput_1_1api_1_1_lane_s_range.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a9c9b8baeee9779c04bc24317d0d1a17a</anchor>
      <arglist>(LaneSRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneSRange</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>aec52774419b9ca27ee95239ecf59e2b5</anchor>
      <arglist>(const LaneId &amp;lane_id, const SRange &amp;s_range)</arglist>
    </member>
    <member kind="function">
      <type>const LaneId &amp;</type>
      <name>lane_id</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a8046bb4eba332bff92b0a9eb64df06a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SRange</type>
      <name>s_range</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a69989159f96da76c75d8776062cf621d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a80401d480f15e1418a3274a2b2b51649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Intersects</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a64a6eda0bf1e33c6878b4292f4c5df59</anchor>
      <arglist>(const LaneSRange &amp;lane_s_range, double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; LaneSRange &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_range.html</anchorfile>
      <anchor>a98915143fa057cb66d860e2ccef77d7c</anchor>
      <arglist>(const LaneSRange &amp;lane_s_range, double tolerance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::LaneSRoute</name>
    <filename>classmaliput_1_1api_1_1_lane_s_route.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>afa460afa47330d71c034449553baed77</anchor>
      <arglist>(LaneSRoute)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneSRoute</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>addd94d3e02ab6babff7bf151851b4b88</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LaneSRoute</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>a8d53ecfca9f1278e533cc2356ddc0752</anchor>
      <arglist>(const std::vector&lt; LaneSRange &gt; &amp;ranges)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; LaneSRange &gt; &amp;</type>
      <name>ranges</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>a4908ce0d69f0d51c82a72260d99364f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>length</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>a80401d480f15e1418a3274a2b2b51649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Intersects</name>
      <anchorfile>classmaliput_1_1api_1_1_lane_s_route.html</anchorfile>
      <anchor>ab7e305537794b3a91523b5bce58e6252</anchor>
      <arglist>(const LaneSRoute &amp;lane_s_route, double tolerance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::LeafCompositeEventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_leaf_composite_event_collection.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LeafCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_composite_event_collection.html</anchorfile>
      <anchor>a2f52b7f3e576e98e14635802882983ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LeafEventCollection&lt; PublishEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_composite_event_collection.html</anchorfile>
      <anchor>aa0b26d3634c239a043e41b6223241ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LeafEventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_composite_event_collection.html</anchorfile>
      <anchor>a557b356a9c12a36e80af435d35da7e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LeafEventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_composite_event_collection.html</anchorfile>
      <anchor>a9e7efc6190992e9070100076e34e3261</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::LeafContext</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::Context</base>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LeafContextTest</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>ab491146b1cc746ef366ba4f49b3300e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>ac34637040107f84aee3e3fc9092bb760</anchor>
      <arglist>(LeafContext &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LeafContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>acbdf04ba33fe8a14f2033fe49c9efc22</anchor>
      <arglist>(const LeafContext &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LeafContext &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>acb062febafd9dcc771309081ed797ed9</anchor>
      <arglist>(LeafContext &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>abcab6f4fd8889f7d0f5970b72c12561f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>a3038c7ec7871293e52184780c0ef5bf5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>a66540d364f36d6a9c1ff2d347c4a6468</anchor>
      <arglist>(const LeafContext &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; ContextBase &gt;</type>
      <name>DoCloneWithoutPointers</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>a70804f9c718e98915042618af7db493c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; State&lt; T &gt; &gt;</type>
      <name>DoCloneState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_context.html</anchorfile>
      <anchor>abb3f673e0ee7cceac53b5a57ec5de2e3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::LeafEventCollection</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LeafEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a0bbb9363a164016422980c6dc6d2f41e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reserve</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a4b495fd763c17f89905c17b52569af5c</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const EventType * &gt; &amp;</type>
      <name>get_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a49928cac496b9e91d90a804554d849df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a4adfd213bb1e5c26cb44858e8e53adf3</anchor>
      <arglist>(std::unique_ptr&lt; EventType &gt; event) final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>abcad2c2f0bc6ff2cfb116779fe4ffb8d</anchor>
      <arglist>(EventType event) final</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a58887f2b21360620141e115c71cc168b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>aa0d2b6ddea7cb960b90423ac48f555bf</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; LeafEventCollection&lt; EventType &gt; &gt;</type>
      <name>MakeForcedEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>aa822779bf6c4098cf0c1494f8770a91d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kDefaultCapacity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a01a70fefefbd2e056e9de49ebc19fead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DoAddToEnd</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_event_collection.html</anchorfile>
      <anchor>a9078b05da90e14cf53ad375377ac4834</anchor>
      <arglist>(const EventCollection&lt; EventType &gt; &amp;other_collection) final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::LeafOutputPort</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::OutputPort</base>
    <member kind="typedef">
      <type>ValueProducer::AllocateCallback</type>
      <name>AllocCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>aec5ccbce07472be60249987b19f02ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, AbstractValue *)&gt;</type>
      <name>CalcCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>a1d5f163d1b760a1c54a9880762d26ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, BasicVector&lt; T &gt; *)&gt;</type>
      <name>CalcVectorCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>a62d51f59c5dcae13358abd4585fb734d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LeafOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>a47057b98dccffa64e2d9359effbab5fc</anchor>
      <arglist>() final=default</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntry &amp;</type>
      <name>cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>a469d4c6377094caf4521fc79da4f7e3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_caching_by_default</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>a923b7a9751b687aa2d1e20d608f52132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>internal::FrameworkFactory</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_output_port.html</anchorfile>
      <anchor>aec09700393c1247c681b270e72729bce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::LeafSystem</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::System</base>
    <member kind="function">
      <type></type>
      <name>~LeafSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5341fd0b682386ac7623a65a898b48a0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; LeafContext&lt; T &gt; &gt;</type>
      <name>AllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af0339d1a60201dd7e42d5e8a80285152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; EventCollection&lt; PublishEvent&lt; T &gt; &gt; &gt;</type>
      <name>AllocateForcedPublishEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a54ed4a335c7077d3914f98f87f28c117</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; EventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &gt;</type>
      <name>AllocateForcedDiscreteUpdateEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a09cd71b380ce6914a46085c83dc31b77</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &gt;</type>
      <name>AllocateForcedUnrestrictedUpdateEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a314a748049fdd21c0ea7b99713eea4df</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ContextBase &gt;</type>
      <name>DoAllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a07f172b2dafc6d0530bef143c4574d6e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDefaultState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ac920e22e905b83dbc0abaaa57d2c0251</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDefaultParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a48a5a76172d2c18e3ac495b44c866c1b</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, Parameters&lt; T &gt; *parameters) const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ContinuousState&lt; T &gt; &gt;</type>
      <name>AllocateTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad305239ecbafb0545520bb5b2898312d</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>AllocateDiscreteVariables</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a75a46315bf6c86eefd7e4cf0f600c7ae</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::multimap&lt; int, int &gt;</type>
      <name>GetDirectFeedthroughs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab3594555c30be66710766bb18169da6b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LeafSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a01c2b703c560ad090b9601b743356c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LeafSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a8d7077d1af5bd9153ae403fe32969eba</anchor>
      <arglist>(SystemScalarConverter converter)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; LeafContext&lt; T &gt; &gt;</type>
      <name>DoMakeLeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a15031238be1c5b2985578d1e63bab2d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoValidateAllocatedLeafContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a8bd6ca8a128bb2663ebaa27d6851c68d</anchor>
      <arglist>(const LeafContext&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>DoCalcWitnessValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae1f1eff5e4fd7f55d152a1b3b9d4bcd1</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const WitnessFunction&lt; T &gt; &amp;witness_func) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddTriggeredWitnessFunctionToCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af3167bd30bfa014aa61d55fb50ed36f9</anchor>
      <arglist>(Event&lt; T &gt; *event, CompositeEventCollection&lt; T &gt; *events) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DoCalcNextUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5c883b4b0aa7a507e29dee582d9ed0fb</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events, T *time) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetGraphvizFragment</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ac370e74eb508e94b3eee667977d7185a</anchor>
      <arglist>(int max_depth, std::stringstream *dot) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetGraphvizInputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>acfd6d412aafdf2814ced8e8fe460fc23</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>GetGraphvizOutputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a37060c889e34319f11652b5ad21cfbb9</anchor>
      <arglist>(const OutputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const final</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; ContinuousState&lt; T &gt; &gt;</type>
      <name>AllocateContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ac964670fe031a2b4ea84dda682b953cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>AllocateDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a74c5bee14a5df344e745f70b84388cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; AbstractValues &gt;</type>
      <name>AllocateAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad7e7d622e6bb31031ed0c9d7662333cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; Parameters&lt; T &gt; &gt;</type>
      <name>AllocateParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4183810e51d405f7b9ad94a1e9c4a7ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DeclareNumericParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a6516c166d4aedeab3ae31544bbaecbba</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const U&lt; T &gt; &amp;</type>
      <name>GetNumericParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4e4a60af942a6a568694334837d19931</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>U&lt; T &gt; &amp;</type>
      <name>GetMutableNumericParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab003f82ede0c6e8e6f1f1862ea54b31d</anchor>
      <arglist>(Context&lt; T &gt; *context, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>DeclareAbstractParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad7f954e701d1bfba3f8aad91dd4d89ca</anchor>
      <arglist>(const AbstractValue &amp;model_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad7786537a2832acd0d4f0d80827c1291</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>acdd8c9a5a1c5b17e10fdef61456ce228</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a30e4b4a7f8de8106e56bc49e36c07dec</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5678e6682500a1f0bb71bbd1fd454324</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a7fb4770f2d9a82d9012da69ed102ffe5</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a269f10abf498f5b956d9d916f217b0f3</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a50e5397a57ec949d737f0a7aafd361c1</anchor>
      <arglist>(double period_sec, double offset_sec, const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a1adf7020dee795fd1b34b023c447eb6f</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a262f71637a37127840acefca3bda8897</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a17d2dbe47bcb217706226101ed7218bc</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a49a07c6bbccc4464d5d6192889c3d2e6</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a045f31a25ecb0c57baede1abd70182a8</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a0d51151d69bb455091dc4c2f4c42729a</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a901aafa8a436a6988c5cd35527392700</anchor>
      <arglist>(const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aab3136bba7eb6480a84309d019b28d83</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab4e7028e25a5d6e402a156a0115019a4</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae04f150e6036b0cbbf9808cc0f71a9a6</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a048bf857e2856f50fc08211a18348563</anchor>
      <arglist>(const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a79bf931890fb3c7e9e4fd0f2696ca994</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad3b5bee56aa04d7853ba456b85775f7e</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a7d68430eb8f9451787a183c48fca2c81</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a52a8bc29fc2fdead9b757e06c5c8a5c0</anchor>
      <arglist>(int num_state_variables)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a59ad7afd2779aef7414c26220440403e</anchor>
      <arglist>(int num_q, int num_v, int num_z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab992aa647fda36ce82828bd49381299e</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a02c6110544a3a4fd4a9085c2db10972c</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, int num_q, int num_v, int num_z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a47ef984b4d9b8313d1239b76388882d2</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>afcdee5c47f728c1c50b84fc54c26374e</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad02cadb14746ff469fa338d2351a5e68</anchor>
      <arglist>(int num_state_variables)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractStateIndex</type>
      <name>DeclareAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a471cc890e1d5fb20b9b257853d88cac4</anchor>
      <arglist>(const AbstractValue &amp;abstract_state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareImplicitTimeDerivativesResidualSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af35335637b5cf1c763d5e9112864fe09</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5917e1a570b31a5737aec9b49f4c190a</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const BasicVector&lt; T &gt; &amp;model_vector, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4185d2244cddf8fce953f1c7ffbc514a</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a565c340c958e56d0d1967034fc42c906</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const AbstractValue &amp;model_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aff6f3ee5d89fd1810639e04056768eba</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aaa2ad089c407e501a3ec99106ef06d0a</anchor>
      <arglist>(const AbstractValue &amp;model_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab80f86f8f54344373ce6597afd8fd55f</anchor>
      <arglist>(const BasicVectorSubtype &amp;model_vector, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>afae593893666b820d3c725e1570967bd</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aa8555d0744eb060d4c9dc32506539197</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, typename LeafOutputPort&lt; T &gt;::CalcVectorCallback vector_calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; OutputType, std::string &gt;, LeafOutputPort&lt; T &gt; &amp; &gt;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a0331978ee2acc1638874464addf8269b</anchor>
      <arglist>(const OutputType &amp;model_value, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5399d5518ba8953095e797b9ec9e3aa8</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae93557fbbbe84af162a8e15941a8d68a</anchor>
      <arglist>(OutputType(MySystem::*make)() const, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>acb2c9ed5dd1428fac9cb34dbdc4b0fe0</anchor>
      <arglist>(typename LeafOutputPort&lt; T &gt;::AllocCallback alloc_function, typename LeafOutputPort&lt; T &gt;::CalcCallback calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static DependencyTicket</type>
      <name>all_sources_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af0b9bc9f93181e042bdb2c36f4dbea10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad7786537a2832acd0d4f0d80827c1291</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>acdd8c9a5a1c5b17e10fdef61456ce228</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a30e4b4a7f8de8106e56bc49e36c07dec</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5678e6682500a1f0bb71bbd1fd454324</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a7fb4770f2d9a82d9012da69ed102ffe5</anchor>
      <arglist>(double period_sec, double offset_sec, EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a269f10abf498f5b956d9d916f217b0f3</anchor>
      <arglist>(double period_sec, double offset_sec, void(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a50e5397a57ec949d737f0a7aafd361c1</anchor>
      <arglist>(double period_sec, double offset_sec, const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicPublish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a1adf7020dee795fd1b34b023c447eb6f</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicDiscreteUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a262f71637a37127840acefca3bda8897</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePeriodicUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a17d2dbe47bcb217706226101ed7218bc</anchor>
      <arglist>(double period_sec, double offset_sec=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a49a07c6bbccc4464d5d6192889c3d2e6</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a045f31a25ecb0c57baede1abd70182a8</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a0d51151d69bb455091dc4c2f4c42729a</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclarePerStepEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a901aafa8a436a6988c5cd35527392700</anchor>
      <arglist>(const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aab3136bba7eb6480a84309d019b28d83</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab4e7028e25a5d6e402a156a0115019a4</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae04f150e6036b0cbbf9808cc0f71a9a6</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareInitializationEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a048bf857e2856f50fc08211a18348563</anchor>
      <arglist>(const EventType &amp;event)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedPublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a79bf931890fb3c7e9e4fd0f2696ca994</anchor>
      <arglist>(EventStatus(MySystem::*publish)(const Context&lt; T &gt; &amp;) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedDiscreteUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad3b5bee56aa04d7853ba456b85775f7e</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareForcedUnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a7d68430eb8f9451787a183c48fca2c81</anchor>
      <arglist>(EventStatus(MySystem::*update)(const Context&lt; T &gt; &amp;, State&lt; T &gt; *) const)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a52a8bc29fc2fdead9b757e06c5c8a5c0</anchor>
      <arglist>(int num_state_variables)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a59ad7afd2779aef7414c26220440403e</anchor>
      <arglist>(int num_q, int num_v, int num_z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab992aa647fda36ce82828bd49381299e</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContinuousStateIndex</type>
      <name>DeclareContinuousState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a02c6110544a3a4fd4a9085c2db10972c</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, int num_q, int num_v, int num_z)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a47ef984b4d9b8313d1239b76388882d2</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>afcdee5c47f728c1c50b84fc54c26374e</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;vector)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiscreteStateIndex</type>
      <name>DeclareDiscreteState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad02cadb14746ff469fa338d2351a5e68</anchor>
      <arglist>(int num_state_variables)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractStateIndex</type>
      <name>DeclareAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a471cc890e1d5fb20b9b257853d88cac4</anchor>
      <arglist>(const AbstractValue &amp;abstract_state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>DeclareImplicitTimeDerivativesResidualSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af35335637b5cf1c763d5e9112864fe09</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5917e1a570b31a5737aec9b49f4c190a</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const BasicVector&lt; T &gt; &amp;model_vector, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4185d2244cddf8fce953f1c7ffbc514a</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a565c340c958e56d0d1967034fc42c906</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const AbstractValue &amp;model_value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aff6f3ee5d89fd1810639e04056768eba</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aaa2ad089c407e501a3ec99106ef06d0a</anchor>
      <arglist>(const AbstractValue &amp;model_value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueProducer::AllocateCallback</type>
      <name>allocate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aaa3ede112d18c271986b415c5bef53e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>auto &amp;</type>
      <name>port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a71f36e6a47a3d2af2fd2f848771edf7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>return</type>
      <name>port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae59f61b7b6e4f7c1ecac7d8f47e6616f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a11479a5cb19f65f35f1a7f5530fb42a0</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const BasicVectorSubtype &amp;model_vector, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ac0e6bf117c89b76c8893cf45f1ba652a</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, int size, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVector&lt; T &gt; *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a580e15b4d10db0b8c07762b3ac36e632</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a8b5d6f493e1a290ab4ae6c12d28905b1</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const BasicVector&lt; T &gt; &amp;model_vector, typename LeafOutputPort&lt; T &gt;::CalcVectorCallback vector_calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af3da3722efc85a5f8ab121b8c21664c5</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, int size, typename LeafOutputPort&lt; T &gt;::CalcVectorCallback vector_calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af669e17632efa35e1dd28f5af9a96b9b</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, const OutputType &amp;model_value, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aea52af0c8afa64504398a2c447f28fa0</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae8ef897fdededa85dc5b1cef29009cf5</anchor>
      <arglist>(&quot;2021-11-01&quot;, &quot;This overload for DeclareAbstractOutputPort is rarely the best choice;&quot; &quot; it is unusual for a boutique allocation to return an abstract type by&quot; &quot; value rather than provide a model_value. If the default constructor&quot; &quot; or a model value cannot be used, use the overload that accepts an&quot; &quot; AllocCallback alloc_function instead.&quot;) LeafOutputPort&lt; T &gt; &amp;DeclareAbstractOutputPort(std</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MALIPUT_DRAKE_DEMAND</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>afaa4456210daa5f5db91308fcd1a59b4</anchor>
      <arglist>(this_ptr !=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aa2f77588778c7353bbbcb0e1359a42ac</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, typename LeafOutputPort&lt; T &gt;::AllocCallback alloc_function, typename LeafOutputPort&lt; T &gt;::CalcCallback calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareStateOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4f1ea2f7fdb9121ecc50705bb8ed2fb5</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, ContinuousStateIndex state_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareStateOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a93d533da6efa2843071c8d123c6e4800</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, DiscreteStateIndex state_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareStateOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>adcaf3f126c716c557ba620cb56caca18</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, AbstractStateIndex state_index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab80f86f8f54344373ce6597afd8fd55f</anchor>
      <arglist>(const BasicVectorSubtype &amp;model_vector, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>afae593893666b820d3c725e1570967bd</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, BasicVectorSubtype *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareVectorOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>aa8555d0744eb060d4c9dc32506539197</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;model_vector, typename LeafOutputPort&lt; T &gt;::CalcVectorCallback vector_calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if_t&lt;!std::is_same_v&lt; OutputType, std::string &gt;, LeafOutputPort&lt; T &gt; &amp; &gt;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a0331978ee2acc1638874464addf8269b</anchor>
      <arglist>(const OutputType &amp;model_value, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a5399d5518ba8953095e797b9ec9e3aa8</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ae93557fbbbe84af162a8e15941a8d68a</anchor>
      <arglist>(OutputType(MySystem::*make)() const, void(MySystem::*calc)(const Context&lt; T &gt; &amp;, OutputType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LeafOutputPort&lt; T &gt; &amp;</type>
      <name>DeclareAbstractOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>acb2c9ed5dd1428fac9cb34dbdc4b0fe0</anchor>
      <arglist>(typename LeafOutputPort&lt; T &gt;::AllocCallback alloc_function, typename LeafOutputPort&lt; T &gt;::CalcCallback calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a8d09351dbeec49917149d6da5b701c12</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ab146f195a06073ce0987f6b531fa9ea3</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, std::function&lt; T(const Context&lt; T &gt; &amp;)&gt; calc) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a6a1b41173a1b0149226c9d5b7c3601ce</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const, void(MySystem::*publish_callback)(const Context&lt; T &gt; &amp;, const PublishEvent&lt; T &gt; &amp;) const) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ad78860f078c81981b9acc498186d5d94</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const, void(MySystem::*du_callback)(const Context&lt; T &gt; &amp;, const DiscreteUpdateEvent&lt; T &gt; &amp;, DiscreteValues&lt; T &gt; *) const) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a521a1bd4eee88561b0e1a3b06b7fe1b7</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const, void(MySystem::*uu_callback)(const Context&lt; T &gt; &amp;, const UnrestrictedUpdateEvent&lt; T &gt; &amp;, State&lt; T &gt; *) const) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a650d4bdc065de71ea29a608f9e5a1261</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const, const Event&lt; T &gt; &amp;e) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; WitnessFunction&lt; T &gt; &gt;</type>
      <name>MakeWitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a3134d4dd585005d1dc8687dc619a9e0c</anchor>
      <arglist>(const std::string &amp;description, const WitnessFunctionDirection &amp;direction_type, std::function&lt; T(const Context&lt; T &gt; &amp;)&gt; calc, const Event&lt; T &gt; &amp;e) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>DeclareEqualityConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a4948ad0241c67045b3c794874b2986a0</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *) const, int count, std::string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>DeclareEqualityConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a0e764e61c17f1b7fbff611d8f69059b1</anchor>
      <arglist>(ContextConstraintCalc&lt; T &gt; calc, int count, std::string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>DeclareInequalityConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a3bac306621c3f0839324649151c22af2</anchor>
      <arglist>(void(MySystem::*calc)(const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *) const, SystemConstraintBounds bounds, std::string description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>DeclareInequalityConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>abb77d986d0325c88d592609e35805428</anchor>
      <arglist>(ContextConstraintCalc&lt; T &gt; calc, SystemConstraintBounds bounds, std::string description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPublish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>ac06b0e87bccd80a2e69a8d84c655840a</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const std::vector&lt; const PublishEvent&lt; T &gt; * &gt; &amp;events) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcDiscreteVariableUpdates</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>af3621fd468e9cfb692cec990a5a22c91</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const std::vector&lt; const DiscreteUpdateEvent&lt; T &gt; * &gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_leaf_system.html</anchorfile>
      <anchor>a1632ac1a231d02181407dc5ad59041a0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const std::vector&lt; const UnrestrictedUpdateEvent&lt; T &gt; * &gt; &amp;events, State&lt; T &gt; *state) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; maliput::api::rules::UniqueBulbGroupId &gt;</name>
    <filename>structstd_1_1less_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_group_id_01_4.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_group_id_01_4.html</anchorfile>
      <anchor>a3128dda2c83128e817d99f5674c335fd</anchor>
      <arglist>(const maliput::api::rules::UniqueBulbGroupId &amp;lhs, const maliput::api::rules::UniqueBulbGroupId &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; maliput::api::rules::UniqueBulbId &gt;</name>
    <filename>structstd_1_1less_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_id_01_4.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01maliput_1_1api_1_1rules_1_1_unique_bulb_id_01_4.html</anchorfile>
      <anchor>ad2525270bdf86e8a4b1c0d15132f6821</anchor>
      <arglist>(const maliput::api::rules::UniqueBulbId &amp;lhs, const maliput::api::rules::UniqueBulbId &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; maliput::api::TypeSpecificIdentifier&lt; T &gt; &gt;</name>
    <filename>structstd_1_1less_3_01maliput_1_1api_1_1_type_specific_identifier_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01maliput_1_1api_1_1_type_specific_identifier_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a01662a70abf43213afa06fe926a15433</anchor>
      <arglist>(const maliput::api::TypeSpecificIdentifier&lt; T &gt; &amp;lhs, const maliput::api::TypeSpecificIdentifier&lt; T &gt; &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::less&lt; maliput::api::UniqueId &gt;</name>
    <filename>structstd_1_1less_3_01maliput_1_1api_1_1_unique_id_01_4.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structstd_1_1less_3_01maliput_1_1api_1_1_unique_id_01_4.html</anchorfile>
      <anchor>ae3908aabf40a02ee878d9adb32c2a365</anchor>
      <arglist>(const maliput::api::UniqueId &amp;lhs, const maliput::api::UniqueId &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::Logger</name>
    <filename>classmaliput_1_1common_1_1_logger.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>a77b23d566a6a7dc08e4769ad9a333926</anchor>
      <arglist>(Logger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logger</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>aef8052bbf4d54842d72662ee4c1ed930</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gaad76e8446fb03a2f45e502092d96a376</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gae99b323afab58fbf83f92c6d679e1276</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gaca46af6ad7e486edceb7ad7752f02d6a</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warn</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gad70e2d016bdb487c04f8299fe395d42e</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>ga899f1968fcde75e69f00e0053e8a9e9d</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>critical</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>ga1a9b8a013bffc28ce8587b34e653ff7f</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sink</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>ab4a3421b13533b4087883eba559e2fe9</anchor>
      <arglist>(std::unique_ptr&lt; common::SinkBase &gt; sink)</arglist>
    </member>
    <member kind="function">
      <type>SinkBase *</type>
      <name>get_sink</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>aa2462ed9265826a5cbd97b9a418f438f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>set_level</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>a9ae9d86f261bd310c1b84d6a19dce0ac</anchor>
      <arglist>(logger::level log_level)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kNumberOfArguments</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>a76f2398f97e4258f73caa1838f01c87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>set_log_level</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>ae4810092d5fdfca56f482a22ba061ce9</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>common::Logger *</type>
      <name>log</name>
      <anchorfile>classmaliput_1_1common_1_1_logger.html</anchorfile>
      <anchor>a3f89d574d0d51e9df0f5b437e0c122fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::plugin::MaliputPlugin</name>
    <filename>classmaliput_1_1plugin_1_1_maliput_plugin.html</filename>
    <member kind="typedef">
      <type>api::TypeSpecificIdentifier&lt; class MaliputPlugin &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>aeef7aff98de7ccffb0133dd7b5adf1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>adeb21967d836ca42c91b3d444124246f</anchor>
      <arglist>(MaliputPlugin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaliputPlugin</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>af8becf967cc684c7328c4ff43df05f2c</anchor>
      <arglist>(const std::string &amp;path_to_lib)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaliputPlugin</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>ad35e9cb376ad49c5846057ed3320a302</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetId</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>a83b135e8b0a571c7e51e2911d0d41b7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaliputPluginType</type>
      <name>GetType</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>ab8f55eeee1c0eb2025d3d4d61c351c6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>ExecuteSymbol</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin.html</anchorfile>
      <anchor>a2a8c8203de29831660ac6e4a59efa617</anchor>
      <arglist>(const std::string &amp;sym_name, Args &amp;&amp;... args) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::plugin::MaliputPluginManager</name>
    <filename>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</anchorfile>
      <anchor>a122d47305e640425c5d758c67aa74bd4</anchor>
      <arglist>(MaliputPluginManager)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaliputPluginManager</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</anchorfile>
      <anchor>af99f9a4ea177f978b0cda39f85c2bc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MaliputPlugin *</type>
      <name>GetPlugin</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</anchorfile>
      <anchor>af23a632bea159c9d501cd14d79905748</anchor>
      <arglist>(const MaliputPlugin::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPlugin</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</anchorfile>
      <anchor>a0d7ea220b09a9d8b36826d64957f072c</anchor>
      <arglist>(const std::string &amp;path_to_plugin)</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; MaliputPlugin::Id, MaliputPluginType &gt;</type>
      <name>ListPlugins</name>
      <anchorfile>classmaliput_1_1plugin_1_1_maliput_plugin_manager.html</anchorfile>
      <anchor>a16e60659b3f114ba258a7adae8284287</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::ManualDiscreteValueRuleStateProvider</name>
    <filename>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</filename>
    <base>maliput::api::rules::DiscreteValueRuleStateProvider</base>
    <member kind="function">
      <type></type>
      <name>ManualDiscreteValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a599e5441adf98e5a45c219a0b86208c0</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ManualDiscreteValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a3f80fea5c889601b1787a0d7e16b3e87</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetState</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>acbc3e0be968c85d843d45a7949020d6e</anchor>
      <arglist>(const api::rules::Rule::Id &amp;id, const api::rules::DiscreteValueRule::DiscreteValue &amp;state, const std::optional&lt; api::rules::DiscreteValueRule::DiscreteValue &gt; &amp;next_state, const std::optional&lt; double &gt; &amp;duration_until)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::optional&lt; api::rules::DiscreteValueRuleStateProvider::StateResult &gt;</type>
      <name>DoGetState</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a569a97614f622d6a8564c918593e3f0d</anchor>
      <arglist>(const api::rules::Rule::Id &amp;id) const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::optional&lt; api::rules::DiscreteValueRuleStateProvider::StateResult &gt;</type>
      <name>DoGetState</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a664ac0d6ea90dcf0d4b9a4c34e3d881d</anchor>
      <arglist>(const api::RoadPosition &amp;road_position, const api::rules::Rule::TypeId &amp;rule_type, double tolerance) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::map&lt; api::rules::DiscreteValueRule::Id, api::rules::DiscreteValueRule &gt;</type>
      <name>GetFilteredDiscreteValueRules</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a70fa2eb96964f75feb1096a5e63a4508</anchor>
      <arglist>(const api::RoadPosition &amp;road_position, const api::rules::Rule::TypeId &amp;rule_type, double tolerance) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const api::rules::RoadRulebook *</type>
      <name>rulebook_</name>
      <anchorfile>classmaliput_1_1_manual_discrete_value_rule_state_provider.html</anchorfile>
      <anchor>a03019cb91cca18732b65671601800e68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::ManualPhaseProvider</name>
    <filename>classmaliput_1_1_manual_phase_provider.html</filename>
    <base>maliput::api::rules::PhaseProvider</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>af18c6eefd7375c5b0255f976ab83db77</anchor>
      <arglist>(ManualPhaseProvider)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManualPhaseProvider</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>a68880429349e9aca3962723cd401df89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ManualPhaseProvider</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>af6da359860cb75c4af3687369686343e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPhaseRing</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>aaf728fd66c2790653310dc4b1e641857</anchor>
      <arglist>(const api::rules::PhaseRing::Id &amp;id, const api::rules::Phase::Id &amp;initial_phase, const std::optional&lt; api::rules::Phase::Id &gt; &amp;initial_next_phase=std::nullopt, const std::optional&lt; double &gt; &amp;initial_duration_until=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPhase</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>aa1035bf78001490a6d3313dea38206ee</anchor>
      <arglist>(const api::rules::PhaseRing::Id &amp;id, const api::rules::Phase::Id &amp;phase, const std::optional&lt; api::rules::Phase::Id &gt; &amp;next_phase=std::nullopt, const std::optional&lt; double &gt; &amp;duration_until=std::nullopt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ManualPhaseProvider &gt;</type>
      <name>GetDefaultPopulatedManualPhaseProvider</name>
      <anchorfile>classmaliput_1_1_manual_phase_provider.html</anchorfile>
      <anchor>a39f0bf9c67ba5ac2ad1fbe60e275a047</anchor>
      <arglist>(const maliput::api::rules::PhaseRingBook *phase_ring_book)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::ManualPhaseRingBook</name>
    <filename>classmaliput_1_1_manual_phase_ring_book.html</filename>
    <base>maliput::api::rules::PhaseRingBook</base>
    <member kind="function">
      <type></type>
      <name>ManualPhaseRingBook</name>
      <anchorfile>classmaliput_1_1_manual_phase_ring_book.html</anchorfile>
      <anchor>ad4d692d1852cc7b023592370df3a423b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ManualPhaseRingBook</name>
      <anchorfile>classmaliput_1_1_manual_phase_ring_book.html</anchorfile>
      <anchor>ab053f240bd5a8285b050fd6524188dac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPhaseRing</name>
      <anchorfile>classmaliput_1_1_manual_phase_ring_book.html</anchorfile>
      <anchor>ae5a954a1d2b48f6a96b05e52bd32c1bc</anchor>
      <arglist>(const api::rules::PhaseRing &amp;ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemovePhaseRing</name>
      <anchorfile>classmaliput_1_1_manual_phase_ring_book.html</anchorfile>
      <anchor>a02794c438b1411ab546439d077d28423</anchor>
      <arglist>(const api::rules::PhaseRing::Id &amp;ring_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::ManualRangeValueRuleStateProvider</name>
    <filename>classmaliput_1_1_manual_range_value_rule_state_provider.html</filename>
    <base>maliput::api::rules::RangeValueRuleStateProvider</base>
    <member kind="function">
      <type></type>
      <name>ManualRangeValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_manual_range_value_rule_state_provider.html</anchorfile>
      <anchor>a4787d576d57d5a8c6e6a6202967b2cf9</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ManualRangeValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_manual_range_value_rule_state_provider.html</anchorfile>
      <anchor>a8808581c6ba99baaff101ee165868cc5</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetState</name>
      <anchorfile>classmaliput_1_1_manual_range_value_rule_state_provider.html</anchorfile>
      <anchor>a09978bdd4cf8a3db1c26a7c772183f75</anchor>
      <arglist>(const api::rules::Rule::Id &amp;id, const api::rules::RangeValueRule::Range &amp;state, const std::optional&lt; api::rules::RangeValueRule::Range &gt; &amp;next_state, const std::optional&lt; double &gt; &amp;duration_until)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ManualRangeValueRuleStateProvider &gt;</type>
      <name>GetDefaultManualRangeValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_manual_range_value_rule_state_provider.html</anchorfile>
      <anchor>a3036c427c1a94da91db14c4444ef90d8</anchor>
      <arglist>(const maliput::api::rules::RoadRulebook *rulebook)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::ManualRulebook</name>
    <filename>classmaliput_1_1_manual_rulebook.html</filename>
    <base>maliput::api::rules::RoadRulebook</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a810b02894807cf754134a879ae6b1fe5</anchor>
      <arglist>(ManualRulebook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManualRulebook</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a4c896a0e75034a4a3a382c969269a11c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ManualRulebook</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>ae788774a127f05e8682b9dda2362a9a7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAll</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a9aa9f847832ca5467851014a0d73e9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>aa8be6299ec5d8a57e3a4c6a296786892</anchor>
      <arglist>(const api::rules::RightOfWayRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a4af6c6f8f080ddfc94af3cc669adc2cb</anchor>
      <arglist>(const api::rules::RightOfWayRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a5d0add9d7a9f925c5b49084d878976fd</anchor>
      <arglist>(const api::rules::SpeedLimitRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>ad2ce757d42ec1f39b86892a821209c8a</anchor>
      <arglist>(const api::rules::SpeedLimitRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a4e6fbe029474ae1695ff877bdf38a551</anchor>
      <arglist>(const api::rules::DirectionUsageRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>af8757469d83d042543509882636762e6</anchor>
      <arglist>(const api::rules::DirectionUsageRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>afe4bc1baa86ce48e29c740d48d88d4d2</anchor>
      <arglist>(const api::rules::DiscreteValueRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a3d9555bf67e37725831bc782774d2a91</anchor>
      <arglist>(const api::rules::RangeValueRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_manual_rulebook.html</anchorfile>
      <anchor>a832973c7b7df1da07f706af5e4916a3f</anchor>
      <arglist>(const api::rules::Rule::Id &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::Material</name>
    <filename>structmaliput_1_1utility_1_1_material.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>a9b45b3e13bd9167aab02e17e08916231</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3</type>
      <name>diffuse</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>a694b293a8a0b0490aeff2942fde8ff98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3</type>
      <name>ambient</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>af03bf7d5cc6dd211de0951b3d2fd5936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3</type>
      <name>specular</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>a8b9d45bf5658d1190d8c38cff0c78875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>shininess</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>a6fc41bf11a1cdec39aabf44a7defb391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>transparency</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>adf7058d605d8c605d4c67b022fcfdde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>a6e13658c7ae2d13d60422898faaabda5</anchor>
      <arglist>(const Material &amp;matA, const Material &amp;matB)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1utility_1_1_material.html</anchorfile>
      <anchor>afbc1ae63f9cb20e6407155269306162b</anchor>
      <arglist>(const Material &amp;matA, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Matrix</name>
    <filename>classmaliput_1_1math_1_1_matrix.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a9a022fb22fe3aad154e6db6009c611ee</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>af4e1537f5ee1039a6f6cd9ba7e83f2ad</anchor>
      <arglist>(const std::initializer_list&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a1a955af805703db69041281196b97099</anchor>
      <arglist>(const std::initializer_list&lt; Vector&lt; N &gt;&gt; &amp;rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a59aa4194176579e234872ba587a1881c</anchor>
      <arglist>(std::array&lt; Vector&lt; N &gt;, N &gt; rows)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aa9f1e7493ed255a2d9c90ecc7cb296bc</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>adbe9a5802eeeb60909c3851a6ec37aa2</anchor>
      <arglist>(Matrix&lt; N &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; N &gt;</type>
      <name>row</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aa3043c3ab9fca14042496b301cf32b96</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; N &gt;</type>
      <name>col</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a4005be53f510c3abcfa1dfd16b94c450</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>transpose</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ab28e50dbac30b03960d848b4fd73f60e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N - 1 &gt;</type>
      <name>reduce</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a87216d382038685b5e5c7706e41718fe</anchor>
      <arglist>(std::size_t row, std::size_t col) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cofactor</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ae6ef9c768a4270a9ebd46177fa250144</anchor>
      <arglist>(std::size_t row, std::size_t col) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a567226bdd8fe4db0026d42aae75540ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_singular</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>af1699ec65bff838d2ede217f0df45141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>cofactor</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aad0666bd955201579710c51135c23980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>adjoint</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a2ffbb01313c47fb1af9a0fb3e3648dab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>inverse</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a418e44a09636ab1a54c51e96bff6bad7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a1d531828449ce574a81ba799d640bc4f</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a0efd123b1d56c0695eeb7f4500adc021</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; N &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a98a95e3c21af2046b01f22e584392efd</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>abbe6f68b1c1d4da0ea8100ebf5a93e65</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ad6a05ee82dc3386c0b24f7e74df8bd9a</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aa4f4482a325587dc8c6494c51cf9d1b6</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a1205968072baaa461ff5678494edd471</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a9a7aebde1abd61d41d9ac57fe65004d4</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aadef92d2d5848ae57f768b605132420b</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N &gt;</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ac1055218626ef565ead9b43661beba99</anchor>
      <arglist>(double k) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cofactor</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ae6ef9c768a4270a9ebd46177fa250144</anchor>
      <arglist>(std::size_t row, std::size_t col) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix&lt; N &gt;</type>
      <name>Identity</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a805103094f13d2040ef0910fa352990a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>kTolerance</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a409f0fc00f5231042c95ccf5fe8fda5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>a775e46d64758a994a1ecfa7a7a590c9e</anchor>
      <arglist>(const Matrix&lt; N_ &gt; &amp;matrix, double k)</arglist>
    </member>
    <member kind="friend">
      <type>friend Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>ae7876c148054511cb9cc10bf9bb64424</anchor>
      <arglist>(double k, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_matrix.html</anchorfile>
      <anchor>aed2210a0b4ebd59a78b6e7a74166161c</anchor>
      <arglist>(std::ostream &amp;os, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockBranchPoint</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_branch_point.html</filename>
    <base>maliput::api::BranchPoint</base>
    <member kind="function">
      <type></type>
      <name>MockBranchPoint</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>a389fe0c13b736992a9efdb3ac625fc36</anchor>
      <arglist>(const BranchPointId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_road_geometry</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>ab105eee46e9faa076a7d20fb21edef53</anchor>
      <arglist>(RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lane_end_set_a</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>ac659739de4d9a7245f2bac8e01bb83a6</anchor>
      <arglist>(std::unique_ptr&lt; MockLaneEndSet &gt; lane_end_set_a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lane_end_set_b</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>a425e0835bb6496405293f16499d0fb98</anchor>
      <arglist>(std::unique_ptr&lt; MockLaneEndSet &gt; lane_end_set_b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::test::MockBranchPoint</name>
    <filename>classmaliput_1_1geometry__base_1_1test_1_1_mock_branch_point.html</filename>
    <base>maliput::geometry_base::BranchPoint</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>aaa139b77d2804bc363548d952e9a5e48</anchor>
      <arglist>(MockBranchPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockBranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_branch_point.html</anchorfile>
      <anchor>aceec770f91b3df9cb865588fcffe85da</anchor>
      <arglist>(const api::BranchPointId &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockIdIndex</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</filename>
    <base>maliput::api::RoadGeometry::IdIndex</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>a3e589dab9c7c2c37d5272340f9d31646</anchor>
      <arglist>(MockIdIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockIdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>abd3cae6694ff0dcc8add55ea7b2db05f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_junction_to_map</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>a3203ab20c7860c79b612ebba1a773464</anchor>
      <arglist>(const JunctionId &amp;id, const Junction *junction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_lane_to_map</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>a25864340d477a08a2b4ee06464af276a</anchor>
      <arglist>(const LaneId &amp;id, const Lane *lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_segment_to_map</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>ad3a30aa982660925dafa96c26dee0296</anchor>
      <arglist>(const SegmentId &amp;id, const Segment *segment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_branchpoint_to_map</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_id_index.html</anchorfile>
      <anchor>adfd4c6981a5c8320a58484a73b4acdfc</anchor>
      <arglist>(const BranchPointId &amp;id, const BranchPoint *branch_point)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockJunction</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_junction.html</filename>
    <base>maliput::api::Junction</base>
    <member kind="function">
      <type></type>
      <name>MockJunction</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_junction.html</anchorfile>
      <anchor>aee576b099222ed01185375ee3e00eb30</anchor>
      <arglist>(const JunctionId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_road_geometry</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_junction.html</anchorfile>
      <anchor>ab105eee46e9faa076a7d20fb21edef53</anchor>
      <arglist>(RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_segment</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_junction.html</anchorfile>
      <anchor>a198054bfe5b09d2e653ad8901a050509</anchor>
      <arglist>(std::unique_ptr&lt; MockSegment &gt; segment)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::test::MockJunction</name>
    <filename>classmaliput_1_1geometry__base_1_1test_1_1_mock_junction.html</filename>
    <base>maliput::geometry_base::Junction</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_junction.html</anchorfile>
      <anchor>a26723fde85c91fee88437db5f309cde9</anchor>
      <arglist>(MockJunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockJunction</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_junction.html</anchorfile>
      <anchor>aa61dda9241bb8ba6c3a802f6d30166de</anchor>
      <arglist>(const api::JunctionId &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockLane</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_lane.html</filename>
    <base>maliput::api::Lane</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>ae3ebd5df219c7220437a42f791b89581</anchor>
      <arglist>(MockLane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockLane</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a8256c6b08b64348c0eb2a35f41075ee7</anchor>
      <arglist>(const LaneId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockLane</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a4c1ee95b8dbaf098f729bab1db3e4738</anchor>
      <arglist>(const LaneId &amp;id, const InertialPosition &amp;start_ip, const Rotation &amp;start_rot, const InertialPosition &amp;end_ip, const Rotation &amp;end_rot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockLane</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a34fe1177c843324cee3b688eab5bcd63</anchor>
      <arglist>(const LaneId &amp;id, const LanePositionResult &amp;lane_position_result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_segment</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a098930cb2570547ba7e0a1971ac96a24</anchor>
      <arglist>(Segment *segment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_start_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a209353caefbece29b53fbfe84c515be4</anchor>
      <arglist>(BranchPoint *start_bp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_end_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>a2f769c9dc7566e059ad2e6a42878c17e</anchor>
      <arglist>(BranchPoint *end_bp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::test::MockLane</name>
    <filename>classmaliput_1_1geometry__base_1_1test_1_1_mock_lane.html</filename>
    <base>maliput::geometry_base::Lane</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>ae3ebd5df219c7220437a42f791b89581</anchor>
      <arglist>(MockLane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockLane</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_lane.html</anchorfile>
      <anchor>ae3a3bec2f0ddc7c0a6984c28af871d7b</anchor>
      <arglist>(const api::LaneId &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockLaneEndSet</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_lane_end_set.html</filename>
    <base>maliput::api::LaneEndSet</base>
    <member kind="function">
      <type></type>
      <name>MockLaneEndSet</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane_end_set.html</anchorfile>
      <anchor>a1cb648a9a81b3ba992ad238903de9a8f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lane_end</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_lane_end_set.html</anchorfile>
      <anchor>a7cba5f66175a16c044ae888897f25f97</anchor>
      <arglist>(const LaneEnd &amp;lane_end)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::test::MockRoadGeometry</name>
    <filename>classmaliput_1_1geometry__base_1_1test_1_1_mock_road_geometry.html</filename>
    <base>maliput::geometry_base::RoadGeometry</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a630175fce2ba52f711f6ddd5f90fa0b2</anchor>
      <arglist>(MockRoadGeometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockRoadGeometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a9a058c56a78887a7f2bb09b6db059369</anchor>
      <arglist>(const api::RoadGeometryId &amp;id, double linear_tolerance, double angular_tolerance, double scale_length, const math::Vector3 &amp;inertial_to_backend_frame_translation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockRoadGeometry</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</filename>
    <base>maliput::api::RoadGeometry</base>
    <member kind="function">
      <type></type>
      <name>MockRoadGeometry</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a333d4bc67a9c7140bc85137bbef31024</anchor>
      <arglist>(const RoadGeometryId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockRoadGeometry</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a7e3fe15da276d139967bd85997a436d6</anchor>
      <arglist>(const RoadGeometryId &amp;id, const double &amp;linear_tolerance, const double &amp;angular_tolerance, const math::Vector3 &amp;inertial_to_backend_frame_translation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_junction</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a22f969858e92174bcadce58cc0e667e4</anchor>
      <arglist>(std::unique_ptr&lt; MockJunction &gt; junction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_start_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>af51c89d2279308c8b85d32d1f2e11b20</anchor>
      <arglist>(std::unique_ptr&lt; MockBranchPoint &gt; start_bp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_end_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a88d545e0d0027c8926b36e27a9496737</anchor>
      <arglist>(std::unique_ptr&lt; MockBranchPoint &gt; end_bp)</arglist>
    </member>
    <member kind="function">
      <type>MockBranchPoint *</type>
      <name>start_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>ac44f99128f4e8b2a31ecd134f8fd7b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MockBranchPoint *</type>
      <name>end_bp</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a6d2fa7c191287656de76d5bf8767a007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MockIdIndex *</type>
      <name>GetIdIndex</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_road_geometry.html</anchorfile>
      <anchor>a6beb8686ee08aa396826e1bee33e0d70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::test::MockSegment</name>
    <filename>classmaliput_1_1api_1_1test_1_1_mock_segment.html</filename>
    <base>maliput::api::Segment</base>
    <member kind="function">
      <type></type>
      <name>MockSegment</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_segment.html</anchorfile>
      <anchor>afbe19f69ed47d6acea831b4b4a3a54c4</anchor>
      <arglist>(const SegmentId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_junction</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_segment.html</anchorfile>
      <anchor>a2d5363fe78dac7a8a2fb3264bea28c9d</anchor>
      <arglist>(Junction *junction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lane</name>
      <anchorfile>classmaliput_1_1api_1_1test_1_1_mock_segment.html</anchorfile>
      <anchor>ab18c3ac1d55322f884de6d1313ee2888</anchor>
      <arglist>(std::unique_ptr&lt; MockLane &gt; lane)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::test::MockSegment</name>
    <filename>classmaliput_1_1geometry__base_1_1test_1_1_mock_segment.html</filename>
    <base>maliput::geometry_base::Segment</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_segment.html</anchorfile>
      <anchor>a667227ded4ffb60bad6d5bf69e104a38</anchor>
      <arglist>(MockSegment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MockSegment</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1test_1_1_mock_segment.html</anchorfile>
      <anchor>a9384ed7a03ee84b8f965a5d156f4efee</anchor>
      <arglist>(const api::SegmentId &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::ModelValues</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</filename>
    <member kind="function">
      <type></type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>a1f45d1aab55c6022687b9530be4daf48</anchor>
      <arglist>(ModelValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelValues</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>a3fa3e7765f81b02929b1cf5307b6180f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddModel</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>a493c54c8864d2ffd4965232451fa5def</anchor>
      <arglist>(int index, std::unique_ptr&lt; AbstractValue &gt; model_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddVectorModel</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>a5a569fe3e1652568911af6c1cc8f60af</anchor>
      <arglist>(int index, std::unique_ptr&lt; BasicVector&lt; T &gt;&gt; model_vector)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>CloneModel</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>adab6c3cb8097525237ba6b9b042426db</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; AbstractValue &gt; &gt;</type>
      <name>CloneAllModels</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>ac8922e469d4aba7e75b4eb0507c3f6cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>CloneVectorModel</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_model_values.html</anchorfile>
      <anchor>ae9ebfeecc5680f87607e95f9822e290f</anchor>
      <arglist>(int index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::Polynomial::Monomial</name>
    <filename>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a88e2ca1fa7efb383c5d61833fdae264c</anchor>
      <arglist>(const Monomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a8e7b10a07a1df37f95789d09cfe0e831</anchor>
      <arglist>(const Monomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDegree</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a8d2a0b0dd246af6385d78567af484840</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDegreeOf</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a3619cde92a69a87f2ab626deed0423bb</anchor>
      <arglist>(VarType var) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasSameExponents</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a35228c76335bc78cf446de909c2bf192</anchor>
      <arglist>(const Monomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasVariable</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>aa13862903d5f48177be04d2a293e2e17</anchor>
      <arglist>(const VarType &amp;var) const</arglist>
    </member>
    <member kind="function">
      <type>Monomial</type>
      <name>Factor</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>acd624a99d111544869ff0aa36adbd24f</anchor>
      <arglist>(const Monomial &amp;divisor) const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>coefficient</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>accdf0d016bac585ac8deb1ad2dcad4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Term &gt;</type>
      <name>terms</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_monomial.html</anchorfile>
      <anchor>a50db1dbc4ba83abeeaa830f4c8442bf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::MultiplyEigenSizes</name>
    <filename>structmaliput_1_1drake_1_1_multiply_eigen_sizes.html</filename>
    <templarg>a</templarg>
    <templarg>b</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1_multiply_eigen_sizes.html</anchorfile>
      <anchor>adfbd84e9619cf3366fb744d3f70c8c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::never_destroyed</name>
    <filename>classmaliput_1_1common_1_1never__destroyed.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>never_destroyed</name>
      <anchorfile>classmaliput_1_1common_1_1never__destroyed.html</anchorfile>
      <anchor>a75b0a6d92982429933c36cc5a6c52986</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~never_destroyed</name>
      <anchorfile>classmaliput_1_1common_1_1never__destroyed.html</anchorfile>
      <anchor>a27fa859355b10542c0cdbf991a8c3a66</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>access</name>
      <anchorfile>classmaliput_1_1common_1_1never__destroyed.html</anchorfile>
      <anchor>ac6feb692ac7476f12889dddc877097fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>access</name>
      <anchorfile>classmaliput_1_1common_1_1never__destroyed.html</anchorfile>
      <anchor>a54c5e5d1a51055269e08e00e806dc694</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::never_destroyed</name>
    <filename>classmaliput_1_1drake_1_1never__destroyed.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>never_destroyed</name>
      <anchorfile>classmaliput_1_1drake_1_1never__destroyed.html</anchorfile>
      <anchor>a75b0a6d92982429933c36cc5a6c52986</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~never_destroyed</name>
      <anchorfile>classmaliput_1_1drake_1_1never__destroyed.html</anchorfile>
      <anchor>a27fa859355b10542c0cdbf991a8c3a66</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>access</name>
      <anchorfile>classmaliput_1_1drake_1_1never__destroyed.html</anchorfile>
      <anchor>ac6feb692ac7476f12889dddc877097fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>access</name>
      <anchorfile>classmaliput_1_1drake_1_1never__destroyed.html</anchorfile>
      <anchor>a54c5e5d1a51055269e08e00e806dc694</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::StateProviderResult::Next</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_state_provider_result_1_1_next.html</filename>
    <member kind="variable">
      <type>T</type>
      <name>state</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_state_provider_result_1_1_next.html</anchorfile>
      <anchor>ab1812049cf00b4ad1597ecc964ca3cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>duration_until</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_state_provider_result_1_1_next.html</anchorfile>
      <anchor>a596139dc82c65d2da98dec065523b777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::PhaseRing::NextPhase</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_phase_ring_1_1_next_phase.html</filename>
    <member kind="variable">
      <type>Phase::Id</type>
      <name>id</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_phase_ring_1_1_next_phase.html</anchorfile>
      <anchor>aa6fa72a024a00670c921e553aa8cf3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>duration_until</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_phase_ring_1_1_next_phase.html</anchorfile>
      <anchor>a596139dc82c65d2da98dec065523b777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::NiceTypeName</name>
    <filename>classmaliput_1_1drake_1_1_nice_type_name.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Get</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>a65c4629b9ee5e540e85bfc3298a5445b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>GetFromStorage</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>af93d032818bc937ada53984c09f6369f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Get</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>a73ea459b4177e39bbc122ebdf68fcf51</anchor>
      <arglist>(const T &amp;thing)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Get</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>a4ba4b4bca41ffb50a27c1b1691367a40</anchor>
      <arglist>(const std::type_info &amp;info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Demangle</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>a13ea97365819d400642d83eef2aa0956</anchor>
      <arglist>(const char *typeid_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>Canonicalize</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>ae348464d50b024fade3c46e95cd7e945</anchor>
      <arglist>(const std::string &amp;demangled_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>RemoveNamespaces</name>
      <anchorfile>classmaliput_1_1drake_1_1_nice_type_name.html</anchorfile>
      <anchor>ab79ee31ee980b806b08a3489a58a9a6d</anchor>
      <arglist>(const std::string &amp;canonical_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::details::Node</name>
    <filename>classmaliput_1_1math_1_1details_1_1_node.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a128744a2ec4908deec1ca0dafe0eac2f</anchor>
      <arglist>(const Coordinate &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>get_coordinate</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a9b57233ff6888f8e567d67714ffe995f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_left</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>af186eae9f9214e27e7c0c3520e93cb76</anchor>
      <arglist>(Node *left)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_right</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a5fa3a3bcd86e75b721fd7bdd2d60285f</anchor>
      <arglist>(Node *right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parent</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a5526072d27842a2df56e8b5e57511b12</anchor>
      <arglist>(Node *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_region</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a945ff29f1772383d5da24436f0c34a4f</anchor>
      <arglist>(std::unique_ptr&lt; Region &gt; region)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_index</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a6a6f94b2e5d62a7db00ca99ad9fc1697</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>get_left</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>aa6ee1f2a774d39d6fb5e509c7d1df1ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>get_right</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>aeeef72e2cc67837b776ca5b13e508a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node const  *</type>
      <name>get_left</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a4ec8fe4dc381ef6bacb953326088c28e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node const  *</type>
      <name>get_right</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a22c121549190f0f618ab3e76f7c4886a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>get_parent</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a442955304494214949a7afd491cc14ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Region &amp;</type>
      <name>get_region</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>a7a49fe4e88b6937b648b1268d0de5b0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_index</name>
      <anchorfile>classmaliput_1_1math_1_1details_1_1_node.html</anchorfile>
      <anchor>aa5a7f001c6b9b9a6b13551bc85030a2a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::math::details::NodeCmp</name>
    <filename>structmaliput_1_1math_1_1details_1_1_node_cmp.html</filename>
    <templarg>Dimension</templarg>
    <member kind="function">
      <type></type>
      <name>NodeCmp</name>
      <anchorfile>structmaliput_1_1math_1_1details_1_1_node_cmp.html</anchorfile>
      <anchor>a1f5198164176746922a701048afc3641</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1math_1_1details_1_1_node_cmp.html</anchorfile>
      <anchor>a88947275eddb7251353c4654fc7ef6b4</anchor>
      <arglist>(const Node &amp;lhs, const Node &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>const std::size_t</type>
      <name>index_</name>
      <anchorfile>structmaliput_1_1math_1_1details_1_1_node_cmp.html</anchorfile>
      <anchor>a0e8a5f796e28f6fb0f02a3393d3a2ebc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::ObjFeatures</name>
    <filename>structmaliput_1_1utility_1_1_obj_features.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>max_grid_unit</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a8d57f3351b5df764c8b78ee5f5fcf9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_grid_resolution</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a004c2244d7ebb894c0ea07b68b2d7148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>draw_stripes</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>aaf2029edc899d84e2e85ea279db6c5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>draw_arrows</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>aae126a2532cbe927f260626382739a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>draw_lane_haze</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>abd7f5c230f9de966cdf31b3e88d5ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>draw_branch_points</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>abcb158c48bbae8a772963123acc4a5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>draw_elevation_bounds</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>af9ddcf588d5ba5ce18f4f8b78022e466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>off_grid_mesh_generation</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a0a4b08eb00721f50b2ba88b2d918393d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>simplify_mesh_threshold</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>ac2330d38902bbab705a5846786e9f71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stripe_width</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>ab4c3f41bcfa915e45029b59aa6846db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>stripe_elevation</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>afae2575b5cbde7fe0cb9e510bfa4ee53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>arrow_elevation</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a76ee0ce61bc8bd2468d86d6d2f9b7e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lane_haze_elevation</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a273acfd9766cbd0c1f1d12c95593be0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>branch_point_elevation</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a3fcd6a0f8a5fbd62583e6268cd1559fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>branch_point_height</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>ad0c730e7f797628821b9f3c5a2e44c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>api::InertialPosition</type>
      <name>origin</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a76bd128e684c70a19decc759194e8818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; api::SegmentId &gt;</type>
      <name>highlighted_segments</name>
      <anchorfile>structmaliput_1_1utility_1_1_obj_features.html</anchorfile>
      <anchor>a4bd5260eaed457d678f2b970a0bcc3cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::InitialValueProblem::OdeContext</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</filename>
    <member kind="function">
      <type></type>
      <name>OdeContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>a96cec615ca4dba3e4544c71f7f8300d4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OdeContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>adf1d22081db0a89308fb34077071cf71</anchor>
      <arglist>(const std::optional&lt; T &gt; &amp;t0_in, const std::optional&lt; VectorX&lt; T &gt;&gt; &amp;x0_in, const std::optional&lt; VectorX&lt; T &gt;&gt; &amp;k_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>a4479d6c028190ce02960cfa587a733d5</anchor>
      <arglist>(const OdeContext &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>a22d6c3db886bc7b19d5a786b85531d39</anchor>
      <arglist>(const OdeContext &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>t0</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>a23f82ce075e13b4c8f4efecd0adc28b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; VectorX&lt; T &gt; &gt;</type>
      <name>x0</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>aef990c4b0f5f5b03d6ebe637c2dab762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; VectorX&lt; T &gt; &gt;</type>
      <name>k</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_initial_value_problem_1_1_ode_context.html</anchorfile>
      <anchor>ab853a3a6d8692d0994a854ad92b6ab3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::OutputPort</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_output_port.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::OutputPortBase</base>
    <member kind="function">
      <type></type>
      <name>~OutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>aed197f7c9bc394a53f78d5fe695a11d1</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a4ef25e30496b0c4fe87de7614849a67e</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>afc7d44a180994ec2ed83f96f5c3cdff4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a9c65058916abfe330ffe988e261bfe81</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>Eval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a257a00b7b8215f93499e0ae111e66765</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Allocate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a2efe26650e3867a83766c7da14260ef5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a8520422da7923b8327550ad2807f783d</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, AbstractValue *value) const</arglist>
    </member>
    <member kind="function">
      <type>const System&lt; T &gt; &amp;</type>
      <name>get_system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a5c403016877fd5f6291208aeb9a8063c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OutputPortIndex</type>
      <name>get_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a8e465dd39d0d66dcf9e31b9b8c997604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PortDataType</type>
      <name>get_data_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a2d903c43489b2f5bd6e830a7bacb9bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFullDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>aec11c25e1727cfb34267f023c55523b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a721c2d13d3ce1f64ad39514fdeec8088</anchor>
      <arglist>(const System&lt; T &gt; *system, internal::SystemMessageInterface *system_interface, internal::SystemId system_id, std::string name, OutputPortIndex index, DependencyTicket ticket, PortDataType data_type, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>DoAllocate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a0723a48f7997a82175cdf28941e65f9c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoCalc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a95537b0ac99f6c4408e9fcdd6fdc1541</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, AbstractValue *value) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const AbstractValue &amp;</type>
      <name>DoEval</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>af88e845c5cd35ef910521ea4cfc4978a</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>ThrowIfInvalidPortValueType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>afb9ffc926b2159046fb2fe08325df0a4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const AbstractValue &amp;proposed_value) const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ThrowIfInvalidPortValueType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port.html</anchorfile>
      <anchor>a48ccdb92a406dbc24791fef6352883b1</anchor>
      <arglist>(const OutputPort&lt; T &gt; &amp;port, const Context&lt; T &gt; &amp;context, const AbstractValue &amp;proposed_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::OutputPortBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</filename>
    <base>maliput::drake::systems::PortBase</base>
    <member kind="function">
      <type></type>
      <name>~OutputPortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>a09599f7fee6b9453fc44d31a44a4b7f7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>OutputPortIndex</type>
      <name>get_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>a8e465dd39d0d66dcf9e31b9b8c997604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::OutputPortPrerequisite</type>
      <name>GetPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>a9269b34fcf186727810f08a362589d52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PortDataType</type>
      <name>get_data_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>a2d903c43489b2f5bd6e830a7bacb9bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFullDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>aec11c25e1727cfb34267f023c55523b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputPortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>aef76aef12b599dd6afe42b6fa240bc2a</anchor>
      <arglist>(internal::SystemMessageInterface *owning_system, internal::SystemId owning_system_id, std::string name, OutputPortIndex index, DependencyTicket ticket, PortDataType data_type, int size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual internal::OutputPortPrerequisite</type>
      <name>DoGetPrerequisite</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_output_port_base.html</anchorfile>
      <anchor>aa8d8a837492a37a5f1ea77cc195698b0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::internal::OutputPortPrerequisite</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1internal_1_1_output_port_prerequisite.html</filename>
    <member kind="variable">
      <type>std::optional&lt; SubsystemIndex &gt;</type>
      <name>child_subsystem</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1internal_1_1_output_port_prerequisite.html</anchorfile>
      <anchor>a1a9e24dc73e3797b0c0c45c6ac19eea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DependencyTicket</type>
      <name>dependency</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1internal_1_1_output_port_prerequisite.html</anchorfile>
      <anchor>aedfc37bf31485016a0d11ac8df25b889</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ParameterPackHasher</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_parameter_pack_hasher.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ParameterPackHasher&lt; A, B... &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_parameter_pack_hasher_3_01_a_00_01_b_8_8_8_01_4.html</filename>
    <templarg></templarg>
    <templarg>B</templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_parameter_pack_hasher_3_01_a_00_01_b_8_8_8_01_4.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ParameterPackHasher&lt;&gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_parameter_pack_hasher_3_4.html</filename>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_parameter_pack_hasher_3_4.html</anchorfile>
      <anchor>a9ffb875810fab10d43b2fa137a229a67</anchor>
      <arglist>(FNV1aHasher *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Parameters</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_parameters.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a061bbedbf4fbd963871a388f5e8ebb61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a0f869921ebcf1bdcb7169bd99deae04c</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; BasicVector&lt; T &gt;&gt;&gt; &amp;&amp;numeric, std::vector&lt; std::unique_ptr&lt; AbstractValue &gt;&gt; &amp;&amp;abstract)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a0aef53111700ad4beb2bbcf1febc570a</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; BasicVector&lt; T &gt;&gt;&gt; &amp;&amp;numeric)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>abf077f669abb1db1af1d4fb97578b428</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; AbstractValue &gt;&gt; &amp;&amp;abstract)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>ac8a4cb36781e0348e23ba4775d510a34</anchor>
      <arglist>(std::unique_ptr&lt; BasicVector&lt; T &gt;&gt; vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>aee608e5f1010dac893bc59a1eea45b75</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValue &gt; value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>af9a0e10c79d830769cf1231999f59df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_numeric_parameter_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>aff6508ca0ff8f5e886e63fb9c830e36a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a0232523ac7f8337a392b321ffd282187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a1882d7ad5c503e04bd2aab9de4d196e3</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_numeric_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>acaf28140c1221d5a0a6e3bbd44b62787</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_numeric_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a93b9608b1b54533ea48f96f50af98969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_numeric_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>ae647e3639684ddfb3492e5d8c7cb009e</anchor>
      <arglist>(std::unique_ptr&lt; DiscreteValues&lt; T &gt;&gt; numeric_params)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>get_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>afbcc55465229ce053092fb250908c0e0</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>get_mutable_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>aa82761db1d11f414fcd44e529eefd736</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>get_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>ae1ce888b0dc7484007362c8462822909</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>get_mutable_abstract_parameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>aefa6b590138fb81f0d5ed66c7cf1ae95</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValues &amp;</type>
      <name>get_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a393cd9fac1a86715537ce5bc3d00d95f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>af307c1548f6335a967ff1828af6b5f05</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValues &gt; abstract_params)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Parameters&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>ae99dbe4930cb71a5cf842f03ecfc00b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a071f6f8fa672e8180460bf636d7e2a10</anchor>
      <arglist>(const Parameters&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_parameters.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::Passkey</name>
    <filename>classmaliput_1_1common_1_1_passkey.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>maliput::common::Path</name>
    <filename>classmaliput_1_1common_1_1_path.html</filename>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a93694e72f8df125f90651ca9b2834e4e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>af6a0c273cb3bba1df02110a8ff9d42c5</anchor>
      <arglist>(std::string path_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_path</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>acca2d70d3adb9ff1461e07b20d229362</anchor>
      <arglist>(const std::string &amp;path_) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_as_temp</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>aacf8c226340103efd753ae10d8f7107e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_path</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a1a4932aeec98456fdbbaa70442f7ae71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_file</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a8ecb88b8361b56edca7e78b3c4e61122</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_directory</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a67f95fcc88068b2ecec6c676b04e906f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_absolute</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a6fa3783ce36e6e65017109696310e8bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a574c4186b0cff13b95db8ccb8902e3fb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classmaliput_1_1common_1_1_path.html</anchorfile>
      <anchor>a765916b34f4e9cb8701d2a110ca3c8b4</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::PeriodicEventData</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</filename>
    <base>maliput::drake::systems::EventData</base>
    <member kind="function">
      <type></type>
      <name>PeriodicEventData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>ae588dec607388ee28c77efe336f44eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>a7649218316adcb6a33701cb04f48253f</anchor>
      <arglist>(PeriodicEventData)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>period_sec</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>ae0d549f7573f59c0d28ea09b9afa5368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_period_sec</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>ad31e9e292fc3e1c8bab07478633e9a5b</anchor>
      <arglist>(double period_sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offset_sec</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>a55aa9905f485cb2da33a6aaa66d0ba2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_offset_sec</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_periodic_event_data.html</anchorfile>
      <anchor>ab996311c7a243e244a41ac05300fbe45</anchor>
      <arglist>(double offset_sec)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::PeriodicEventDataComparator</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_periodic_event_data_comparator.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_periodic_event_data_comparator.html</anchorfile>
      <anchor>a427c5f42d5940b0e40fba4abe2b3111a</anchor>
      <arglist>(const PeriodicEventData &amp;a, const PeriodicEventData &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::Phase</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_phase.html</filename>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; Phase &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>a28884c4f9c4ef1b0eef097e0144d53f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>a2169556a6fa6eb4b471e4dff30d1b2b8</anchor>
      <arglist>(Phase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Phase</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>acfe980c69a18093d583084dd7bf3d245</anchor>
      <arglist>(const Id &amp;id, const RuleStates &amp;rule_states, const DiscreteValueRuleStates &amp;discrete_value_rule_states, std::optional&lt; BulbStates &gt; bulb_states=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RuleStates &amp;</type>
      <name>rule_states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>a3060071c9ab5a7ee795c8265b3995d07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteValueRuleStates &amp;</type>
      <name>discrete_value_rule_states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>a19ef473ac8d7c8c07173f5a6d49189b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; BulbStates &gt; &amp;</type>
      <name>bulb_states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase.html</anchorfile>
      <anchor>af0069101d3faeadec6ee406dfb87e069</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::routing::Phase</name>
    <filename>classmaliput_1_1routing_1_1_phase.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a2169556a6fa6eb4b471e4dff30d1b2b8</anchor>
      <arglist>(Phase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Phase</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>ae960e18202bce8c2da42100b5f91e600</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Phase</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a47e3324cc9a8b594a62868ece0bdc822</anchor>
      <arglist>(int index, double lane_s_range_tolerance, const std::vector&lt; api::RoadPosition &gt; &amp;start_positions, const std::vector&lt; api::RoadPosition &gt; &amp;end_positions, const std::vector&lt; api::LaneSRange &gt; &amp;lane_s_ranges, const api::RoadNetwork *road_network)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>acca41811e8aaab0112b987749c0ecb93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lane_s_range_tolerance</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>abc2d9d0242072ee958c930f8a7b84bee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; api::RoadPosition &gt; &amp;</type>
      <name>start_positions</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a615c02803f89f1d84f1decefcaea7ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; api::RoadPosition &gt; &amp;</type>
      <name>end_positions</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>addf28482696d184b61df87aa0da6f75e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; api::LaneSRange &gt; &amp;</type>
      <name>lane_s_ranges</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a9776ed4691a409b9d76cd1406bf9b7ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PhasePositionResult</type>
      <name>FindPhasePosition</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a6c50d877f40fe7e7289006926cc44bd1</anchor>
      <arglist>(const api::InertialPosition &amp;inertial_position) const</arglist>
    </member>
    <member kind="function">
      <type>PhasePositionResult</type>
      <name>FindPhasePosition</name>
      <anchorfile>classmaliput_1_1routing_1_1_phase.html</anchorfile>
      <anchor>a765ae934c9763d73fc6e7e049c2d3f52</anchor>
      <arglist>(const api::RoadPosition &amp;road_position) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::PhaseBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_phase_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_phase_build_flags.html</anchorfile>
      <anchor>a2ffd1449164dca84edd48d39795bcc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_value</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_phase_build_flags.html</anchorfile>
      <anchor>a23c46209105cd4301100d63f326136c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_bulb</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_phase_build_flags.html</anchorfile>
      <anchor>a3cf148749f7869f6cf3a672cc43bf702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_bulb_state</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_phase_build_flags.html</anchorfile>
      <anchor>a0368b569152b7101bc05a58d42b33a8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::PhasedDiscreteRuleStateProvider</name>
    <filename>classmaliput_1_1_phased_discrete_rule_state_provider.html</filename>
    <base>maliput::ManualDiscreteValueRuleStateProvider</base>
    <member kind="function">
      <type></type>
      <name>PhasedDiscreteRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_phased_discrete_rule_state_provider.html</anchorfile>
      <anchor>a6709342389dca266f5d49928fd1696df</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::PhaseRingBook *phase_ring_book, const api::rules::PhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhasedDiscreteRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_phased_discrete_rule_state_provider.html</anchorfile>
      <anchor>ab8d1c6e276ab978f698664fe78a99f5e</anchor>
      <arglist>() final=default</arglist>
    </member>
    <member kind="function">
      <type>const api::rules::PhaseRingBook &amp;</type>
      <name>phase_ring_book</name>
      <anchorfile>classmaliput_1_1_phased_discrete_rule_state_provider.html</anchorfile>
      <anchor>afde30b154df0caf6a8c85fa29721f783</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const api::rules::PhaseProvider &amp;</type>
      <name>phase_provider</name>
      <anchorfile>classmaliput_1_1_phased_discrete_rule_state_provider.html</anchorfile>
      <anchor>afed31264b8838b06457bf5a3faa96976</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; PhasedDiscreteRuleStateProvider &gt;</type>
      <name>GetDefaultPhasedDiscreteRuleStateProvider</name>
      <anchorfile>classmaliput_1_1_phased_discrete_rule_state_provider.html</anchorfile>
      <anchor>ab52d68e81707f7071956f2f6e5ad92d3</anchor>
      <arglist>(const maliput::api::rules::RoadRulebook *rulebook, const maliput::api::rules::PhaseRingBook *phase_ring_book, const maliput::api::rules::PhaseProvider *phase_provider)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::routing::PhasePositionResult</name>
    <filename>structmaliput_1_1routing_1_1_phase_position_result.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>lane_s_range_index</name>
      <anchorfile>structmaliput_1_1routing_1_1_phase_position_result.html</anchorfile>
      <anchor>a06c787ebce499f647c3dbc830e542aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>api::LanePosition</type>
      <name>lane_position</name>
      <anchorfile>structmaliput_1_1routing_1_1_phase_position_result.html</anchorfile>
      <anchor>aa75356e55277ab0292643ec02e5e54fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>api::InertialPosition</type>
      <name>inertial_position</name>
      <anchorfile>structmaliput_1_1routing_1_1_phase_position_result.html</anchorfile>
      <anchor>acdbf55e2e5d62afffb05c7fef824a761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structmaliput_1_1routing_1_1_phase_position_result.html</anchorfile>
      <anchor>a79b8e036dca6911e3295a47d99f21f43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::PhaseProvider</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</filename>
    <member kind="typedef">
      <type>StateProviderResult&lt; Phase::Id &gt;</type>
      <name>Result</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</anchorfile>
      <anchor>a819817caf867decf849b9e7be94171e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</anchorfile>
      <anchor>a6968b38437f1101e353deccd50831f87</anchor>
      <arglist>(PhaseProvider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhaseProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</anchorfile>
      <anchor>a4bf3f1f6a74fffddf986b1a6ee1b5df8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Result &gt;</type>
      <name>GetPhase</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</anchorfile>
      <anchor>a61a656ce95c9191c1fdddc042ef9400d</anchor>
      <arglist>(const PhaseRing::Id &amp;id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhaseProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_provider.html</anchorfile>
      <anchor>a4c5f43b42a4518415fd7ecebf51f32c2</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::PhaseRing</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</filename>
    <class kind="struct">maliput::api::rules::PhaseRing::NextPhase</class>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class PhaseRing &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>ab0106b35b56a5f162860159a7a84c142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>a7fec8f82b08aab0b8639b7386ef55914</anchor>
      <arglist>(PhaseRing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhaseRing</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>afcd0bbfed54d0cdc057502e6402156d2</anchor>
      <arglist>(const Id &amp;id, const std::vector&lt; Phase &gt; &amp;phases, const std::optional&lt; const std::unordered_map&lt; Phase::Id, std::vector&lt; NextPhase &gt;&gt;&gt; &amp;next_phases=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Phase &gt;</type>
      <name>GetPhase</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>ac5995633c538cc2d86f301de8c3b347d</anchor>
      <arglist>(const Phase::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; Phase::Id, Phase &gt; &amp;</type>
      <name>phases</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>aee134852f79a1bf905c4bb31c20fffeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::unordered_map&lt; Phase::Id, std::vector&lt; NextPhase &gt; &gt; &amp;</type>
      <name>next_phases</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>a027dab585f573a270012840d7cc53c35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; NextPhase &gt; &amp;</type>
      <name>GetNextPhases</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring.html</anchorfile>
      <anchor>a684aafefa0325161f5f66b34f60acdca</anchor>
      <arglist>(const Phase::Id &amp;id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::PhaseRingBook</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>a77cc6cf0c684f36ec5adf1537ec22674</anchor>
      <arglist>(PhaseRingBook)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhaseRingBook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>aa149878bbe36e61516bb39a6123a4754</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; PhaseRing::Id &gt;</type>
      <name>GetPhaseRings</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>a315e9d471ae5df59ed1af99e0c634aaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; PhaseRing &gt;</type>
      <name>GetPhaseRing</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>a68aaf552dffc58abd508fb0aec7ac73e</anchor>
      <arglist>(const PhaseRing::Id &amp;ring_id) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; PhaseRing &gt;</type>
      <name>FindPhaseRing</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>a8933725159086d32e97ee2d553c9d8d5</anchor>
      <arglist>(const RightOfWayRule::Id &amp;rule_id) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; PhaseRing &gt;</type>
      <name>FindPhaseRing</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>a5705ba2f20347d8aa665de843040684f</anchor>
      <arglist>(const Rule::Id &amp;rule_id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhaseRingBook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_phase_ring_book.html</anchorfile>
      <anchor>aacbcec8f13f20fd9637ecb66847bef03</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::trajectories::PiecewisePolynomial</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</filename>
    <templarg></templarg>
    <base>maliput::drake::trajectories::PiecewiseTrajectory</base>
    <member kind="typedef">
      <type>MatrixX&lt; Polynomial&lt; T &gt; &gt;</type>
      <name>PolynomialMatrix</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9c5cbf1ba95055937fdb8283769df797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a6a44781cbe3dd6c55234638a1b63d4ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a838cb1725eb9ba7896158fa9032ecdcc</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;constant_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9145f61319cb888cb71fc58cebc8fe38</anchor>
      <arglist>(const std::vector&lt; PolynomialMatrix &gt; &amp;polynomials_matrix, const std::vector&lt; T &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a481736a225b93bd2343445f02c8eafec</anchor>
      <arglist>(const std::vector&lt; Polynomial&lt; T &gt;&gt; &amp;polynomials, const std::vector&lt; T &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5dc4d107b331f4e33f2893826c44be27</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a0ed3c4da7fb13c79983a5be307338583</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9145f61319cb888cb71fc58cebc8fe38</anchor>
      <arglist>(const std::vector&lt; PolynomialMatrix &gt; &amp;polynomials_matrix, const std::vector&lt; T &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a481736a225b93bd2343445f02c8eafec</anchor>
      <arglist>(const std::vector&lt; Polynomial&lt; T &gt;&gt; &amp;polynomials, const std::vector&lt; T &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5dc4d107b331f4e33f2893826c44be27</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a0ed3c4da7fb13c79983a5be307338583</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; T &gt;</type>
      <name>derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a405f92e0e677a316b9a8ed8ec841befd</anchor>
      <arglist>(int derivative_order=1) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; T &gt;</type>
      <name>integral</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aeaceab81f8d6fd7e3af6d32b076fea0a</anchor>
      <arglist>(const T &amp;value_at_start_time=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; T &gt;</type>
      <name>integral</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5b78f80cc7c6bffcf1ba8a79416544c9</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixX&lt; T &gt;&gt; &amp;value_at_start_time) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>scalarValue</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a16274d0c316c76ded4b85111b38ece15</anchor>
      <arglist>(const T &amp;t, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a19b632df0f98f9aaf224e534fac69ec8</anchor>
      <arglist>(const T &amp;t) const override</arglist>
    </member>
    <member kind="function">
      <type>const PolynomialMatrix &amp;</type>
      <name>getPolynomialMatrix</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>acda577405638cba7837a16bce8362e08</anchor>
      <arglist>(int segment_index) const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial&lt; T &gt; &amp;</type>
      <name>getPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>acc499221b2ff0630d2b79d1fc9ec61d4</anchor>
      <arglist>(int segment_index, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSegmentPolynomialDegree</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aa5a111a1944f16bb21873433d4b7b31d</anchor>
      <arglist>(int segment_index, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Index</type>
      <name>rows</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9aa1f1cfff6dcb352d5fbb15a80ee1a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Index</type>
      <name>cols</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>adca8eca2ee324f57170dedfb4b06160b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reshape</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a39001029f6f2e13a8890f233254c4709</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial</type>
      <name>Block</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>abadcaf3333fa82c22d1835f0b151522c</anchor>
      <arglist>(int start_row, int start_col, int block_rows, int block_cols) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ae44a69e3135eab274fe0e1eefd64397c</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a7a78122bd02f0a481d15f004538fe3cc</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>af3bed7e633dcce69577d997599ffceeb</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a8719499effc43742b2551756aa5f0ca3</anchor>
      <arglist>(const MatrixX&lt; T &gt; &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afa886143234d257349d3b4c3074b2b46</anchor>
      <arglist>(const MatrixX&lt; T &gt; &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad9c6238655481e93cd87e12125e5cb4b</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a036be284513923ec17cc591add07dced</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afd3b25aa337e3ee75f62173d9694f5e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a516c09907a0d8f3f50ee68cea561358f</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a02cf66c84fa13d64a6313a3b28f8ba52</anchor>
      <arglist>(const MatrixX&lt; T &gt; &amp;coeff) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a11188ab9da7d28178b479fb982e7584c</anchor>
      <arglist>(const MatrixX&lt; T &gt; &amp;coeff) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5d7edaa991443e887ca36e0fd20b96c7</anchor>
      <arglist>(const PiecewisePolynomial &amp;other, double tol, const ToleranceType &amp;tol_type=ToleranceType::kRelative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConcatenateInTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a75d7ffe2f4e1a808aaeb76a871f772e2</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendCubicHermiteSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ac93013774f250920857c17c083350b57</anchor>
      <arglist>(const T &amp;time, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;sample, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;sample_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendFirstOrderSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a603a4e747fb099305c01f8762e8cff23</anchor>
      <arglist>(const T &amp;time, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFinalSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a88e900c12b23dd1cb0bccb6d0357db5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReverseTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afca7568bb098808d681cb14d7fa09f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a923a4ac5ef6f85f444519188d9dbd3e1</anchor>
      <arglist>(const T &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftRight</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a728995759fa06a8d1a2b967d313b6d6b</anchor>
      <arglist>(const T &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolynomialMatrixBlock</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9a7863e6bf8a3ccb5335563370305add</anchor>
      <arglist>(const PolynomialMatrix &amp;replacement, int segment_index, Eigen::Index row_start=0, Eigen::Index col_start=0)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial</type>
      <name>slice</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aaa36391c5f1fc46089a7b4c9e0953a0e</anchor>
      <arglist>(int start_segment_index, int num_segments) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>ZeroOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a695f2e7cbbe881ea10b500cb77da61fb</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>ZeroOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9b98ea8f2257d622472c8007150df254</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>FirstOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a7ced7dd68c8859113c25ddb246c0731d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>FirstOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad7d0be81b234de76119137d20f22944f</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicShapePreserving</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a63b48f9ba20cdd5c5cd6b2e734aeebd4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples, bool zero_end_point_derivatives=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicShapePreserving</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ab7bb43b4e72ae2a372e558b0bdb08933</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples, bool zero_end_point_derivatives=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad8cae6fa5770ea8da991ede4ae30a693</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples, const MatrixX&lt; T &gt; &amp;sample_dot_at_start, const MatrixX&lt; T &gt; &amp;sample_dot_at_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a1be5045e91910c89639178ec98cfd720</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;sample_dot_at_start, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;sample_dot_at_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicHermite</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aae84462532164ec6fb3f9b181546242e</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples_dot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicHermite</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a94ee5e424405c47c2a7f62e14564d095</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples_dot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a03c3fa44ee4e93658163ad2234ec7270</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a084e9ea134495967cf3c17f9d522a3d9</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>Cubic</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5076a155bf5d04598cd9bf7ec40b0ddf</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial</type>
      <name>LagrangeInterpolatingPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a101bb74dd8b817701560fc1ff1ce79c1</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;times, const std::vector&lt; MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; T &gt;</type>
      <name>LagrangeInterpolatingPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a4c3d7a00651b75409a8db12c098aae4d</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;times, const Eigen::Ref&lt; const MatrixX&lt; T &gt;&gt; &amp;samples)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PiecewisePolynomial&lt; double &gt;</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</filename>
    <base>PiecewiseTrajectory&lt; double &gt;</base>
    <member kind="typedef">
      <type>MatrixX&lt; Polynomial&lt; double &gt; &gt;</type>
      <name>PolynomialMatrix</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9c5cbf1ba95055937fdb8283769df797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a6a44781cbe3dd6c55234638a1b63d4ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a838cb1725eb9ba7896158fa9032ecdcc</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;constant_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9145f61319cb888cb71fc58cebc8fe38</anchor>
      <arglist>(const std::vector&lt; PolynomialMatrix &gt; &amp;polynomials_matrix, const std::vector&lt; double &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a481736a225b93bd2343445f02c8eafec</anchor>
      <arglist>(const std::vector&lt; Polynomial&lt; double &gt;&gt; &amp;polynomials, const std::vector&lt; double &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5dc4d107b331f4e33f2893826c44be27</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; double &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a0ed3c4da7fb13c79983a5be307338583</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; double &gt;</type>
      <name>derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a405f92e0e677a316b9a8ed8ec841befd</anchor>
      <arglist>(int derivative_order=1) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; double &gt;</type>
      <name>integral</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aeaceab81f8d6fd7e3af6d32b076fea0a</anchor>
      <arglist>(const double &amp;value_at_start_time=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial&lt; double &gt;</type>
      <name>integral</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5b78f80cc7c6bffcf1ba8a79416544c9</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixX&lt; double &gt;&gt; &amp;value_at_start_time) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scalarValue</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a16274d0c316c76ded4b85111b38ece15</anchor>
      <arglist>(const double &amp;t, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; double &gt;</type>
      <name>value</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a19b632df0f98f9aaf224e534fac69ec8</anchor>
      <arglist>(const double &amp;t) const override</arglist>
    </member>
    <member kind="function">
      <type>const PolynomialMatrix &amp;</type>
      <name>getPolynomialMatrix</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>acda577405638cba7837a16bce8362e08</anchor>
      <arglist>(int segment_index) const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial&lt; double &gt; &amp;</type>
      <name>getPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>acc499221b2ff0630d2b79d1fc9ec61d4</anchor>
      <arglist>(int segment_index, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSegmentPolynomialDegree</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aa5a111a1944f16bb21873433d4b7b31d</anchor>
      <arglist>(int segment_index, Eigen::Index row=0, Eigen::Index col=0) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Index</type>
      <name>rows</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9aa1f1cfff6dcb352d5fbb15a80ee1a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Index</type>
      <name>cols</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>adca8eca2ee324f57170dedfb4b06160b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Reshape</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a39001029f6f2e13a8890f233254c4709</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial</type>
      <name>Block</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>abadcaf3333fa82c22d1835f0b151522c</anchor>
      <arglist>(int start_row, int start_col, int block_rows, int block_cols) const</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ae44a69e3135eab274fe0e1eefd64397c</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a8719499effc43742b2551756aa5f0ca3</anchor>
      <arglist>(const MatrixX&lt; double &gt; &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a7a78122bd02f0a481d15f004538fe3cc</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afa886143234d257349d3b4c3074b2b46</anchor>
      <arglist>(const MatrixX&lt; double &gt; &amp;coeff)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>af3bed7e633dcce69577d997599ffceeb</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad9c6238655481e93cd87e12125e5cb4b</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a02cf66c84fa13d64a6313a3b28f8ba52</anchor>
      <arglist>(const MatrixX&lt; double &gt; &amp;coeff) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a036be284513923ec17cc591add07dced</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afd3b25aa337e3ee75f62173d9694f5e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a11188ab9da7d28178b479fb982e7584c</anchor>
      <arglist>(const MatrixX&lt; double &gt; &amp;coeff) const</arglist>
    </member>
    <member kind="function">
      <type>const PiecewisePolynomial</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a516c09907a0d8f3f50ee68cea561358f</anchor>
      <arglist>(const PiecewisePolynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5d7edaa991443e887ca36e0fd20b96c7</anchor>
      <arglist>(const PiecewisePolynomial &amp;other, double tol, const ToleranceType &amp;tol_type=ToleranceType::kRelative) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConcatenateInTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a75d7ffe2f4e1a808aaeb76a871f772e2</anchor>
      <arglist>(const PiecewisePolynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendCubicHermiteSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ac93013774f250920857c17c083350b57</anchor>
      <arglist>(const double &amp;time, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;sample, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;sample_dot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendFirstOrderSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a603a4e747fb099305c01f8762e8cff23</anchor>
      <arglist>(const double &amp;time, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveFinalSegment</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a88e900c12b23dd1cb0bccb6d0357db5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReverseTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>afca7568bb098808d681cb14d7fa09f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ScaleTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a923a4ac5ef6f85f444519188d9dbd3e1</anchor>
      <arglist>(const double &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftRight</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a728995759fa06a8d1a2b967d313b6d6b</anchor>
      <arglist>(const double &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolynomialMatrixBlock</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9a7863e6bf8a3ccb5335563370305add</anchor>
      <arglist>(const PolynomialMatrix &amp;replacement, int segment_index, Eigen::Index row_start=0, Eigen::Index col_start=0)</arglist>
    </member>
    <member kind="function">
      <type>PiecewisePolynomial</type>
      <name>slice</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aaa36391c5f1fc46089a7b4c9e0953a0e</anchor>
      <arglist>(int start_segment_index, int num_segments) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>ZeroOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a695f2e7cbbe881ea10b500cb77da61fb</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>ZeroOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9b98ea8f2257d622472c8007150df254</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>FirstOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a7ced7dd68c8859113c25ddb246c0731d</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>FirstOrderHold</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad7d0be81b234de76119137d20f22944f</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicShapePreserving</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a63b48f9ba20cdd5c5cd6b2e734aeebd4</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples, bool zero_end_point_derivatives=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicShapePreserving</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ab7bb43b4e72ae2a372e558b0bdb08933</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples, bool zero_end_point_derivatives=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>ad8cae6fa5770ea8da991ede4ae30a693</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples, const MatrixX&lt; double &gt; &amp;sample_dot_at_start, const MatrixX&lt; double &gt; &amp;sample_dot_at_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a1be5045e91910c89639178ec98cfd720</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples, const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;sample_dot_at_start, const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;sample_dot_at_end)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a03c3fa44ee4e93658163ad2234ec7270</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicWithContinuousSecondDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a084e9ea134495967cf3c17f9d522a3d9</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicHermite</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>aae84462532164ec6fb3f9b181546242e</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples_dot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>CubicHermite</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a94ee5e424405c47c2a7f62e14564d095</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples_dot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>Cubic</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5076a155bf5d04598cd9bf7ec40b0ddf</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;breaks, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples, bool periodic_end_condition=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial</type>
      <name>LagrangeInterpolatingPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a101bb74dd8b817701560fc1ff1ce79c1</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;times, const std::vector&lt; MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PiecewisePolynomial&lt; double &gt;</type>
      <name>LagrangeInterpolatingPolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a4c3d7a00651b75409a8db12c098aae4d</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;times, const Eigen::Ref&lt; const MatrixX&lt; double &gt;&gt; &amp;samples)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a9145f61319cb888cb71fc58cebc8fe38</anchor>
      <arglist>(const std::vector&lt; PolynomialMatrix &gt; &amp;polynomials_matrix, const std::vector&lt; double &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a481736a225b93bd2343445f02c8eafec</anchor>
      <arglist>(const std::vector&lt; Polynomial&lt; double &gt;&gt; &amp;polynomials, const std::vector&lt; double &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PiecewisePolynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a5dc4d107b331f4e33f2893826c44be27</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; double &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_polynomial.html</anchorfile>
      <anchor>a0ed3c4da7fb13c79983a5be307338583</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::trajectories::PiecewiseTrajectory</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</filename>
    <templarg></templarg>
    <base>maliput::drake::trajectories::Trajectory</base>
    <member kind="function">
      <type></type>
      <name>~PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a80ed62d7a0f2d3eee401cdd29e47d534</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_segments</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a4ff5241db765b5a4de7c88bb996d39a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a1019f41dcfe440c98c91029f4b0b0bc0</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a4c1604e170d921c073e4fba715622507</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>duration</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>af88c3d4b35f53401069500f721083309</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>ae09cf8e8ad481f69f3cc1969ef491d60</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a641bfb18296d6976a000cf31c213dfdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>is_time_in_range</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>acae435d14c7da7e732884c43b125040a</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_segment_index</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a326ae949f44158da731ef777bba601ec</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; T &gt; &amp;</type>
      <name>get_segment_times</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>ab5b1a0b2d9113c656018bcace89985b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>segment_number_range_check</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0a4ac30a258a47b6ea610f16f4accece</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; T &gt;</type>
      <name>RandomSegmentTimes</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aad4001fcda1c36c46e6589a1c3c94e7b</anchor>
      <arglist>(int num_segments, std::default_random_engine &amp;generator)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>kEpsilonTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0539f01602cd1ab9b25989206d302401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a293c775020a0b5f25770dd398ea14f1d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a205b86a6552919d515ba544c185c04c3</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SegmentTimesEqual</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0f1bc48c32072f8a84aa295528a66440</anchor>
      <arglist>(const PiecewiseTrajectory &amp;b, double tol=kEpsilonTime) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; T &gt; &amp;</type>
      <name>breaks</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aa1a71ddfb9ab85211d522ad0e948c426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; T &gt; &amp;</type>
      <name>get_mutable_breaks</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aaeabb3c1dcb114550eee132dcebb3a6e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PiecewiseTrajectory&lt; double &gt;</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</filename>
    <base>Trajectory&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>~PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a80ed62d7a0f2d3eee401cdd29e47d534</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_segments</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a4ff5241db765b5a4de7c88bb996d39a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a1019f41dcfe440c98c91029f4b0b0bc0</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>ae09cf8e8ad481f69f3cc1969ef491d60</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a4c1604e170d921c073e4fba715622507</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a641bfb18296d6976a000cf31c213dfdf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>duration</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>af88c3d4b35f53401069500f721083309</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; double &gt;</type>
      <name>is_time_in_range</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>acae435d14c7da7e732884c43b125040a</anchor>
      <arglist>(const double &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_segment_index</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a326ae949f44158da731ef777bba601ec</anchor>
      <arglist>(const double &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>get_segment_times</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>ab5b1a0b2d9113c656018bcace89985b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>segment_number_range_check</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0a4ac30a258a47b6ea610f16f4accece</anchor>
      <arglist>(int segment_number) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; double &gt;</type>
      <name>RandomSegmentTimes</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aad4001fcda1c36c46e6589a1c3c94e7b</anchor>
      <arglist>(int num_segments, std::default_random_engine &amp;generator)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>kEpsilonTime</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0539f01602cd1ab9b25989206d302401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a293c775020a0b5f25770dd398ea14f1d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PiecewiseTrajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a205b86a6552919d515ba544c185c04c3</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;breaks)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>SegmentTimesEqual</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>a0f1bc48c32072f8a84aa295528a66440</anchor>
      <arglist>(const PiecewiseTrajectory &amp;b, double tol=kEpsilonTime) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>breaks</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aa1a71ddfb9ab85211d522ad0e948c426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>get_mutable_breaks</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_piecewise_trajectory.html</anchorfile>
      <anchor>aaeabb3c1dcb114550eee132dcebb3a6e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::Polynomial</name>
    <filename>classmaliput_1_1drake_1_1_polynomial.html</filename>
    <templarg></templarg>
    <class kind="class">maliput::drake::Polynomial::Monomial</class>
    <class kind="struct">maliput::drake::Polynomial::Product</class>
    <class kind="class">maliput::drake::Polynomial::Term</class>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VarType</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>adb36a6e938f851b1a5d1a443c2dadb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>PowerType</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a6b2fc1d3e138053b9dc8864815059fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::NumTraits&lt; T &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a48c24f8f3b4b14f7e4bb9fbde3748fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>RootType</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a81b4c054beeae81d6d01bfd5412a89cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; RootType, Eigen::Dynamic, 1 &gt;</type>
      <name>RootsType</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ac85a9dd1caea93fdcdbffd1432f70060</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a100a5bf5551cf0a27f1cbad36bc717f8</anchor>
      <arglist>(Polynomial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a925044e356137ea2d1ee6af62fea4156</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a2f4e320eb4e56b74c4e212067ae9fbf0</anchor>
      <arglist>(const T &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a113f39750edd840d2f269940e5ca1cb6</anchor>
      <arglist>(const T coeff, const std::vector&lt; Term &gt; &amp;terms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>afcb80fce8585dd54f26ea753fb3fa4ac</anchor>
      <arglist>(typename std::vector&lt; Monomial &gt;::const_iterator start, typename std::vector&lt; Monomial &gt;::const_iterator finish)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ab2d984c6a3f814a0cfe120febe762139</anchor>
      <arglist>(const std::enable_if_t&lt; std::is_same_v&lt; U, double &gt;, std::string &gt; &amp;varname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ab0f5130d25206fac74ef07d81bf8ec23</anchor>
      <arglist>(const std::string &amp;varname, unsigned int num)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a5d1a539c279243b61fdc12c6cfeaed57</anchor>
      <arglist>(const T &amp;coeff, const VarType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>adadeb111fed29f32b77bc86e66356b7c</anchor>
      <arglist>(Eigen::MatrixBase&lt; Derived &gt; const &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetNumberOfCoefficients</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a3d04328e0ea4df22f47e1651c706082d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetDegree</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a8d2a0b0dd246af6385d78567af484840</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsAffine</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a0a83f7960aa020c56d20f435dba4d3cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VarType</type>
      <name>GetSimpleVariable</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a0e0d4eb5592e1778a328c776cfdbaff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Monomial &gt; &amp;</type>
      <name>GetMonomials</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a8432d20cc69ea7f5ea89440675a4338a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
      <name>GetCoefficients</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a8ec5ea1913423c51079d9ab73d9ac4b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; VarType &gt;</type>
      <name>GetVariables</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>af924d1eae239893e582f147c0d99c0f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Product&lt; T, U &gt;::type</type>
      <name>EvaluateUnivariate</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a270da73b23ef39efde1f1848d6349434</anchor>
      <arglist>(const U &amp;x, int derivative_order=0) const</arglist>
    </member>
    <member kind="function">
      <type>Product&lt; T, U &gt;::type</type>
      <name>EvaluateMultivariate</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a96ba53803e4244c1878ed9ad381854a7</anchor>
      <arglist>(const std::map&lt; VarType, U &gt; &amp;var_values) const</arglist>
    </member>
    <member kind="function">
      <type>Polynomial</type>
      <name>EvaluatePartial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a09e6270f0971946ecc0de262e8d4262d</anchor>
      <arglist>(const std::map&lt; VarType, T &gt; &amp;var_values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Subs</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a5590d23d37495f26e4e0226674af2436</anchor>
      <arglist>(const VarType &amp;orig, const VarType &amp;replacement)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial</type>
      <name>Substitute</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a7ee7d612098b4de4475fcc811524e5bd</anchor>
      <arglist>(const VarType &amp;orig, const Polynomial &amp;replacement) const</arglist>
    </member>
    <member kind="function">
      <type>Polynomial</type>
      <name>Derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a0336e52f67607fbff0f977957b3c1767</anchor>
      <arglist>(int derivative_order=1) const</arglist>
    </member>
    <member kind="function">
      <type>Polynomial</type>
      <name>Integral</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a6c10c8fefc659082a842ee8bcfaa7e49</anchor>
      <arglist>(const T &amp;integration_constant=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>aaebc4cbcf8fd3bf18645752aaf7ef737</anchor>
      <arglist>(const Polynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a349fd2f5f3296a57e503bf9f2f25bc55</anchor>
      <arglist>(const Polynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a56dea1c182be53c20a023d0491bd232c</anchor>
      <arglist>(const Polynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a3952b5f6fd4e4511308c25378410a681</anchor>
      <arglist>(const Polynomial &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ac953c575d21d5a15e32f15843a3ffd73</anchor>
      <arglist>(const T &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a505f7254aa02795a355d1d17b9924b7e</anchor>
      <arglist>(const T &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a4eed76bee77b5ad0e3b7a8ed7ad4f9e6</anchor>
      <arglist>(const T &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial &amp;</type>
      <name>operator/=</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a47d3fb5ec2fcf7fc4365c9100cc8a2f3</anchor>
      <arglist>(const T &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a0464cbf2371ba0b4254c78aecb174f6b</anchor>
      <arglist>(const Polynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ae8bb15c538e5739e97ded4caa5ddf590</anchor>
      <arglist>(const Polynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a0275f6d151c53f7ae3c0d645db2aaec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a4fb9d0b2269ab915f93bb26e1fcd7b9f</anchor>
      <arglist>(const Polynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Polynomial</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a764fb4851ea9ef16fc735c57b3a66967</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>aa2b38df08e0829d532b692c75e955437</anchor>
      <arglist>(const Polynomial &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RootsType</type>
      <name>Roots</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>aed15493256103062c999ca5739532f9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>CoefficientsAlmostEqual</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ad96f76c37313cb0d62582faccf358345</anchor>
      <arglist>(const Polynomial&lt; T &gt; &amp;other, const RealScalar &amp;tol=0.0, const ToleranceType &amp;tol_type=ToleranceType::kAbsolute) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a5edf2dfefd6d391b2d000e6c21fd2406</anchor>
      <arglist>(typename vector&lt; typename Polynomial&lt; T &gt;::Monomial &gt;::const_iterator start, typename vector&lt; typename Polynomial&lt; T &gt;::Monomial &gt;::const_iterator finish)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>IsValidVariableName</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a66031d7124f1d4710df732932f66b042</anchor>
      <arglist>(const std::string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VarType</type>
      <name>VariableNameToId</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ad2f43a048e292ff698237273e0a1a637</anchor>
      <arglist>(const std::string name, unsigned int m=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>IdToVariableName</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a80ab2cabde507b1a643ca345680f787f</anchor>
      <arglist>(const VarType id)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a62c22201b8ff6def376daf176c290a22</anchor>
      <arglist>(const Polynomial &amp;p, const T &amp;scalar)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a183dd01360f34de98001d40dfb9ee966</anchor>
      <arglist>(const T &amp;scalar, const Polynomial &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>af7d8896c8e3a81c6fddb05cf9bbb4437</anchor>
      <arglist>(const Polynomial &amp;p, const T &amp;scalar)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a80788fabb1092d41b99d3239713f86c1</anchor>
      <arglist>(const T &amp;scalar, const Polynomial &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>ad8ddb04abdecdd1e163e625f4fc7aae9</anchor>
      <arglist>(const Polynomial &amp;p, const T &amp;scalar)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Polynomial</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a1a07e19787fa6fe1feb5913ce16dc4ff</anchor>
      <arglist>(const T &amp;scalar, const Polynomial &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a3dd692da2aab783313611876753b0b3f</anchor>
      <arglist>(std::ostream &amp;os, const Monomial &amp;m)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a268b9f8605e7fc2cca049db6c64182cf</anchor>
      <arglist>(std::ostream &amp;os, const Polynomial &amp;poly)</arglist>
    </member>
    <member kind="friend">
      <type>friend Polynomial&lt; U &gt;</type>
      <name>pow</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial.html</anchorfile>
      <anchor>a2144bf3acf165a2a921d7df87ac4eafe</anchor>
      <arglist>(const Polynomial&lt; U &gt; &amp;p, typename Polynomial&lt; U &gt;::PowerType n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::PortBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_port_base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a5914a2926f43c55412be483f7aa2c2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetFullDescription</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>aec11c25e1727cfb34267f023c55523b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PortDataType</type>
      <name>get_data_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a2d903c43489b2f5bd6e830a7bacb9bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::SystemMessageInterface &amp;</type>
      <name>get_system_interface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a7d1afca4eb6ae60ffac9dcd89a5ce19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a65af7fcc4d673554e5fa127b1cf1382b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PortBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a0dd0ea14dfead265bf6d20364f76a506</anchor>
      <arglist>(const char *kind_string, internal::SystemMessageInterface *owning_system, internal::SystemId owning_system_id, std::string name, int index, DependencyTicket ticket, PortDataType data_type, int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_int_index</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a00ef4ed887cdf7f89bd4d0eb345e4f3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SystemMessageInterface &amp;</type>
      <name>get_mutable_system_interface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a8cb2ad85551ec86525ba002ef414cb2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateSystemId</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a20a239cf605c02cee65948c53a451d78</anchor>
      <arglist>(internal::SystemId id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowValidateContextMismatch</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>ab9d92a27ab15f81ceee423df5e91b6ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ValueType &amp;</type>
      <name>PortEvalCast</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a06cc3b285f945ec351eef2f7a34cc5fb</anchor>
      <arglist>(const AbstractValue &amp;abstract) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ValueType &amp;</type>
      <name>PortEvalCast</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a42add93756b1164ee26549dfd6dbe307</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;basic) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ValueType &amp;</type>
      <name>ThrowBadCast</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>ad8de5a4140c75fa7092841909d238a54</anchor>
      <arglist>(const AbstractValue &amp;abstract) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ValueType &amp;</type>
      <name>ThrowBadCast</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>aa35290bab28bbf233bb728e19417e833</anchor>
      <arglist>(const BasicVector&lt; T &gt; &amp;basic) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowBadCast</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_port_base.html</anchorfile>
      <anchor>a6fc5e41cf7712c218f806f44aa0cf727</anchor>
      <arglist>(const std::string &amp;value_typename, const std::string &amp;eval_typename) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::Polynomial::Product</name>
    <filename>structmaliput_1_1drake_1_1_polynomial_1_1_product.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable">
      <type>decltype(static_cast&lt; Rhs &gt;(0) *static_cast&lt; Lhs &gt;(0)) typedef</type>
      <name>type</name>
      <anchorfile>structmaliput_1_1drake_1_1_polynomial_1_1_product.html</anchorfile>
      <anchor>a7a4135c74ceab3342f130fb491ccbe29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::PublishEvent</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::Event</base>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const PublishEvent&lt; T &gt; &amp;)&gt;</type>
      <name>PublishCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a0cf70b000f61313a4f86c9a2be6a1eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const PublishEvent&lt; T &gt; &amp;)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a56368284da4f5dced254e40e05f40daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a36b0742737a7a8fea793dfc871423cb2</anchor>
      <arglist>(PublishEvent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_discrete_update</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a6411929eebb98e856021335d43bcb7f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>abe3c91c4e794783ccd6c04a6066fe3b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a967af3edb36cb226ae3d4cab98dd0d72</anchor>
      <arglist>(const PublishCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a36b1660ac0d2d4e401f453b7cd725237</anchor>
      <arglist>(const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>af3a4f209bc37e129f221d0cb240c5ba2</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const PublishCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a74359b13a4609e1ceaa53278a7f822d5</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PublishEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a0bd598df343b450f101824b96d914fd7</anchor>
      <arglist>(const TriggerType &amp;trigger_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a941b7783a64eaddecfafcf9dc45a40cd</anchor>
      <arglist>(const System&lt; T &gt; &amp;system, const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const PublishEvent&lt; T &gt; &amp;)&gt;</type>
      <name>PublishCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a0cf70b000f61313a4f86c9a2be6a1eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const PublishEvent&lt; T &gt; &amp;)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_publish_event.html</anchorfile>
      <anchor>a56368284da4f5dced254e40e05f40daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Quaternion</name>
    <filename>classmaliput_1_1math_1_1_quaternion.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>afb2b230db395fa6f3f0add5fe309eaec</anchor>
      <arglist>(Quaternion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a65ed15cc19af958b5933b5c522f10e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ac9f22343344067ac97265bc6643e3bbd</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a7484d118eff1cc289dea7f0956fb9cc7</anchor>
      <arglist>(double angle, const Vector3 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a58ab74ec9d59039bff7554b531caa08d</anchor>
      <arglist>(const Vector4 &amp;coeffs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a9008766bb164bd7795cd2245a5920edc</anchor>
      <arglist>(const Matrix3 &amp;rotation_matrix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>w</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a745f411855e1082580b1d485172ad6ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a833e1cf314b7b7a5537b2b6a56fee6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>aca424ddaf2902c1cde483f37813d4278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ae7bc7213001e326be4d4eb2d8a035c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>w</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a5ca5515fecd7fe676bbc2c4f2dd586a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a2134ad02d68f29e9c7cd87e4cd4c75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vec</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ab79f2db31305b12524eae7e53043eada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>coeffs</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>abc6f89eb9ffa1bae8ea99a590f796ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>set_identity</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>af003ae2cb8fd3fb8b14b3eb7bec8a957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squared_norm</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a76099c1549db9c057693a2f2fe90b620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ac5776288f0f0443dd3840ac81f216719</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a39bc7c94129ac594bb53d207fa7c00ec</anchor>
      <arglist>(const Quaternion &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>AngularDistance</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>acb121b161751e0285bb0f1704147bf37</anchor>
      <arglist>(const Quaternion &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>ToRotationMatrix</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a61e74a12c74318532deca15df05b6c7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFromTwoVectors</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a0a8ff92afbef824146041c2398825d16</anchor>
      <arglist>(const Vector3 &amp;a, const Vector3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>ade8abdaeb2e7a60f0381dd1af93654b6</anchor>
      <arglist>(const Quaternion &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>operator*=</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a45b5e33ccc03f4a050cc76b060e9c7d7</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a5035153021cfe3b062e75799dcc95204</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a0989dab055161c294d0abb60f6516bf3</anchor>
      <arglist>(const Quaternion &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>acf3f146fbde25232d806e77740371b08</anchor>
      <arglist>(const Quaternion &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>Inverse</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a45d868c948c0fcf62908ee899e7c8903</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>conjugate</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a7d55b2e910bc630b24c060d1fe2db4d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>Slerp</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a0131f0a077f7c08dc6a55923a2b39e24</anchor>
      <arglist>(double t, const Quaternion &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsApprox</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a94867c22ffe1069d789f2c5e0feff779</anchor>
      <arglist>(const Quaternion &amp;other, double precision) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>TransformVector</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a10c040ae6a84aad50a2dabe7e228b3e7</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>Identity</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a96fcbb66d9b6a7fffed720ca81b50bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>FromTwoVectors</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a1729d3ac3f5db01107a792db1d466e9b</anchor>
      <arglist>(const Vector3 &amp;a, const Vector3 &amp;b)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>kTolerance</name>
      <anchorfile>classmaliput_1_1math_1_1_quaternion.html</anchorfile>
      <anchor>a409f0fc00f5231042c95ccf5fe8fda5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::RuleRegistry::QueryResult</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_rule_registry_1_1_query_result.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; RangeValueRule::Range &gt;</type>
      <name>Ranges</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_registry_1_1_query_result.html</anchorfile>
      <anchor>a64e663f1e0d1ead90a3a121ab26c92d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; DiscreteValueRule::DiscreteValue &gt;</type>
      <name>DiscreteValues</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_registry_1_1_query_result.html</anchorfile>
      <anchor>a1aed7b92c84fbd34102ccedcec419495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rule::TypeId</type>
      <name>type_id</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_registry_1_1_query_result.html</anchorfile>
      <anchor>a3fb4ab0690729762746ef07d59cfcc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::variant&lt; Ranges, DiscreteValues &gt;</type>
      <name>rule_values</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_registry_1_1_query_result.html</anchorfile>
      <anchor>a396b7dcd97617f009c7f92e4c2d9919b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::RoadRulebook::QueryResults</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</filename>
    <member kind="variable">
      <type>std::map&lt; RightOfWayRule::Id, RightOfWayRule &gt;</type>
      <name>right_of_way</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</anchorfile>
      <anchor>a6efb15e4023d6e5862a63c530e9389e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; SpeedLimitRule::Id, SpeedLimitRule &gt;</type>
      <name>speed_limit</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</anchorfile>
      <anchor>a0a87378b6c2b884a647fd30b8b4dc1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; DirectionUsageRule::Id, DirectionUsageRule &gt;</type>
      <name>direction_usage</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</anchorfile>
      <anchor>a10d07fe73d343fc01201b0189fcc539f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; DiscreteValueRule::Id, DiscreteValueRule &gt;</type>
      <name>discrete_value_rules</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</anchorfile>
      <anchor>a3bc94f011e4ef1cc6ea575094c27442a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; RangeValueRule::Id, RangeValueRule &gt;</type>
      <name>range_value_rules</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_road_rulebook_1_1_query_results.html</anchorfile>
      <anchor>a466fa3764fff56aa343501d4be0cfe50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::RandomGenerator</name>
    <filename>classmaliput_1_1drake_1_1_random_generator.html</filename>
    <member kind="typedef">
      <type>std::mt19937::result_type</type>
      <name>result_type</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>ac066f83d3ffd2d412e6e5acc0f687ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGenerator</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>a225b04ff27646e6105e31c25687fce3d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGenerator</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>a0a528a94da8ddce6eea385b93757b3fa</anchor>
      <arglist>(result_type value)</arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>aaaead712fe7dc29c1799e7d8f77d1cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>min</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>ab180b1a9d812ecf803845f4ca551a310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr result_type</type>
      <name>max</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>a91c0b5c3c85db40461bf25037ee5e4cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr result_type</type>
      <name>default_seed</name>
      <anchorfile>classmaliput_1_1drake_1_1_random_generator.html</anchorfile>
      <anchor>ad2d1db10b28d705da531b1508caaf7bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::RangeValueRule::Range</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</filename>
    <base>maliput::api::rules::Rule::State</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a3b21c7fc52105375a0217245c67ce5dc</anchor>
      <arglist>(Range)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a2c7f856c2189f514f3f80acf341193b2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a31616ea578b4812e863aab196239d4b9</anchor>
      <arglist>(int severity, RelatedRules related_rules, RelatedUniqueIds related_unique_ids, std::string description, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a5217c01a6033414d0a8812becd3aa47b</anchor>
      <arglist>(const Range &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a08c984773cd00ded6d3a572ff5426455</anchor>
      <arglist>(const Range &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a855f38146bd9b1364a715f9aef495000</anchor>
      <arglist>(const Range &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>description</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a2e1454f6988673f814408646edaeb320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>aad36546e8175d2922bee165fe028fedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_range_value_rule_1_1_range.html</anchorfile>
      <anchor>a0b0ede69e8156eb97acc579b88e883de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::RangeValidator</name>
    <filename>classmaliput_1_1common_1_1_range_validator.html</filename>
    <member kind="function">
      <type></type>
      <name>RangeValidator</name>
      <anchorfile>classmaliput_1_1common_1_1_range_validator.html</anchorfile>
      <anchor>af6518bded703b00a831452218b94e3b8</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1common_1_1_range_validator.html</anchorfile>
      <anchor>ae7adaac6a97bdb9af82a723393093ebc</anchor>
      <arglist>(double s) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RangeValidator</type>
      <name>GetRelativeEpsilonValidator</name>
      <anchorfile>classmaliput_1_1common_1_1_range_validator.html</anchorfile>
      <anchor>a1f9f5663c5b393eecf9acaf81e520c55</anchor>
      <arglist>(double min, double max, double tolerance, double epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RangeValidator</type>
      <name>GetAbsoluteEpsilonValidator</name>
      <anchorfile>classmaliput_1_1common_1_1_range_validator.html</anchorfile>
      <anchor>aaacd0bacdb4158753d2ccc310dd39b0e</anchor>
      <arglist>(double min, double max, double tolerance, double epsilon)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::RangeValueRule</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_range_value_rule.html</filename>
    <base>maliput::api::rules::Rule</base>
    <class kind="struct">maliput::api::rules::RangeValueRule::Range</class>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule.html</anchorfile>
      <anchor>ae6ceb7f94e77a31249e634fe1d38dd4c</anchor>
      <arglist>(RangeValueRule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RangeValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule.html</anchorfile>
      <anchor>a4e896ffa4ba9f20a6bdce733fabbbf33</anchor>
      <arglist>(const Rule::Id &amp;id, const Rule::TypeId &amp;type_id, const LaneSRoute &amp;zone, const std::vector&lt; Range &gt; &amp;ranges)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Range &gt; &amp;</type>
      <name>states</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule.html</anchorfile>
      <anchor>ac2150ebb8b8ddb8b45733decaf8932c8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::RangeValueRuleConstants</name>
    <filename>structmaliput_1_1_range_value_rule_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kDescription</name>
      <anchorfile>structmaliput_1_1_range_value_rule_constants.html</anchorfile>
      <anchor>a164224abeb3c95063fa7962314665b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kRange</name>
      <anchorfile>structmaliput_1_1_range_value_rule_constants.html</anchorfile>
      <anchor>ae59a989dd182fd8c4da0ef782fb56aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kRanges</name>
      <anchorfile>structmaliput_1_1_range_value_rule_constants.html</anchorfile>
      <anchor>a3aca1b037ddb7c4608d3a35630e45a09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::RangeValueRuleStateProvider</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</filename>
    <member kind="typedef">
      <type>StateProviderResult&lt; RangeValueRule::Range &gt;</type>
      <name>StateResult</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</anchorfile>
      <anchor>ad95f1bcea095ba0edcdfb39ee5e39eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RangeValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</anchorfile>
      <anchor>a5f882ce1d6c8fa565ff37f19656a5025</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; StateResult &gt;</type>
      <name>GetState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</anchorfile>
      <anchor>af853a1f3f4c940f16d93be1bb639cd6a</anchor>
      <arglist>(const Rule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; StateResult &gt;</type>
      <name>GetState</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</anchorfile>
      <anchor>a4de3b8f0f5aded483fdd3e0a110abf34</anchor>
      <arglist>(const RoadPosition &amp;road_position, const Rule::TypeId &amp;rule_type, double tolerance) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RangeValueRuleStateProvider</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_range_value_rule_state_provider.html</anchorfile>
      <anchor>a4a1292539d0e36f31399126dc6a4a6fa</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::RBounds</name>
    <filename>classmaliput_1_1api_1_1_r_bounds.html</filename>
    <member kind="function">
      <type></type>
      <name>RBounds</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>a9ee310145036b2a3b0af47969956e122</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RBounds</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>adb2a2af74a0096cdac78dfba335dd0c2</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>a74ad3cfdc000a999ae2d456fe3ec3418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_min</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>ac21dffdc86052847014c3a19c08a3759</anchor>
      <arglist>(double min)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>ae10f649a540c212781c2d0a4c7385eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max</name>
      <anchorfile>classmaliput_1_1api_1_1_r_bounds.html</anchorfile>
      <anchor>a2b07dcd33fdf62555398c5a587035999</anchor>
      <arglist>(double max)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::RelatedRulesKeys</name>
    <filename>structmaliput_1_1_related_rules_keys.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kYieldGroup</name>
      <anchorfile>structmaliput_1_1_related_rules_keys.html</anchorfile>
      <anchor>aa720a4c0de6d923ecf6234a6378edc87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::RelatedUniqueIdsKeys</name>
    <filename>structmaliput_1_1_related_unique_ids_keys.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kBulbGroup</name>
      <anchorfile>structmaliput_1_1_related_unique_ids_keys.html</anchorfile>
      <anchor>a39d844ef884c68b543f3e4fbb0e7c2cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ReportUseOfTypeHash</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_report_use_of_type_hash.html</filename>
    <templarg></templarg>
    <templarg>hash</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>used</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_report_use_of_type_hash.html</anchorfile>
      <anchor>a9e32ee5b17236ea56d21da6192c89d2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ReportUseOfTypeHash&lt; T, 0 &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_report_use_of_type_hash_3_01_t_00_010_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>used</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_report_use_of_type_hash_3_01_t_00_010_01_4.html</anchorfile>
      <anchor>a9e32ee5b17236ea56d21da6192c89d2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::reset_on_copy</name>
    <filename>classmaliput_1_1drake_1_1reset__on__copy.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aca356dadb4903e2406b33ea9fe40fae0</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ad4afd34dd51194448846f2b5c1a5bec0</anchor>
      <arglist>(const T &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6d988c989fa636d04b2eb7e0cc953676</anchor>
      <arglist>(T &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; T &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; T &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; T &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, T &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a2ee0d10f708496fc7ab619d4cb6c78cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, std::add_lvalue_reference_t&lt; std::remove_pointer_t&lt; T &gt; &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a336061139daea09397e3558c967d485d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>reset_on_copy&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;</name>
    <filename>classmaliput_1_1drake_1_1reset__on__copy.html</filename>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aca356dadb4903e2406b33ea9fe40fae0</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ad4afd34dd51194448846f2b5c1a5bec0</anchor>
      <arglist>(const const maliput::drake::systems::internal::ContextMessageInterface * &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6d988c989fa636d04b2eb7e0cc953676</anchor>
      <arglist>(const maliput::drake::systems::internal::ContextMessageInterface * &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const maliput::drake::systems::internal::ContextMessageInterface *&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const const maliput::drake::systems::internal::ContextMessageInterface * &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, const maliput::drake::systems::internal::ContextMessageInterface * &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a2ee0d10f708496fc7ab619d4cb6c78cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, std::add_lvalue_reference_t&lt; std::remove_pointer_t&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a336061139daea09397e3558c967d485d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; const maliput::drake::systems::internal::ContextMessageInterface * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const maliput::drake::systems::internal::ContextMessageInterface *&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const const maliput::drake::systems::internal::ContextMessageInterface * &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>reset_on_copy&lt; maliput::drake::systems::ContextBase * &gt;</name>
    <filename>classmaliput_1_1drake_1_1reset__on__copy.html</filename>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aca356dadb4903e2406b33ea9fe40fae0</anchor>
      <arglist>() noexcept(std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ad4afd34dd51194448846f2b5c1a5bec0</anchor>
      <arglist>(const maliput::drake::systems::ContextBase * &amp;value) noexcept(std::is_nothrow_copy_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6d988c989fa636d04b2eb7e0cc953676</anchor>
      <arglist>(maliput::drake::systems::ContextBase * &amp;&amp;value) noexcept(std::is_nothrow_move_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator maliput::drake::systems::ContextBase *&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const maliput::drake::systems::ContextBase * &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, maliput::drake::systems::ContextBase * &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a2ee0d10f708496fc7ab619d4cb6c78cb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_pointer_v&lt; T1 &gt;, std::add_lvalue_reference_t&lt; std::remove_pointer_t&lt; maliput::drake::systems::ContextBase * &gt; &gt; &gt;</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a336061139daea09397e3558c967d485d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a6bbf40dd8c2295c666d4dde3fecfc46b</anchor>
      <arglist>(const reset_on_copy &amp;) noexcept(std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reset_on_copy</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>adb981e40d1fb1d0759c5b179884dc640</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_constructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>a57695cb4da43246e58b1cd4b14183318</anchor>
      <arglist>(const reset_on_copy &amp;source) noexcept(std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type>reset_on_copy &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ab1db650b49a6bcdbde16114438788aaf</anchor>
      <arglist>(reset_on_copy &amp;&amp;source) noexcept(std::is_nothrow_move_assignable_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_destructible_v&lt; maliput::drake::systems::ContextBase * &gt; &amp;&amp;std::is_nothrow_default_constructible_v&lt; maliput::drake::systems::ContextBase * &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator maliput::drake::systems::ContextBase *&amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>ada686907eddcbaa2c54633f490c27305</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const maliput::drake::systems::ContextBase * &amp;</name>
      <anchorfile>classmaliput_1_1drake_1_1reset__on__copy.html</anchorfile>
      <anchor>aa21e380b520fb649d3d8c0403f98f48a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RightOfWayBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_right_of_way_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_related_bulb_groups</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_right_of_way_build_flags.html</anchorfile>
      <anchor>a8ba809272a7cec904f854a3f82ac9195</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::RoadGeometry</name>
    <filename>classmaliput_1_1geometry__base_1_1_road_geometry.html</filename>
    <base>maliput::api::RoadGeometry</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>ac4f7fc33fb19946309af17487bbe83f0</anchor>
      <arglist>(RoadGeometry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadGeometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>a67f4ef90da8861ea291670c552d720a0</anchor>
      <arglist>(const api::RoadGeometryId &amp;id, double linear_tolerance, double angular_tolerance, double scale_length, const math::Vector3 &amp;inertial_to_backend_frame_translation)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AddJunction</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>ad619f53223c9dc8a1dd711ea7b6769df</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; junction)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AddBranchPoint</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>a36aac6602fb3dcc28d4a0d28af720698</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; branch_point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitializeStrategy</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>a85e2692300f5276bf166eb2dac07b0ca</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RoadGeometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_road_geometry.html</anchorfile>
      <anchor>a3180977d75affb100512dc8177009a4f</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::RoadGeometry</name>
    <filename>classmaliput_1_1api_1_1_road_geometry.html</filename>
    <class kind="class">maliput::api::RoadGeometry::IdIndex</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoadGeometry</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>ad8e80ff050208966d8e422eeb479a018</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>RoadGeometryId</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>aa2dced80efb58b0fbb5f5562bc902d13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_junctions</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a375c48fb9fa43b906f148dace035338b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Junction *</type>
      <name>junction</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a0db9d3f5aafb668aa00c1b40211d287d</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_branch_points</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>ab09f418cfec64a1d0899b14cb7564dcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BranchPoint *</type>
      <name>branch_point</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a6c2cb8b4626d0d5d021b58422e2f96d8</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const IdIndex &amp;</type>
      <name>ById</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a40b5e7f0695bb498b4fccfaac6164d6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RoadPositionResult</type>
      <name>ToRoadPosition</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a23c5fa878accede196eb856f9024dbf4</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, const std::optional&lt; RoadPosition &gt; &amp;hint=std::nullopt) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; RoadPositionResult &gt;</type>
      <name>FindRoadPositions</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>aab94cb47c604ce24df64a948d43b4b1d</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, double radius) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>linear_tolerance</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a96017eb2ac92f272cfa348b8d55f6190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>angular_tolerance</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>ad9c440958f590bf4be8c2d00f0280086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scale_length</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a4f2b663d219f340450721354e4903c48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CheckInvariants</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a5063335837b3825eb592bd88229d27a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; InertialPosition &gt;</type>
      <name>SampleAheadWaypoints</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>af0f48addc835003870e382c3bb44e11e</anchor>
      <arglist>(const LaneSRoute &amp;lane_s_route, double path_length_sampling_rate) const</arglist>
    </member>
    <member kind="function">
      <type>math::Vector3</type>
      <name>inertial_to_backend_frame_translation</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>ad413acb6452704703a264866fba88b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RoadGeometry</name>
      <anchorfile>classmaliput_1_1api_1_1_road_geometry.html</anchorfile>
      <anchor>a78af9b4d6ccb429d4d75ebd22b3e6493</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadGeometryBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_junction</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>af99390423261d4e68249a7bb5b870939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_segment</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>a64216d0b60ab4ca7a77882a711f650e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_lane</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>a2ec31938a8e713fb90aa9da6dd4cbf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_branchpoint</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>acbadb2042b5565cfa20b542fa4f9d2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_lane_end_set</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>aa491081cb1490ac64ab202e11eb2d05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>expects_throw</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>a091dde3a23daeda91f23af656e619dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoadGeometryIdIndexBuildFlags</type>
      <name>id_index_build_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_build_flags.html</anchorfile>
      <anchor>a33f3e592580a8b88d28b166f3cb860e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadGeometryContiguityBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_linear_mismatch</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</anchorfile>
      <anchor>a6cc4a45e4f1b897a700d116f4ba2bbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_angular_mismatch</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</anchorfile>
      <anchor>a0c7ce41afe5a8edbd3dba520fdf3ff65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>linear_tolerance</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</anchorfile>
      <anchor>a6a6b7ad51a19a2fcf7e454c1d7892300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>angular_tolerance</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</anchorfile>
      <anchor>a81d132d0efbdf9cb0535607abd868c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>math::Vector3</type>
      <name>inertial_to_backend_frame_translation</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_contiguity_build_flags.html</anchorfile>
      <anchor>a6610f582dce14e8bf53720a9d33198bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadGeometryIdIndexBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_geometry_id_index_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_branchpoint</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_id_index_build_flags.html</anchorfile>
      <anchor>acbadb2042b5565cfa20b542fa4f9d2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_junction</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_id_index_build_flags.html</anchorfile>
      <anchor>af99390423261d4e68249a7bb5b870939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_lane</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_id_index_build_flags.html</anchorfile>
      <anchor>a2ec31938a8e713fb90aa9da6dd4cbf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_segment</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_geometry_id_index_build_flags.html</anchorfile>
      <anchor>a64216d0b60ab4ca7a77882a711f650e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::RoadGeometryMesh</name>
    <filename>structmaliput_1_1utility_1_1_road_geometry_mesh.html</filename>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>asphalt_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a18d202a813fb50cbca57eb99c01041db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>grayed_asphalt_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>abedb154db5753bdd1818ca4786f95dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>hbounds_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a713745b4024fccfae35f4ad37c151d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>lane_lane_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>ae6870991c38fd172238394d77d7fbdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>lane_marker_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a315448fcad76a1db4f6c09461aed4eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>lane_grayed_lane_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a983434e58ff0e561ce6fb9f8bc32bf88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>lane_grayed_marker_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a32c1797d59b1251b643c40893a9ec410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>branch_point_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a718e80292b3d19d6992738c7adcae7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>sidewalk_mesh</name>
      <anchorfile>structmaliput_1_1utility_1_1_road_geometry_mesh.html</anchorfile>
      <anchor>a054a06f76af20be1dc9034df6a6e2402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::RoadNetwork</name>
    <filename>classmaliput_1_1api_1_1_road_network.html</filename>
    <member kind="function">
      <type></type>
      <name>RoadNetwork</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>ab189469ea1faa37694797dba23fd50a4</anchor>
      <arglist>(std::unique_ptr&lt; const RoadGeometry &gt; road_geometry, std::unique_ptr&lt; const rules::RoadRulebook &gt; rulebook, std::unique_ptr&lt; const rules::TrafficLightBook &gt; traffic_light_book, std::unique_ptr&lt; IntersectionBook &gt; intersection_book, std::unique_ptr&lt; rules::PhaseRingBook &gt; phase_ring_book, std::unique_ptr&lt; rules::RightOfWayRuleStateProvider &gt; right_of_way_rule_state_provider, std::unique_ptr&lt; rules::PhaseProvider &gt; phase_provider, std::unique_ptr&lt; rules::RuleRegistry &gt; rule_registry, std::unique_ptr&lt; rules::DiscreteValueRuleStateProvider &gt; discrete_value_rule_state_provider, std::unique_ptr&lt; rules::RangeValueRuleStateProvider &gt; range_value_rule_state_provider)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadNetwork</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>ad89b2d0d5b573d63c2883fbfdd3c8ae8</anchor>
      <arglist>(std::unique_ptr&lt; const RoadGeometry &gt; road_geometry, std::unique_ptr&lt; const rules::RoadRulebook &gt; rulebook, std::unique_ptr&lt; const rules::TrafficLightBook &gt; traffic_light_book, std::unique_ptr&lt; IntersectionBook &gt; intersection_book, std::unique_ptr&lt; rules::PhaseRingBook &gt; phase_ring_book, std::unique_ptr&lt; rules::PhaseProvider &gt; phase_provider, std::unique_ptr&lt; rules::RuleRegistry &gt; rule_registry, std::unique_ptr&lt; rules::DiscreteValueRuleStateProvider &gt; discrete_value_rule_state_provider, std::unique_ptr&lt; rules::RangeValueRuleStateProvider &gt; range_value_rule_state_provider)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoadNetwork</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a3b92986feb884330f6502d877529417d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a5c7941c0700d1b75757ce0eba59726a9</anchor>
      <arglist>(const RoadPosition &amp;road_position) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a676f090e349fcc28908575aa491468b6</anchor>
      <arglist>(const LaneId &amp;lane_id) const</arglist>
    </member>
    <member kind="function">
      <type>const RoadGeometry *</type>
      <name>road_geometry</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>aa5b5de3cdefe8ef0d3ffa573f3822d4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rules::RoadRulebook *</type>
      <name>rulebook</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a08df4786232a0baa18e9f81c8ab7e485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const rules::TrafficLightBook *</type>
      <name>traffic_light_book</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>ab8c61e162f56392e7ed52e37d15dcaca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionBook *</type>
      <name>intersection_book</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a9655d287dcf68ae48ac8ecf98879fb59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rules::PhaseRingBook *</type>
      <name>phase_ring_book</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>aedb37799051c0a9968f254233a7394d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRuleStateProvider *</type>
      <name>right_of_way_rule_state_provider</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a78b5fae7828329c63345d87ae12ada1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseProvider *</type>
      <name>phase_provider</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>ae2a4561d24e104cd68727f68630bcbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rules::RuleRegistry *</type>
      <name>rule_registry</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a5ee80a3c33b3b391440158ff4418e1af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRuleStateProvider *</type>
      <name>discrete_value_rule_state_provider</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a7d9494bc03d556cb4d418e16178288a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRuleStateProvider *</type>
      <name>range_value_rule_state_provider</name>
      <anchorfile>classmaliput_1_1api_1_1_road_network.html</anchorfile>
      <anchor>a82bb5c2b2c1c0676c247256d0f5b5967</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadNetworkContiguityBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_network_contiguity_build_flags.html</filename>
    <member kind="variable">
      <type>RoadGeometryContiguityBuildFlags</type>
      <name>rg_contiguity_build_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_network_contiguity_build_flags.html</anchorfile>
      <anchor>a1da2d27f17fe345433213b3d82f1233e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RoadRulebookContiguityBuildFlags</type>
      <name>rulebook_contiguity_build_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_network_contiguity_build_flags.html</anchorfile>
      <anchor>af506e77d90af1d9a2f243e9989ff6a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>expects_throw</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_network_contiguity_build_flags.html</anchorfile>
      <anchor>a091dde3a23daeda91f23af656e619dd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::plugin::RoadNetworkLoader</name>
    <filename>classmaliput_1_1plugin_1_1_road_network_loader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoadNetworkLoader</name>
      <anchorfile>classmaliput_1_1plugin_1_1_road_network_loader.html</anchorfile>
      <anchor>aaed0de0f4e11705c9f8b44e4fd07a615</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; maliput::api::RoadNetwork &gt;</type>
      <name>operator()</name>
      <anchorfile>classmaliput_1_1plugin_1_1_road_network_loader.html</anchorfile>
      <anchor>af0f8f4e968d3dbc9fdccefd5a4c047f6</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; &amp;properties) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; std::string, std::string &gt;</type>
      <name>GetDefaultParameters</name>
      <anchorfile>classmaliput_1_1plugin_1_1_road_network_loader.html</anchorfile>
      <anchor>acd6af8c846b24b6f592920507a3f05ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>GetEntryPoint</name>
      <anchorfile>classmaliput_1_1plugin_1_1_road_network_loader.html</anchorfile>
      <anchor>ac5253b257de53f22d160729ae126ca5d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::RoadNetworkValidatorOptions</name>
    <filename>structmaliput_1_1api_1_1_road_network_validator_options.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>check_direction_usage_rule_coverage</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a9a48495628c12da3180e144aa067a363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_road_geometry_invariants</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a0ef84eea2a696006cd88f81a0ea83702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_road_geometry_hierarchy</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>adc52a26461242787031a5f7e803c54ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_related_bulb_groups</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>ad3e720e34f3d04f190dcf87ec767d017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_contiguity_rule_zones</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a6b809cd65ff1bd23a579ea69bfc4e962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_phase_discrete_value_rule_states</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a902d70f024d11f415569278e0d60c883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_phase_bulb_states</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a5ee37878aefe769ba152c53c64e0bf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>check_related_rules</name>
      <anchorfile>structmaliput_1_1api_1_1_road_network_validator_options.html</anchorfile>
      <anchor>a635f0992eb539ed8fc8bc20ba2db1e68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::RoadPosition</name>
    <filename>structmaliput_1_1api_1_1_road_position.html</filename>
    <member kind="function">
      <type></type>
      <name>RoadPosition</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position.html</anchorfile>
      <anchor>a4ed2e763b9bcf2c840b6ff56c17de59b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadPosition</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position.html</anchorfile>
      <anchor>a7c3987ba959bbbbeafba43c0db4c24d8</anchor>
      <arglist>(const Lane *_lane, const LanePosition &amp;_pos)</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>ToInertialPosition</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position.html</anchorfile>
      <anchor>a7102a0aeb36fa64045778d02e3c0dc7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const Lane *</type>
      <name>lane</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position.html</anchorfile>
      <anchor>a7f4404a6c9065d06842311b7308a6cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LanePosition</type>
      <name>pos</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position.html</anchorfile>
      <anchor>a052f1bed10d7aad444802177f1d7d18b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::RoadPositionResult</name>
    <filename>structmaliput_1_1api_1_1_road_position_result.html</filename>
    <member kind="variable">
      <type>RoadPosition</type>
      <name>road_position</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position_result.html</anchorfile>
      <anchor>ac33ed20d7f8102f3ad22c83a741a7452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InertialPosition</type>
      <name>nearest_position</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position_result.html</anchorfile>
      <anchor>a65cf38def1177b13564494a5c5d48655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distance</name>
      <anchorfile>structmaliput_1_1api_1_1_road_position_result.html</anchorfile>
      <anchor>a79b8e036dca6911e3295a47d99f21f43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::RoadRulebook</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</filename>
    <class kind="struct">maliput::api::rules::RoadRulebook::QueryResults</class>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a1b08090e8bab24965c89f050f50675bd</anchor>
      <arglist>(RoadRulebook)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RoadRulebook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a07d31b131f6ac6dde0832ecdddaeaa17</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>QueryResults</type>
      <name>FindRules</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a32a7e8433fadf86192e3af6bcfb0d643</anchor>
      <arglist>(const std::vector&lt; LaneSRange &gt; &amp;ranges, double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>QueryResults</type>
      <name>Rules</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a4b028974b9007c80ab8a355844263aaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RightOfWayRule</type>
      <name>GetRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a18ab16fce3c99b8c3c5fc904ce18ecb7</anchor>
      <arglist>(const RightOfWayRule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>SpeedLimitRule</type>
      <name>GetRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a25b9f270ad53f4bf6a9933eb4100047a</anchor>
      <arglist>(const SpeedLimitRule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>DirectionUsageRule</type>
      <name>GetRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>ad61cf4c441f8251a11bea9786c0dc51c</anchor>
      <arglist>(const DirectionUsageRule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValueRule</type>
      <name>GetDiscreteValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a47010dd5e2e82fcc17eda38db466f032</anchor>
      <arglist>(const Rule::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>RangeValueRule</type>
      <name>GetRangeValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a66fd081310b70a90ee4b07e82a64ac10</anchor>
      <arglist>(const Rule::Id &amp;id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RoadRulebook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_road_rulebook.html</anchorfile>
      <anchor>a45a2a1cd811c845540a972accad93266</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadRulebookBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_right_of_way</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>a5cf4aadc4a6df5921da8939b2f05b620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RightOfWayBuildFlags</type>
      <name>right_of_way_build_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>a318b942aedadbb7967671c399081cec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_direction_usage</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>aa24997e990655a94339ccad84e893d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_speed_limit</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>a40b3db1fe5a0efa3bf2ab84e1a507f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_discrete_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>ad5f8cb4c2afaf0d54bca9c6f3e025a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_range_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_build_flags.html</anchorfile>
      <anchor>ac71ac13bd2242d91adad3dcaeb34e41e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadRulebookContiguityBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_rulebook_contiguity_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_discrete_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_contiguity_build_flags.html</anchorfile>
      <anchor>ad5f8cb4c2afaf0d54bca9c6f3e025a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_range_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_contiguity_build_flags.html</anchorfile>
      <anchor>ac71ac13bd2242d91adad3dcaeb34e41e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::RoadRulebookRelatedRulesBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_road_rulebook_related_rules_build_flags.html</filename>
    <member kind="variable">
      <type>RoadRulebookBuildFlags</type>
      <name>roadrulebook_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_related_rules_build_flags.html</anchorfile>
      <anchor>a22b75e2064a4682fc5881cfe024225f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>consistent_related_rule_in_discrete_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_related_rules_build_flags.html</anchorfile>
      <anchor>a870359379446e1e5d7841a0130020fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>consistent_related_rule_in_range_value_rule</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_road_rulebook_related_rules_build_flags.html</anchorfile>
      <anchor>a5cca6fb78af131eb3b1c3834ae21bba9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::RollPitchYaw</name>
    <filename>classmaliput_1_1math_1_1_roll_pitch_yaw.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a289596a58d43cdd108597db928059c49</anchor>
      <arglist>(RollPitchYaw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RollPitchYaw</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>aba33e7385973018801f05347bf701f9b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RollPitchYaw</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a8a086da095da776c996bd20f85c503e0</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RollPitchYaw</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>afff88f74d095e60d0be296c8ab0a85d1</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RollPitchYaw</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a7159827d2b0d06ed4f3c4c19262d976a</anchor>
      <arglist>(const Quaternion &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>RollPitchYaw &amp;</type>
      <name>set</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>ab3fe791f710edf28bf6673f88eb17bef</anchor>
      <arglist>(const Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function">
      <type>RollPitchYaw &amp;</type>
      <name>set</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a1d10bddaae69f7af13fa0ae2c5b5c39e</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFromQuaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>aa9c1b3e74d3d7669fe25315bf0d6ef55</anchor>
      <arglist>(const Quaternion &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>vector</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a36d0bcef773a9624be984833113fba1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>ae192ce4f515c88a20df3d273ffaeb01e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>ac196b272dd57f9df448dd86d22693e96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a191372552c6fb4cacf0da086efc355fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>roll_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a10fda47676735ae7ef772421eccf9ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>pitch_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>ae4a1624f7431f4b0724344d35d038082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>yaw_angle</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a1262ed8916898b9008e4a8b308b5b9a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>ToMatrix</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>ab7ff6943e374292844c6c7189d76101e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>ToQuaternion</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a611c3fcee885450a48688d9360bc6a9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>CalcRotationMatrixDt</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>af61de895877fa7fb46afe4c12fd6e8aa</anchor>
      <arglist>(const Vector3 &amp;rpyDt) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>kTolerance</name>
      <anchorfile>classmaliput_1_1math_1_1_roll_pitch_yaw.html</anchorfile>
      <anchor>a409f0fc00f5231042c95ccf5fe8fda5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::Rotation</name>
    <filename>classmaliput_1_1api_1_1_rotation.html</filename>
    <member kind="function">
      <type></type>
      <name>Rotation</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>aac8a569afc15308dac89f775076a4d35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const math::Quaternion &amp;</type>
      <name>quat</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a1228cdfab5883e755d070c1f0425d624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quat</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a0d517cbe8e6ac607c76f86618444f22e</anchor>
      <arglist>(const math::Quaternion &amp;quaternion)</arglist>
    </member>
    <member kind="function">
      <type>math::Matrix3</type>
      <name>matrix</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a88bb72ffddf9347da6953db2b29b566e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>math::RollPitchYaw</type>
      <name>rpy</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a17ddf41e503fd1f20727911b407ecd90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>aed87239ee2b94ce4e939bf7c26f6c2fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>ab8005e2012f7f1b5b2c80051c480586d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a8f084efc326ffbb20ab4593381857b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InertialPosition</type>
      <name>Apply</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a96dcad1d170533627dc6879dc8dfeb0f</anchor>
      <arglist>(const InertialPosition &amp;inertial_position) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>Reverse</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a59465cb858c3bd4dbc85ea8237ddeecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Distance</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a3775b3fcf8329cd398206b1521866ca3</anchor>
      <arglist>(const Rotation &amp;rot) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>FromQuat</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a2f21224723816331145e581e8b3a7f0a</anchor>
      <arglist>(const math::Quaternion &amp;quaternion)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>FromRpy</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>acfbb13e21de7c5bd423ceac06bd6e062</anchor>
      <arglist>(const math::Vector3 &amp;rpy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>FromRpy</name>
      <anchorfile>classmaliput_1_1api_1_1_rotation.html</anchorfile>
      <anchor>a65f0cc4b663f10fc17de277da46dfcd1</anchor>
      <arglist>(double roll, double pitch, double yaw)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::routing::Route</name>
    <filename>classmaliput_1_1routing_1_1_route.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a00c6a05953d406aa71c1e9a2b569e4f4</anchor>
      <arglist>(Route)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Route</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>abaffbd7cf651aa869bb58753d607444e</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Route</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a9b5bfc09f33b24f88ae03753a271d29b</anchor>
      <arglist>(const std::vector&lt; Phase &gt; &amp;phases, const api::RoadNetwork *road_network)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Phase &amp;</type>
      <name>Get</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a893d3327731e8f0c3ddd205f73af1ef2</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const api::RoadPosition &amp;</type>
      <name>start_route_position</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a792e110ca66c7c328e5b7948f328a053</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const api::RoadPosition &amp;</type>
      <name>end_route_position</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>af27ddb0de9f5543debea81c74d7a3d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RoutePositionResult</type>
      <name>FindRoutePosition</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a443f00106d371b26bf116259f82d4bff</anchor>
      <arglist>(const api::InertialPosition &amp;inertial_position) const</arglist>
    </member>
    <member kind="function">
      <type>RoutePositionResult</type>
      <name>FindRoutePosition</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>a6564ea1dddc685463e80ec61728fe8ea</anchor>
      <arglist>(const api::RoadPosition &amp;road_position) const</arglist>
    </member>
    <member kind="function">
      <type>LaneSRangeRelation</type>
      <name>ComputeLaneSRangeRelation</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>abe4034c0a7a206ea10189fda71315da2</anchor>
      <arglist>(const api::LaneSRange &amp;lane_s_range_a, const api::LaneSRange &amp;lane_s_range_b) const</arglist>
    </member>
    <member kind="function">
      <type>api::LaneSRoute</type>
      <name>ComputeLaneSRoute</name>
      <anchorfile>classmaliput_1_1routing_1_1_route.html</anchorfile>
      <anchor>ab049bb134a649785b5c7a05e332cde32</anchor>
      <arglist>(const api::RoadPosition &amp;start_position) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::routing::RoutePositionResult</name>
    <filename>structmaliput_1_1routing_1_1_route_position_result.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>phase_index</name>
      <anchorfile>structmaliput_1_1routing_1_1_route_position_result.html</anchorfile>
      <anchor>ace1e4da1663992e9a7205e769cd7193d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PhasePositionResult</type>
      <name>phase_position_result</name>
      <anchorfile>structmaliput_1_1routing_1_1_route_position_result.html</anchorfile>
      <anchor>a6984853197d59116eb242162513cd597</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::routing::Router</name>
    <filename>classmaliput_1_1routing_1_1_router.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1routing_1_1_router.html</anchorfile>
      <anchor>a6a06c8a70d4d656524b186ac90013763</anchor>
      <arglist>(Router)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Route &gt;</type>
      <name>ComputeRoutes</name>
      <anchorfile>classmaliput_1_1routing_1_1_router.html</anchorfile>
      <anchor>ae51c3bc92ff91f268f0741bdf8d894e8</anchor>
      <arglist>(const api::RoadPosition &amp;start, const api::RoadPosition &amp;end, const RoutingConstraints &amp;routing_constraints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Router</name>
      <anchorfile>classmaliput_1_1routing_1_1_router.html</anchorfile>
      <anchor>af5c0562ea7d93a8d7bb35363b296837d</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::routing::RoutingConstraints</name>
    <filename>structmaliput_1_1routing_1_1_routing_constraints.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>allow_lane_switch</name>
      <anchorfile>structmaliput_1_1routing_1_1_routing_constraints.html</anchorfile>
      <anchor>a49c521961f49daf29ae2126e170c311c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>max_phase_cost</name>
      <anchorfile>structmaliput_1_1routing_1_1_routing_constraints.html</anchorfile>
      <anchor>a51f660934305db71b676ff844a77b372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>max_route_cost</name>
      <anchorfile>structmaliput_1_1routing_1_1_routing_constraints.html</anchorfile>
      <anchor>a7e34fc921ba6123df0dac7d18a7130f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::Rule</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_rule.html</filename>
    <class kind="struct">maliput::api::rules::Rule::State</class>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Rule &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a5358e3b05db56d19875bb15f02523f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Type &gt;</type>
      <name>TypeId</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a4a4b94bba0865a112a84d2b4a054b6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::vector&lt; Id &gt; &gt;</type>
      <name>RelatedRules</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>ad20a20f4cf3ad282b0f5ea0a716896ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::vector&lt; UniqueId &gt; &gt;</type>
      <name>RelatedUniqueIds</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>aae244f337e8af36a083d06ab2de5d250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a7a4efd41af1fb22fb944d9f31587123b</anchor>
      <arglist>(Rule)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a328722a71abad27d0ef4b925e6e96385</anchor>
      <arglist>(const Id &amp;id, const TypeId &amp;type_id, const LaneSRoute &amp;zone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>ac238cc13f5b0c3dbe1768481330c105a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeId &amp;</type>
      <name>type_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>afeba777223b8da04927f861c93e0c4dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LaneSRoute &amp;</type>
      <name>zone</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a2f62468a5f47fdcf6093abc9aaa25156</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateRelatedRules</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a8d664a92620998b3dd7142203a889df6</anchor>
      <arglist>(const RelatedRules &amp;related_rules) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateRelatedUniqueIds</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a57a062b9c44f84684a02dd10f01e2a49</anchor>
      <arglist>(const RelatedUniqueIds &amp;related_unique_ids) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateSeverity</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule.html</anchorfile>
      <anchor>a1ca989c9988b916d0743e7db5bd122ac</anchor>
      <arglist>(int severity) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::RuleConstants</name>
    <filename>structmaliput_1_1_rule_constants.html</filename>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kId</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>a0098e578f858d62a14a660bd7ab4a89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kLaneId</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>a537d5ad853702cdf89d821d8924e7205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kRelatedRules</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>af77d82cfaf3db0b3e32e8fb4b27be645</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kRelatedUniqueIds</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>ad51990aa8aa3a55b451773eb7fc4a390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kSeverity</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>a79ab667399f7ab1304ca615eb407366c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kSRange</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>adaab831e884e9279b49cca218534d74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kType</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>a89dc318f8a875b0d6f7f1703769c25f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>kZone</name>
      <anchorfile>structmaliput_1_1_rule_constants.html</anchorfile>
      <anchor>a27fd1da4007e61111af1f939c70a9b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::RuleRegistry</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</filename>
    <class kind="struct">maliput::api::rules::RuleRegistry::QueryResult</class>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>ac5d7547c66816b2c64a7ac2467405d89</anchor>
      <arglist>(RuleRegistry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RuleRegistry</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>ad79f9d9306e78514721406d6ed3679a1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RuleRegistry</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a9e2083ad9f972ef0a1b671f2ba412144</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RegisterRangeValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a04be1fb8a69e37d7cf3fefea6742cebb</anchor>
      <arglist>(const Rule::TypeId &amp;type_id, const std::vector&lt; RangeValueRule::Range &gt; &amp;all_possible_ranges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RegisterDiscreteValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>afa6f95bca428c78123af3c35194df558</anchor>
      <arglist>(const Rule::TypeId &amp;type_id, const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;all_possible_values)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Rule::TypeId, std::vector&lt; RangeValueRule::Range &gt; &gt; &amp;</type>
      <name>RangeValueRuleTypes</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a1f161e69d9b9685760cf539e171556c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; Rule::TypeId, std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt; &amp;</type>
      <name>DiscreteValueRuleTypes</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a34b1e81784b6bbc6e0247f950cdc0f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; QueryResult &gt;</type>
      <name>GetPossibleStatesOfRuleType</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a295050b24860cb884c3d478af19e39be</anchor>
      <arglist>(const Rule::TypeId &amp;type_id) const</arglist>
    </member>
    <member kind="function">
      <type>RangeValueRule</type>
      <name>BuildRangeValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a209fb937d50bdff3870a33ee50541337</anchor>
      <arglist>(const Rule::Id &amp;id, const Rule::TypeId &amp;type_id, const LaneSRoute &amp;zone, const std::vector&lt; RangeValueRule::Range &gt; &amp;ranges) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValueRule</type>
      <name>BuildDiscreteValueRule</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_rule_registry.html</anchorfile>
      <anchor>a2c9731e3006957276768c2154f19d8eb</anchor>
      <arglist>(const Rule::Id &amp;id, const Rule::TypeId &amp;type_id, const LaneSRoute &amp;zone, const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::RuleTypeFilter</name>
    <filename>structmaliput_1_1_rule_type_filter.html</filename>
    <member kind="function">
      <type></type>
      <name>RuleTypeFilter</name>
      <anchorfile>structmaliput_1_1_rule_type_filter.html</anchorfile>
      <anchor>a75ad1b0f05ffc3e8cdd1aefd32d3b063</anchor>
      <arglist>(const api::rules::Rule::TypeId &amp;rule_type_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1_rule_type_filter.html</anchorfile>
      <anchor>afdc1ecc082be30181d1051e22c3637e3</anchor>
      <arglist>(const api::rules::Rule &amp;rule)</arglist>
    </member>
    <member kind="variable">
      <type>api::rules::Rule::TypeId</type>
      <name>rule_type</name>
      <anchorfile>structmaliput_1_1_rule_type_filter.html</anchorfile>
      <anchor>a0c5c7473e6aa659999860216c1dfd4fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::RungeKutta3Integrator</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_runge_kutta3_integrator.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::IntegratorBase</base>
    <member kind="function">
      <type></type>
      <name>~RungeKutta3Integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_runge_kutta3_integrator.html</anchorfile>
      <anchor>a6feb774094471a9ae52b7611699f11c6</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RungeKutta3Integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_runge_kutta3_integrator.html</anchorfile>
      <anchor>a53dbca07d2c73e1ce8cd5a4007eac320</anchor>
      <arglist>(const System&lt; T &gt; &amp;system, Context&lt; T &gt; *context=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_error_estimation</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_runge_kutta3_integrator.html</anchorfile>
      <anchor>a52ddb8ce13134e8e8afdfcfde6fd75ec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_error_estimate_order</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_runge_kutta3_integrator.html</anchorfile>
      <anchor>a7932e0cc0f116b8a625cb025616d73ab</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::scalar_predicate</name>
    <filename>structmaliput_1_1drake_1_1scalar__predicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>decltype(T()&lt; T())</type>
      <name>type</name>
      <anchorfile>structmaliput_1_1drake_1_1scalar__predicate.html</anchorfile>
      <anchor>a945d5b96b85fa30cf7587ef08b38f3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_bool</name>
      <anchorfile>structmaliput_1_1drake_1_1scalar__predicate.html</anchorfile>
      <anchor>ab6fdcd06e06c892b3492eb6ea8f15be2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ScalarDenseOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::DenseOutput</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>a687a48016f7da72e6a4bc234718fe144</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>EvaluateScalar</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>a59ec7eee615677d38592f3c8f73e5abe</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ScalarDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>aec23efec42dd4a13cf1931886c6d6dec</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VectorX&lt; T &gt;</type>
      <name>DoEvaluate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>a3ee4672a4597cc60597444085106fff9</anchor>
      <arglist>(const T &amp;t) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>do_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>a391a65a7d2b4f5059ef524ac3a9b97e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual T</type>
      <name>DoEvaluateScalar</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_dense_output.html</anchorfile>
      <anchor>a2d725908d9debd640d0405dcb445f5bf</anchor>
      <arglist>(const T &amp;t) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ScalarInitialValueProblem</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</filename>
    <templarg></templarg>
    <class kind="struct">maliput::drake::systems::ScalarInitialValueProblem::ScalarOdeContext</class>
    <member kind="typedef">
      <type>std::function&lt; T(const T &amp;t, const T &amp;x, const VectorX&lt; T &gt; &amp;k)&gt;</type>
      <name>ScalarOdeFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>a677a34d51ed872e958deb90ce676eec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>a874f2676e2aca2fb0f3d93b589e421dd</anchor>
      <arglist>(ScalarInitialValueProblem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarInitialValueProblem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>ac7affee024d4f08300eda60f2a60f0d2</anchor>
      <arglist>(const ScalarOdeFunction &amp;scalar_ode_function, const ScalarOdeContext &amp;default_values)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Solve</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>a96bb7ace98119838841607ca5d803730</anchor>
      <arglist>(const T &amp;tf, const ScalarOdeContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ScalarDenseOutput&lt; T &gt; &gt;</type>
      <name>DenseSolve</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>a072b01e07598a528f9ad9ec7d4daeebf</anchor>
      <arglist>(const T &amp;tf, const ScalarOdeContext &amp;values={}) const</arglist>
    </member>
    <member kind="function">
      <type>Integrator *</type>
      <name>reset_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>aaf92f89ed3fb6ea7acde795d33645a3c</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>const IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>adbc3bf152afe75736c6b8b3ecf8cd65e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegratorBase&lt; T &gt; &amp;</type>
      <name>get_mutable_integrator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem.html</anchorfile>
      <anchor>af7c4ee8378a24e575a176dfb7d308ae9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::ScalarInitialValueProblem::ScalarOdeContext</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</filename>
    <member kind="function">
      <type></type>
      <name>ScalarOdeContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</anchorfile>
      <anchor>a3a43609f2141dd054cba511b1ea2ac42</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarOdeContext</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</anchorfile>
      <anchor>a77cf87e7af6a44fdf4889ba93f7734c7</anchor>
      <arglist>(const std::optional&lt; T &gt; &amp;t0_in, const std::optional&lt; T &gt; &amp;x0_in, const std::optional&lt; VectorX&lt; T &gt;&gt; &amp;k_in)</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>t0</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</anchorfile>
      <anchor>a23f82ce075e13b4c8f4efecd0adc28b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>x0</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</anchorfile>
      <anchor>abfd51d7b1909466bf7ca5dc290adb283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; VectorX&lt; T &gt; &gt;</type>
      <name>k</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_scalar_initial_value_problem_1_1_scalar_ode_context.html</anchorfile>
      <anchor>ab853a3a6d8692d0994a854ad92b6ab3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ScalarViewDenseOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::ScalarDenseOutput</base>
    <member kind="function">
      <type></type>
      <name>ScalarViewDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>aa710a48ae6cd811c23d11facde7b6bc1</anchor>
      <arglist>(std::unique_ptr&lt; DenseOutput&lt; T &gt;&gt; base_output, int n)</arglist>
    </member>
    <member kind="function">
      <type>const DenseOutput&lt; T &gt; *</type>
      <name>get_base_output</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>ab2b8af8b409656405ff7825935e4bacc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>DoEvaluateScalar</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>a79ad533d2da285c4be700c651f72392a</anchor>
      <arglist>(const T &amp;t) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>do_is_empty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>ac083345d14acf38ae166338ca84b3759</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>do_start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>a92930061483d0cfcd3609603e34cc7b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>do_end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>aa9bde78de5e70d1642794ce746520155</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::unique_ptr&lt; DenseOutput&lt; T &gt; &gt;</type>
      <name>base_output_</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>a396d4a0bf3d7b4b85a0858caae313368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>n_</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_scalar_view_dense_output.html</anchorfile>
      <anchor>ac3a310d490afb0c7d60d80053bb151c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::Segment</name>
    <filename>classmaliput_1_1api_1_1_segment.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Segment</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>ad62aab38a774d311fcd89d88a96681d0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>SegmentId</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>acc1e5f359ad7f670ce73faa23be39d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Junction *</type>
      <name>junction</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>ae7d45473b824832f3828103f350b8f72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_lanes</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>a7fa67be7f6db7ed4c931a2491b0c51bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Lane *</type>
      <name>lane</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>a6f4e1b5acc16f9d2f722f0a36db0a06f</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Segment</name>
      <anchorfile>classmaliput_1_1api_1_1_segment.html</anchorfile>
      <anchor>a323d93e726913120d0c5ec89c64549fc</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::Segment</name>
    <filename>classmaliput_1_1geometry__base_1_1_segment.html</filename>
    <base>maliput::api::Segment</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>aa0c04fc22758b187b97e596c48304d9f</anchor>
      <arglist>(Segment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Segment</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>a60a41d328d0cd22160965c6a6a88538e</anchor>
      <arglist>(const api::SegmentId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>AddLane</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>a965bd340853e99f8a59c080ad25a4409</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AttachToJunction</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>a9786d0915ed4f28cd636bb2132e0444c</anchor>
      <arglist>(common::Passkey&lt; Junction &gt;, const api::Junction *junction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetLaneIndexingCallback</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>a28ad7e03186d393c5175a4ed04a05a09</anchor>
      <arglist>(common::Passkey&lt; Junction &gt;, const std::function&lt; void(const api::Lane *)&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Segment</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_segment.html</anchorfile>
      <anchor>a84a537aa6336ab1b17e86fcc3d165979</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::common::Serialize</name>
    <filename>structmaliput_1_1common_1_1_serialize.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1common_1_1_serialize.html</anchorfile>
      <anchor>a717986bf2c1fef85dcd7887354bf07c1</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::SimplePhaseRingBook</name>
    <filename>classmaliput_1_1_simple_phase_ring_book.html</filename>
    <base>maliput::api::rules::PhaseRingBook</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_simple_phase_ring_book.html</anchorfile>
      <anchor>abf7989c4fb0bdceb4525d43d717e1542</anchor>
      <arglist>(SimplePhaseRingBook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplePhaseRingBook</name>
      <anchorfile>classmaliput_1_1_simple_phase_ring_book.html</anchorfile>
      <anchor>a0b03e50baf69e9ace4fde261b114ae9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimplePhaseRingBook</name>
      <anchorfile>classmaliput_1_1_simple_phase_ring_book.html</anchorfile>
      <anchor>a194dcbb9909c4cc6da09a47c990a4502</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddPhaseRing</name>
      <anchorfile>classmaliput_1_1_simple_phase_ring_book.html</anchorfile>
      <anchor>ae5a954a1d2b48f6a96b05e52bd32c1bc</anchor>
      <arglist>(const api::rules::PhaseRing &amp;ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemovePhaseRing</name>
      <anchorfile>classmaliput_1_1_simple_phase_ring_book.html</anchorfile>
      <anchor>a02794c438b1411ab546439d077d28423</anchor>
      <arglist>(const api::rules::PhaseRing::Id &amp;ring_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::SimpleRulebook</name>
    <filename>classmaliput_1_1_simple_rulebook.html</filename>
    <base>maliput::api::rules::RoadRulebook</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a5fc3e2b075ab1024964458ab156ef201</anchor>
      <arglist>(SimpleRulebook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRulebook</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>aa47f578b15cb59a3b0685e12a4b5ed1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleRulebook</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a3528fd4b629265a3bff9228022b497f6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveAll</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a9aa9f847832ca5467851014a0d73e9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>aa8be6299ec5d8a57e3a4c6a296786892</anchor>
      <arglist>(const api::rules::RightOfWayRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a4af6c6f8f080ddfc94af3cc669adc2cb</anchor>
      <arglist>(const api::rules::RightOfWayRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a5d0add9d7a9f925c5b49084d878976fd</anchor>
      <arglist>(const api::rules::SpeedLimitRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>ad2ce757d42ec1f39b86892a821209c8a</anchor>
      <arglist>(const api::rules::SpeedLimitRule::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>a4e6fbe029474ae1695ff877bdf38a551</anchor>
      <arglist>(const api::rules::DirectionUsageRule &amp;rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveRule</name>
      <anchorfile>classmaliput_1_1_simple_rulebook.html</anchorfile>
      <anchor>af8757469d83d042543509882636762e6</anchor>
      <arglist>(const api::rules::DirectionUsageRule::Id &amp;id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::Sink</name>
    <filename>classmaliput_1_1common_1_1_sink.html</filename>
    <base>maliput::common::SinkBase</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1common_1_1_sink.html</anchorfile>
      <anchor>a3537e810224c15d3f23e9d0731090438</anchor>
      <arglist>(Sink)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sink</name>
      <anchorfile>classmaliput_1_1common_1_1_sink.html</anchorfile>
      <anchor>a508976fa163df1a854b13f8a641a5a3f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Sink</name>
      <anchorfile>classmaliput_1_1common_1_1_sink.html</anchorfile>
      <anchor>af221ceefbe09e77d791a19f9893ade05</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classmaliput_1_1common_1_1_sink.html</anchorfile>
      <anchor>a73f72d66a2f6ff1406e19b6a497ce9b8</anchor>
      <arglist>(const std::string &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classmaliput_1_1common_1_1_sink.html</anchorfile>
      <anchor>a04f2540d940cc37b5c2538ed8e5b54be</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::common::SinkBase</name>
    <filename>classmaliput_1_1common_1_1_sink_base.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1common_1_1_sink_base.html</anchorfile>
      <anchor>ad8389241ac7515bca7191bce12528a50</anchor>
      <arglist>(SinkBase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinkBase</name>
      <anchorfile>classmaliput_1_1common_1_1_sink_base.html</anchorfile>
      <anchor>aa6e7e19b29a57fd8559a3e7950d28040</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SinkBase</name>
      <anchorfile>classmaliput_1_1common_1_1_sink_base.html</anchorfile>
      <anchor>ac0eab8e8c97c08ea855f48adf224be70</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classmaliput_1_1common_1_1_sink_base.html</anchorfile>
      <anchor>ad94de719c8f0c4209b4895f315db5227</anchor>
      <arglist>(const std::string &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classmaliput_1_1common_1_1_sink_base.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::math::details::SquaredDistance</name>
    <filename>structmaliput_1_1math_1_1details_1_1_squared_distance.html</filename>
    <templarg></templarg>
    <templarg>Dimension</templarg>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1math_1_1details_1_1_squared_distance.html</anchorfile>
      <anchor>af8a65106872ba0e68464d6fcb8276637</anchor>
      <arglist>(const Coordinate &amp;lhs, const Coordinate &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::SRange</name>
    <filename>classmaliput_1_1api_1_1_s_range.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a6f5c3964d9ff64857b1ade5f17b4ff80</anchor>
      <arglist>(SRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SRange</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>aaf774715d48436d21baaaf5dd8eaae44</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SRange</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a13eae5788b3ad3cf745fb219d9bef4dd</anchor>
      <arglist>(double s0, double s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s0</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a759ab75802fe12bb4299e7e9d4a5331c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s1</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a150b08bb3546bdfd5c04372e406b9e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_s0</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a2cdb02cd43286c893b2847d83447697e</anchor>
      <arglist>(double s0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_s1</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a8a85f447a321221d42bbd9ed48b10dd3</anchor>
      <arglist>(double s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>ac3fe9e82d5f4f1d55a5c104a2a5d37a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>WithS</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a1187cd4bd8bd2678fba4ed946ee1bd6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Intersects</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>a4a81c1cdfa1d8e114f91c29c075cdcaf</anchor>
      <arglist>(const SRange &amp;s_range, double tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; SRange &gt;</type>
      <name>GetIntersection</name>
      <anchorfile>classmaliput_1_1api_1_1_s_range.html</anchorfile>
      <anchor>ac8360198e5ead6dc2652ec6d5befed50</anchor>
      <arglist>(const SRange &amp;s_range, double tolerance) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::SrhFace</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_srh_face.html</filename>
    <member kind="function">
      <type></type>
      <name>SrhFace</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_srh_face.html</anchorfile>
      <anchor>aa7c3a9e82981ba657276ebc46e5b575f</anchor>
      <arglist>(const std::initializer_list&lt; api::LanePosition &gt; vertices, const api::LanePosition &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>GeoFace</type>
      <name>ToGeoFace</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_srh_face.html</anchorfile>
      <anchor>a9066879c275ebba1f86129e672a075a6</anchor>
      <arglist>(const api::Lane *lane) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::Rule::State</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a8099d9c527beab7a18bdcf3c3ef34eb1</anchor>
      <arglist>(State)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a7662f55909d581100da5f988e7ea2456</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>aab4deb190b9e4be395e15fb3010ba37e</anchor>
      <arglist>(int severity, RelatedRules related_rules, RelatedUniqueIds related_unique_ids)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a43ebf34661d7d17c4e53b5ccce1ffa73</anchor>
      <arglist>(const State &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a6320a38f2831ff6cf9e1fae30ffffafb</anchor>
      <arglist>(const State &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>severity</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a118a118c0d99574666955efdf97068b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelatedRules</type>
      <name>related_rules</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a8d16d861c6500bfa36e16435c7e0c51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelatedUniqueIds</type>
      <name>related_unique_ids</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a3225914ff640ebeb69cb7e57ed7fb2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kStrict</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>ae723a76a2f38404bb7341f2c1ffd890a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kBestEffort</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a7f1130b023df6bd64569f4bd8af34f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kStrict</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>ae723a76a2f38404bb7341f2c1ffd890a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>kBestEffort</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_rule_1_1_state.html</anchorfile>
      <anchor>a7f1130b023df6bd64569f4bd8af34f5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::State</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_state.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a790355057d12e9c1ce7643551c16fecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~State</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a6852634c51e30fa7d2c00556fb8e1fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>abd10fc1c7fc20f882ee1085fee975ec7</anchor>
      <arglist>(std::unique_ptr&lt; ContinuousState&lt; T &gt;&gt; xc)</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>get_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a7a1544a1499821caca5625f00f8ed593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ContinuousState&lt; T &gt; &amp;</type>
      <name>get_mutable_continuous_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>acb0b02a48022aa9088e9c98aef708c75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>aaefdc8fde69639ee0218fe45685c5ba2</anchor>
      <arglist>(std::unique_ptr&lt; DiscreteValues&lt; T &gt;&gt; xd)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a4734a73a697822adab6651601f0ede89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValues&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a590d056abd4381b8212beaf6079e4291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; &amp;</type>
      <name>get_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a923ddf26eb35c376ea23f672520a9229</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; &amp;</type>
      <name>get_mutable_discrete_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>af792a48ad2c93163065743e8a53c0fd4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>ad7067e986dfaf92cf8c44f748d2fb9d1</anchor>
      <arglist>(std::unique_ptr&lt; AbstractValues &gt; xa)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValues &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a49a3cc1ba02268cb11c8af904336af01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractValues &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a94a4e151e00ad39c7936f7016da6553d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const U &amp;</type>
      <name>get_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a6e953da59a69f25bd342bf8885d218d6</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>get_mutable_abstract_state</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>acdeb8df5c64ce2494984c9e08b74eb9d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a148d3864f35c71287e491482722a8c61</anchor>
      <arglist>(const State&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_state.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::rules::StateProviderResult</name>
    <filename>structmaliput_1_1api_1_1rules_1_1_state_provider_result.html</filename>
    <templarg></templarg>
    <class kind="struct">maliput::api::rules::StateProviderResult::Next</class>
    <member kind="variable">
      <type>T</type>
      <name>state</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_state_provider_result.html</anchorfile>
      <anchor>ab1812049cf00b4ad1597ecc964ca3cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; Next &gt;</type>
      <name>next</name>
      <anchorfile>structmaliput_1_1api_1_1rules_1_1_state_provider_result.html</anchorfile>
      <anchor>addf9af2b81e4ce9b3d0b55755a17e2eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::StepwiseDenseOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_stepwise_dense_output.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::DenseOutput</base>
    <member kind="function">
      <type></type>
      <name>~StepwiseDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_stepwise_dense_output.html</anchorfile>
      <anchor>a6718eefb391aa19c8e48a484f85d278b</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Rollback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_stepwise_dense_output.html</anchorfile>
      <anchor>af2c0f19de4721dc69021e04a06f5e86e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Consolidate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_stepwise_dense_output.html</anchorfile>
      <anchor>a6eca86e7c39b925cd21c469ab40c7a71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StepwiseDenseOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_stepwise_dense_output.html</anchorfile>
      <anchor>abd0f846471ffa4de522326c17c6536f5</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::geometry_base::StrategyBase</name>
    <filename>classmaliput_1_1geometry__base_1_1_strategy_base.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StrategyBase</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_strategy_base.html</anchorfile>
      <anchor>abcde06e3f4a599e41c573e433ccee8c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>api::RoadPositionResult</type>
      <name>ToRoadPosition</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_strategy_base.html</anchorfile>
      <anchor>a67c214aec04cea17439741e563d47368</anchor>
      <arglist>(const api::InertialPosition &amp;inertial_position, const std::optional&lt; api::RoadPosition &gt; &amp;hint) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; api::RoadPositionResult &gt;</type>
      <name>FindRoadPositions</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_strategy_base.html</anchorfile>
      <anchor>ab6ecc137c5f4408c613adb1f3246a854</anchor>
      <arglist>(const api::InertialPosition &amp;inertial_position, double radius) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StrategyBase</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_strategy_base.html</anchorfile>
      <anchor>a4cf58310e75abde760457f3682551bfe</anchor>
      <arglist>(const api::RoadGeometry *rg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const api::RoadGeometry *</type>
      <name>get_road_geometry</name>
      <anchorfile>classmaliput_1_1geometry__base_1_1_strategy_base.html</anchorfile>
      <anchor>a452dbeac8c1a181baf764572a150aa49</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::LaneEnd::StrictOrder</name>
    <filename>structmaliput_1_1api_1_1_lane_end_1_1_strict_order.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1api_1_1_lane_end_1_1_strict_order.html</anchorfile>
      <anchor>ad5af0d5a4ccb68c02dcdda0641c58647</anchor>
      <arglist>(const LaneEnd &amp;lhs, const LaneEnd &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::Subvector</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_subvector.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::VectorBase</base>
    <member kind="function">
      <type></type>
      <name>Subvector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_subvector.html</anchorfile>
      <anchor>a4575334ed5480e03413ad0551b61faeb</anchor>
      <arglist>(VectorBase&lt; T &gt; *vector, int first_element, int num_elements)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_subvector.html</anchorfile>
      <anchor>a00f794bc20ca26b81a247bcee7c7f6a4</anchor>
      <arglist>() const final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::System</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>~System</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abfc527f890d8846b751645ab81a67bb1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Accept</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac204d99f901bdec9ffb0a12e7fe2973a</anchor>
      <arglist>(SystemVisitor&lt; T &gt; *v) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>AllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a78fda6d982dc968061c5d92e32173629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; CompositeEventCollection&lt; T &gt; &gt;</type>
      <name>AllocateCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6cc7dd6cf032c4b3137de55349d8e99b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>AllocateInputVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab7ce7f3c3ed819de001d4ab977ee65bf</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;input_port) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>AllocateInputAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a69db7d7d92345c74487bc38c5d136a07</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;input_port) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SystemOutput&lt; T &gt; &gt;</type>
      <name>AllocateOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af46c35210719be2e1035e14ea9a11299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; ContinuousState&lt; T &gt; &gt;</type>
      <name>AllocateTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab543fa724bbe93efd19a42f5e9e65c72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>AllocateImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>acdb947655d5d8156013bfdfd6ec90521</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>AllocateDiscreteVariables</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a975677491aa00a7677181b12311d7c10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>CreateDefaultContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa036f873464a74c03fab943bbace8942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDefaultState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a909935648b14e55b07263264616ace3c</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDefaultParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb9c4edaf95ef26f1ec419f32446e042</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, Parameters&lt; T &gt; *parameters) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDefaultContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab4e6ee413f4f47a20f6dcc2cbd831b88</anchor>
      <arglist>(Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRandomState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3516fe581eeed54e8718b52410a310dd</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRandomParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a082c64234f6d3d49e4648a1b5b6e3eae</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, Parameters&lt; T &gt; *parameters, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRandomContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6a5a403983483dda39f8196a241225f2</anchor>
      <arglist>(Context&lt; T &gt; *context, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateFixedInputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a47ec86445724fd77391af7874bfc4848</anchor>
      <arglist>(Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAnyDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a037dd9c0afe6e059e67edb4c9c01eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a51acfa17df1bc87ce8eaa0e1556f6d46</anchor>
      <arglist>(int output_port) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a8dd5092dc2aa2c8f38e0d6336437012d</anchor>
      <arglist>(int input_port, int output_port) const</arglist>
    </member>
    <member kind="function">
      <type>virtual std::multimap&lt; int, int &gt;</type>
      <name>GetDirectFeedthroughs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad7f0ac4b8f2b65f013e88c56ccccd9e6</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Publish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a31898e0276f6bbc4edf7111f809afb01</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; PublishEvent&lt; T &gt;&gt; &amp;events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Publish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aafa5fa6fa51aaa8f987abb101e341739</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>EvalTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ae38625e953699a0433249142972eef52</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntry &amp;</type>
      <name>get_time_derivatives_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a028e42d4ecb1d2902ed839a8a9d2afaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a97c1ac3506af8f2c386ba74b5fbc1e48</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abfc345ff50df77ad2ae727e6d3a9b939</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94bf4d9472a96aad5d65e47375cf035f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a08ed6bf23e134cbc50d073e81ffc247f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; T &gt; *</type>
      <name>EvalVectorInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa184508e6a0494c1b8214dab77e34ce3</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>EvalEigenVectorInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a4cd99b363ba22035de7689f48702e89b</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>SystemConstraintIndex</type>
      <name>AddExternalConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad97e05bf6c16c4bbf058d3cd4978f696</anchor>
      <arglist>(ExternalSystemConstraint constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af2677f8773e90a538483eedd80a81a9f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, ContinuousState&lt; T &gt; *derivatives) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2bb4c1e3572a8009863b5a342fcb5c49</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const ContinuousState&lt; T &gt; &amp;proposed_derivatives, EigenPtr&lt; VectorX&lt; T &gt;&gt; residual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDiscreteVariableUpdates</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2b4b5edfcccb98a87f958bc9b6b626bd</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDiscreteVariableUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3873890578a88001255c795f20f01e3f</anchor>
      <arglist>(const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDiscreteVariableUpdates</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a054ef0e9e578c5abc57fd4dc8b12bd84</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad195518c9c6d2c9421e6e2b222514d89</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1bc3701622107a616b3e45f9f0735233</anchor>
      <arglist>(const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a25f04e429745ae7a16600c4dfda0f931</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcNextUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a164afe3c1db737b93696b8808bb2c942</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPerStepEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad8a24b8f910f9d990db8e59bf2bae6d0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInitializationEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ae6f84e649d76754f38ea7420a21a1a04</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; PeriodicEventData &gt;</type>
      <name>GetUniquePeriodicDiscreteUpdateAttribute</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0e7bc22bdd95c7c611e859c12dfef3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDifferenceEquationSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aeb5016cfee3ccd384e0a0ba62b4da5bc</anchor>
      <arglist>(double *time_period=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; PeriodicEventData, std::vector&lt; const Event&lt; T &gt; * &gt;, PeriodicEventDataComparator &gt;</type>
      <name>GetPeriodicEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a68ec8dd139ab0f99c1fe908e4098a974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a574467e50cf5c242f665557daca33111</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, SystemOutput&lt; T &gt; *outputs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3d5eb1d2630aab1938230257554d1f43</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aad01402fef0de79310989d7d22dfde92</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a5674ae416c2808c939dffc117b209f23</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a23fe133b70153e382d7f50c38b96bf1f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a05cc5df6d0d0fe4ea54b522ae776ca39</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const VectorBase&lt; T &gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3d05cfdce7f2dbae7c9f18babfc827e8</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a10eba167739bfe8e7e419b5c8ae41537</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const VectorBase&lt; T &gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9914457357091af1a9932863f2b396a4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>GetSubsystemContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aaaa7a04bd169a920b4ae90d4e1db4fe5</anchor>
      <arglist>(const System&lt; T &gt; &amp;subsystem, const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; &amp;</type>
      <name>GetMutableSubsystemContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a95ce57e23ae030c0ef224b0d0b7cc70c</anchor>
      <arglist>(const System&lt; T &gt; &amp;subsystem, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>GetMyContextFromRoot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>accf801fb0529fd09f9a2c3e9ae941147</anchor>
      <arglist>(const Context&lt; T &gt; &amp;root_context) const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; &amp;</type>
      <name>GetMyMutableContextFromRoot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb6f679178e8c8864dfb7d65a3198ee3</anchor>
      <arglist>(Context&lt; T &gt; *root_context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMemoryObjectName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9714aaf76aca9169da6de7fbcb8339fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>get_input_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a39b7b9f7723ad69fca8766e6590ef681</anchor>
      <arglist>(int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>get_input_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abcfc22af164f8b6ee671b0d598fd2466</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; *</type>
      <name>get_input_port_selection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ada70a32e95cd84cd4fe02c1d25be437d</anchor>
      <arglist>(std::variant&lt; InputPortSelection, InputPortIndex &gt; port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>GetInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0b235f5342408f469d02b5b5d2dfb555</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2de14ac72441c44be8dec6cc6719dd1e</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>get_output_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9d32474ac975155d1289d564016a8a13</anchor>
      <arglist>(int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>get_output_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a08e2c5bab385f7c5e1069d61c45600c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; *</type>
      <name>get_output_port_selection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a991e02715eef0ca58a3ee6dda24a3395</anchor>
      <arglist>(std::variant&lt; OutputPortSelection, OutputPortIndex &gt; port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>GetOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af900e8c1b8e91219a8771c54f1d130ab</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a70946c955bb9100cc8e9dc1f5df5c8bc</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_constraints</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a23f1475b0c301d9d78814fce265fd6ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraint&lt; T &gt; &amp;</type>
      <name>get_constraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac72d50dd5540d7a303b1bb8135df5a80</anchor>
      <arglist>(SystemConstraintIndex constraint_index) const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>CheckSystemConstraintsSatisfied</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a75fef66587073b52e0e69c84a736bd72</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>CopyContinuousStateVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a46b662b8346e6250f8c4340c18658084</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_input_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94a6d73c74c7268734792b3703e8600d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_output_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a7ceec1b22b6b1b25fc675234e78e71be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetGraphvizString</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a588e4f7454694f04b4b654d154f170f3</anchor>
      <arglist>(int max_depth=std::numeric_limits&lt; int &gt;::max()) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizFragment</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0732c676190d17645ea9103bbfb0ca78</anchor>
      <arglist>(int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizInputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a350ddfa07205d6ae68e8f01c12cfc053</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizOutputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1c4224423eafc6245ff15cbe2c270ce0</anchor>
      <arglist>(const OutputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>GetGraphvizId</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa1fac664a1c120c425bc522d7ecb435c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FixInputPortsFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a601fb2c6cf565d954253d25725ae9d6b</anchor>
      <arglist>(const System&lt; double &gt; &amp;other_system, const Context&lt; double &gt; &amp;other_context, Context&lt; T &gt; *target_context) const</arglist>
    </member>
    <member kind="function">
      <type>const SystemScalarConverter &amp;</type>
      <name>get_system_scalar_converter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a4f520e00ddac3d41f7e2df922de46da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchPublishHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a84fe4f2e8e6d8a61dfae06f64fb6d5ce</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; PublishEvent&lt; T &gt;&gt; &amp;events) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchDiscreteVariableUpdateHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a921d9a050e25d0f2c55de265477c26f5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoApplyDiscreteVariableUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ace4dcdf94807bb6d449aadbd4deb67c9</anchor>
      <arglist>(const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state, Context&lt; T &gt; *context) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchUnrestrictedUpdateHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>affb56df9a1e83ab8cef21c9b122d6346</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoApplyUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a8cc318dbe5bed1302294f6d28ae0bbbc</anchor>
      <arglist>(const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state, Context&lt; T &gt; *context) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>System</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa1b849c60d9ec6bbfeac42dc3c075a02</anchor>
      <arglist>(SystemScalarConverter converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af0b57e4cacf2beba4ef87c87f824aba8</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, PortDataType type, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abe346b9e2e3014575fcb225e80d97a65</anchor>
      <arglist>(PortDataType type, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>AddConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac9fbf92ac77db4d805a5a5cf980de130</anchor>
      <arglist>(std::unique_ptr&lt; SystemConstraint&lt; T &gt;&gt; constraint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aed8b3a6c3f9d024e15d98cb808dbbc17</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, ContinuousState&lt; T &gt; *derivatives) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aacbe5f9cc83f774ffcaa87a5c1278446</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const ContinuousState&lt; T &gt; &amp;proposed_derivatives, EigenPtr&lt; VectorX&lt; T &gt;&gt; residual) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcNextUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a710d1532ace6bf692305d2ebce4a06c4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events, T *time) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::map&lt; PeriodicEventData, std::vector&lt; const Event&lt; T &gt; * &gt;, PeriodicEventDataComparator &gt;</type>
      <name>DoGetPeriodicEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb36a8c15587e340c460d261f3786a03</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoGetPerStepEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa158a2b4a85c8be94bc78b0c646b7eb4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoGetInitializationEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a67c5737dc468f5b94ffca61792e4dfc5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a57c349e8e8aed5454a6293c356a29a92</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94c7b978ca681f773dcc13cc82bd834b</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>adb639ec6f0b87551136907abbe377cb0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0fbb9bf04beb39962554f61b99862da0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoMapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a433601e16c81b891db313d5356b46de5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoMapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0910a65b46512bbe7a2657a593d35c4c</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>AllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a78fda6d982dc968061c5d92e32173629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; CompositeEventCollection&lt; T &gt; &gt;</type>
      <name>AllocateCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6cc7dd6cf032c4b3137de55349d8e99b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; BasicVector&lt; T &gt; &gt;</type>
      <name>AllocateInputVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab7ce7f3c3ed819de001d4ab977ee65bf</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;input_port) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>AllocateInputAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a69db7d7d92345c74487bc38c5d136a07</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;input_port) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SystemOutput&lt; T &gt; &gt;</type>
      <name>AllocateOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af46c35210719be2e1035e14ea9a11299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; ContinuousState&lt; T &gt; &gt;</type>
      <name>AllocateTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab543fa724bbe93efd19a42f5e9e65c72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>AllocateImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>acdb947655d5d8156013bfdfd6ec90521</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; DiscreteValues&lt; T &gt; &gt;</type>
      <name>AllocateDiscreteVariables</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a975677491aa00a7677181b12311d7c10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Context&lt; T &gt; &gt;</type>
      <name>CreateDefaultContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa036f873464a74c03fab943bbace8942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDefaultState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a909935648b14e55b07263264616ace3c</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>SetDefaultParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb9c4edaf95ef26f1ec419f32446e042</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, Parameters&lt; T &gt; *parameters) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetDefaultContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab4e6ee413f4f47a20f6dcc2cbd831b88</anchor>
      <arglist>(Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRandomState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3516fe581eeed54e8718b52410a310dd</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetRandomParameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a082c64234f6d3d49e4648a1b5b6e3eae</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, Parameters&lt; T &gt; *parameters, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetRandomContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6a5a403983483dda39f8196a241225f2</anchor>
      <arglist>(Context&lt; T &gt; *context, RandomGenerator *generator) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AllocateFixedInputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a47ec86445724fd77391af7874bfc4848</anchor>
      <arglist>(Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasAnyDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a037dd9c0afe6e059e67edb4c9c01eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a51acfa17df1bc87ce8eaa0e1556f6d46</anchor>
      <arglist>(int output_port) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasDirectFeedthrough</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a8dd5092dc2aa2c8f38e0d6336437012d</anchor>
      <arglist>(int input_port, int output_port) const</arglist>
    </member>
    <member kind="function">
      <type>virtual std::multimap&lt; int, int &gt;</type>
      <name>GetDirectFeedthroughs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad7f0ac4b8f2b65f013e88c56ccccd9e6</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Publish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a31898e0276f6bbc4edf7111f809afb01</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; PublishEvent&lt; T &gt;&gt; &amp;events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Publish</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aafa5fa6fa51aaa8f987abb101e341739</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; &amp;</type>
      <name>EvalTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ae38625e953699a0433249142972eef52</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntry &amp;</type>
      <name>get_time_derivatives_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a028e42d4ecb1d2902ed839a8a9d2afaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a97c1ac3506af8f2c386ba74b5fbc1e48</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abfc345ff50df77ad2ae727e6d3a9b939</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94bf4d9472a96aad5d65e47375cf035f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>EvalNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a08ed6bf23e134cbc50d073e81ffc247f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; T &gt; *</type>
      <name>EvalVectorInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa184508e6a0494c1b8214dab77e34ce3</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorBlock&lt; const VectorX&lt; T &gt; &gt;</type>
      <name>EvalEigenVectorInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a4cd99b363ba22035de7689f48702e89b</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>SystemConstraintIndex</type>
      <name>AddExternalConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad97e05bf6c16c4bbf058d3cd4978f696</anchor>
      <arglist>(ExternalSystemConstraint constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af2677f8773e90a538483eedd80a81a9f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, ContinuousState&lt; T &gt; *derivatives) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2bb4c1e3572a8009863b5a342fcb5c49</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const ContinuousState&lt; T &gt; &amp;proposed_derivatives, EigenPtr&lt; VectorX&lt; T &gt;&gt; residual) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDiscreteVariableUpdates</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2b4b5edfcccb98a87f958bc9b6b626bd</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDiscreteVariableUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3873890578a88001255c795f20f01e3f</anchor>
      <arglist>(const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcDiscreteVariableUpdates</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a054ef0e9e578c5abc57fd4dc8b12bd84</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, DiscreteValues&lt; T &gt; *discrete_state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad195518c9c6d2c9421e6e2b222514d89</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1bc3701622107a616b3e45f9f0735233</anchor>
      <arglist>(const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a25f04e429745ae7a16600c4dfda0f931</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcNextUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a164afe3c1db737b93696b8808bb2c942</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetPerStepEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad8a24b8f910f9d990db8e59bf2bae6d0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetInitializationEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ae6f84e649d76754f38ea7420a21a1a04</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; PeriodicEventData &gt;</type>
      <name>GetUniquePeriodicDiscreteUpdateAttribute</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0e7bc22bdd95c7c611e859c12dfef3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDifferenceEquationSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aeb5016cfee3ccd384e0a0ba62b4da5bc</anchor>
      <arglist>(double *time_period=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; PeriodicEventData, std::vector&lt; const Event&lt; T &gt; * &gt;, PeriodicEventDataComparator &gt;</type>
      <name>GetPeriodicEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a68ec8dd139ab0f99c1fe908e4098a974</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CalcOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a574467e50cf5c242f665557daca33111</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, SystemOutput&lt; T &gt; *outputs) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3d5eb1d2630aab1938230257554d1f43</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aad01402fef0de79310989d7d22dfde92</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a5674ae416c2808c939dffc117b209f23</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a23fe133b70153e382d7f50c38b96bf1f</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a05cc5df6d0d0fe4ea54b522ae776ca39</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const VectorBase&lt; T &gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3d05cfdce7f2dbae7c9f18babfc827e8</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a10eba167739bfe8e7e419b5c8ae41537</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const VectorBase&lt; T &gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9914457357091af1a9932863f2b396a4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>GetSubsystemContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aaaa7a04bd169a920b4ae90d4e1db4fe5</anchor>
      <arglist>(const System&lt; T &gt; &amp;subsystem, const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; &amp;</type>
      <name>GetMutableSubsystemContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a95ce57e23ae030c0ef224b0d0b7cc70c</anchor>
      <arglist>(const System&lt; T &gt; &amp;subsystem, Context&lt; T &gt; *context) const</arglist>
    </member>
    <member kind="function">
      <type>const Context&lt; T &gt; &amp;</type>
      <name>GetMyContextFromRoot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>accf801fb0529fd09f9a2c3e9ae941147</anchor>
      <arglist>(const Context&lt; T &gt; &amp;root_context) const</arglist>
    </member>
    <member kind="function">
      <type>Context&lt; T &gt; &amp;</type>
      <name>GetMyMutableContextFromRoot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb6f679178e8c8864dfb7d65a3198ee3</anchor>
      <arglist>(Context&lt; T &gt; *root_context) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetMemoryObjectName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9714aaf76aca9169da6de7fbcb8339fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>get_input_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a39b7b9f7723ad69fca8766e6590ef681</anchor>
      <arglist>(int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>get_input_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abcfc22af164f8b6ee671b0d598fd2466</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; *</type>
      <name>get_input_port_selection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ada70a32e95cd84cd4fe02c1d25be437d</anchor>
      <arglist>(std::variant&lt; InputPortSelection, InputPortIndex &gt; port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const InputPort&lt; T &gt; &amp;</type>
      <name>GetInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0b235f5342408f469d02b5b5d2dfb555</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2de14ac72441c44be8dec6cc6719dd1e</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>get_output_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9d32474ac975155d1289d564016a8a13</anchor>
      <arglist>(int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>get_output_port</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a08e2c5bab385f7c5e1069d61c45600c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; *</type>
      <name>get_output_port_selection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a991e02715eef0ca58a3ee6dda24a3395</anchor>
      <arglist>(std::variant&lt; OutputPortSelection, OutputPortIndex &gt; port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPort&lt; T &gt; &amp;</type>
      <name>GetOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af900e8c1b8e91219a8771c54f1d130ab</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>HasOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a70946c955bb9100cc8e9dc1f5df5c8bc</anchor>
      <arglist>(const std::string &amp;port_name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_constraints</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a23f1475b0c301d9d78814fce265fd6ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraint&lt; T &gt; &amp;</type>
      <name>get_constraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac72d50dd5540d7a303b1bb8135df5a80</anchor>
      <arglist>(SystemConstraintIndex constraint_index) const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>CheckSystemConstraintsSatisfied</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a75fef66587073b52e0e69c84a736bd72</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>VectorX&lt; T &gt;</type>
      <name>CopyContinuousStateVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a46b662b8346e6250f8c4340c18658084</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_input_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94a6d73c74c7268734792b3703e8600d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_output_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a7ceec1b22b6b1b25fc675234e78e71be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetGraphvizString</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a588e4f7454694f04b4b654d154f170f3</anchor>
      <arglist>(int max_depth=std::numeric_limits&lt; int &gt;::max()) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizFragment</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0732c676190d17645ea9103bbfb0ca78</anchor>
      <arglist>(int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizInputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a350ddfa07205d6ae68e8f01c12cfc053</anchor>
      <arglist>(const InputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetGraphvizOutputPortToken</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1c4224423eafc6245ff15cbe2c270ce0</anchor>
      <arglist>(const OutputPort&lt; T &gt; &amp;port, int max_depth, std::stringstream *dot) const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>GetGraphvizId</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa1fac664a1c120c425bc522d7ecb435c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FixInputPortsFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a601fb2c6cf565d954253d25725ae9d6b</anchor>
      <arglist>(const System&lt; double &gt; &amp;other_system, const Context&lt; double &gt; &amp;other_context, Context&lt; T &gt; *target_context) const</arglist>
    </member>
    <member kind="function">
      <type>const SystemScalarConverter &amp;</type>
      <name>get_system_scalar_converter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a4f520e00ddac3d41f7e2df922de46da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; System&lt; U &gt; &gt;</type>
      <name>ToScalarType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a30b43a0d81534db447de5166505716df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; System&lt; U &gt; &gt;</type>
      <name>ToScalarTypeMaybe</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a7e275d69ab53de1f9fe3b91c43236d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetWitnessFunctions</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab9f777bd94a7d9188a905ac6ecfff577</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, std::vector&lt; const WitnessFunction&lt; T &gt; * &gt; *w) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcWitnessValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2949deb61db7903dae4c0b7cb9633fac</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const WitnessFunction&lt; T &gt; &amp;witness_func) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>AddTriggeredWitnessFunctionToCompositeEventCollection</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a838b32b3b596aae6c11fa9c19e655407</anchor>
      <arglist>(Event&lt; T &gt; *event, CompositeEventCollection&lt; T &gt; *events) const =0</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af58ff2c0e75003f66e5c196c61538f1f</anchor>
      <arglist>(std::string description, ValueProducer value_producer, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af8522153f26cb7620bd669b288b91c26</anchor>
      <arglist>(std::string description, std::function&lt; std::unique_ptr&lt; AbstractValue &gt;()&gt; alloc_function, std::function&lt; void(const ContextBase &amp;, AbstractValue *)&gt; calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a376502958f63c619086e6cd89f091fdb</anchor>
      <arglist>(std::string description, const ValueType &amp;model_value, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad5d2a9a7af14845f76fbfa627020887e</anchor>
      <arglist>(std::string description, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9d6169e37fb10a5b25a6fe347ff161e9</anchor>
      <arglist>(std::string description, ValueType(MySystem::*make)() const, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ae547d10ddbc3b5c837e0ae70520f5c4c</anchor>
      <arglist>(std::string description, const ValueType &amp;model_value, ValueType(MySystem::*calc)(const MyContext &amp;) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a42eb6c61e9ced41f9b46296327f5db47</anchor>
      <arglist>(std::string description, ValueType(MySystem::*calc)(const MyContext &amp;) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>abstract_parameter_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1a4ef0e0e633c6f722ee518308d7cb5a</anchor>
      <arglist>(AbstractParameterIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>abstract_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a4a8d4f32034a610ea30a283699040708</anchor>
      <arglist>(AbstractStateIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>cache_entry_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a7e92c6f01c04b3591d642d27a467b093</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>discrete_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>adf86073429b07d388b0157956bfdbac6</anchor>
      <arglist>(DiscreteStateIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>input_port_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a191b7cb5dcbfee51a62fa042ec14561f</anchor>
      <arglist>(InputPortIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>numeric_parameter_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a45e0bf1fd3096bff3df2587ec4f02285</anchor>
      <arglist>(NumericParameterIndex index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; S&lt; U &gt; &gt;</type>
      <name>ToScalarType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a864d167dd193cc0e71b45db451beda38</anchor>
      <arglist>(const S&lt; T &gt; &amp;from)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>accuracy_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad649083fc3bcb645671be3fad577d2ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_input_ports_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6d7c526102c09a75195c57ebf5f54a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_parameters_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad6b63a1cb8922051fb1a7fe4b56092bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_sources_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af0b9bc9f93181e042bdb2c36f4dbea10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a2789768c5d75378c081683a8016f0784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>configuration_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a28830dced98dcdc1f498d8d250db0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>ke_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a66e1d9af27119011a497b78df6907b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>kinematics_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a1291b5091aa55dbd03c9b5944dbced09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>nothing_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6fe75ddbd79ab1d862df9a50b3c8a624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pa_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af3c65473a41f73091c600eaead714fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>afdc60bc4c201f17bd35bf40c13a183b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pe_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a49f1689b1ae9f05b6e2f194db873927b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pn_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aaeae092662e78f50416eb6dc01ad3ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pnc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0afc9712c887706c12039e871476f30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>q_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a41d3cdadf7d6b62b055993148b82df19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>time_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a68516072b2dc51a601f2de699691f1c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>v_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab858ddb6f259d65f760c2032b3bd5164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xa_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a19842775d11b50e5ae56abcc6d38ccc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a385e0d5605b81db0fbfc6bdd57affb5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xcdot_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ab42cd3bff14253894eb0a29edf843b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xd_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a64938d044107c8eedc97f89aaf0e4a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>z_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a340a9b088fc407f703a9e21ed9dee32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual T</type>
      <name>DoCalcWitnessValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a9440f6840ccb22a989d50ff8a7e65760</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const WitnessFunction&lt; T &gt; &amp;witness_func) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoGetWitnessFunctions</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0b9d6f71af96840edfe44f5d242156a8</anchor>
      <arglist>(const Context&lt; T &gt; &amp;, std::vector&lt; const WitnessFunction&lt; T &gt; * &gt; *) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchPublishHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a84fe4f2e8e6d8a61dfae06f64fb6d5ce</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; PublishEvent&lt; T &gt;&gt; &amp;events) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchDiscreteVariableUpdateHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a921d9a050e25d0f2c55de265477c26f5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoApplyDiscreteVariableUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ace4dcdf94807bb6d449aadbd4deb67c9</anchor>
      <arglist>(const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt; &amp;events, DiscreteValues&lt; T &gt; *discrete_state, Context&lt; T &gt; *context) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DispatchUnrestrictedUpdateHandler</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>affb56df9a1e83ab8cef21c9b122d6346</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>DoApplyUnrestrictedUpdate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a8cc318dbe5bed1302294f6d28ae0bbbc</anchor>
      <arglist>(const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt; &amp;events, State&lt; T &gt; *state, Context&lt; T &gt; *context) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>System</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa1b849c60d9ec6bbfeac42dc3c075a02</anchor>
      <arglist>(SystemScalarConverter converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>af0b57e4cacf2beba4ef87c87f824aba8</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; name, PortDataType type, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InputPort&lt; T &gt; &amp;</type>
      <name>DeclareInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abe346b9e2e3014575fcb225e80d97a65</anchor>
      <arglist>(PortDataType type, int size, std::optional&lt; RandomDistribution &gt; random_type=std::nullopt)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemConstraintIndex</type>
      <name>AddConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac9fbf92ac77db4d805a5a5cf980de130</anchor>
      <arglist>(std::unique_ptr&lt; SystemConstraint&lt; T &gt;&gt; constraint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcTimeDerivatives</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aed8b3a6c3f9d024e15d98cb808dbbc17</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, ContinuousState&lt; T &gt; *derivatives) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcImplicitTimeDerivativesResidual</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aacbe5f9cc83f774ffcaa87a5c1278446</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const ContinuousState&lt; T &gt; &amp;proposed_derivatives, EigenPtr&lt; VectorX&lt; T &gt;&gt; residual) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoCalcNextUpdateTime</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a710d1532ace6bf692305d2ebce4a06c4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events, T *time) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::map&lt; PeriodicEventData, std::vector&lt; const Event&lt; T &gt; * &gt;, PeriodicEventDataComparator &gt;</type>
      <name>DoGetPeriodicEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>abb36a8c15587e340c460d261f3786a03</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoGetPerStepEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa158a2b4a85c8be94bc78b0c646b7eb4</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoGetInitializationEvents</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a67c5737dc468f5b94ffca61792e4dfc5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, CompositeEventCollection&lt; T &gt; *events) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcPotentialEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a57c349e8e8aed5454a6293c356a29a92</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcKineticEnergy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a94c7b978ca681f773dcc13cc82bd834b</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>adb639ec6f0b87551136907abbe377cb0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual T</type>
      <name>DoCalcNonConservativePower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0fbb9bf04beb39962554f61b99862da0</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoMapQDotToVelocity</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a433601e16c81b891db313d5356b46de5</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;qdot, VectorBase&lt; T &gt; *generalized_velocity) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoMapVelocityToQDot</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a0910a65b46512bbe7a2657a593d35c4c</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;generalized_velocity, VectorBase&lt; T &gt; *qdot) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>System</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a70a6f9e15c48813e173ebd6d48770fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::VectorBlock&lt; VectorX&lt; T &gt; &gt;</type>
      <name>GetMutableOutputVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a6278437ceb2dce5a6c8f70f19285319a</anchor>
      <arglist>(SystemOutput&lt; T &gt; *output, int port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>forced_publish_events_exist</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad8812e3795d6c187c6f21fb441a717db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>forced_discrete_update_events_exist</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a582cbe45eeaf9fe74b7143a1b71ff958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>forced_unrestricted_update_events_exist</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a06f70983cdba078821ed784fcf2f775f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EventCollection&lt; PublishEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_forced_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac7af4df5b72b50d255dc99cddb67e4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_forced_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>afed229e14777bd82382dc3ed6e715bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_mutable_forced_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ad856b6c5b4d66151f1f28d8645bf215c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const EventCollection&lt; PublishEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_forced_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aa532bcdc29e8be25c20b40968bb95b66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const EventCollection&lt; DiscreteUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_forced_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a3137d050d040e4beb9ef60cd004ac112</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt; &gt; &amp;</type>
      <name>get_forced_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>aac53f82a39ea0c5e3240a9bab52b1415</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_forced_publish_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>ac7240490688324a9f15132fee98e52ce</anchor>
      <arglist>(std::unique_ptr&lt; EventCollection&lt; PublishEvent&lt; T &gt;&gt;&gt; forced)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_forced_discrete_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>afd0aacb96a01eb38099ac6cd4d12037b</anchor>
      <arglist>(std::unique_ptr&lt; EventCollection&lt; DiscreteUpdateEvent&lt; T &gt;&gt;&gt; forced)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_forced_unrestricted_update_events</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a75c5ab861b2f08ff5a29066458747b9a</anchor>
      <arglist>(std::unique_ptr&lt; EventCollection&lt; UnrestrictedUpdateEvent&lt; T &gt;&gt;&gt; forced)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SystemScalarConverter &amp;</type>
      <name>get_mutable_system_scalar_converter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a86649644cbbb5db1a63f2ef6dde59edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ValidateChildOfContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system.html</anchorfile>
      <anchor>a88d780ac96e83eadd765f5c2fd1abbb4</anchor>
      <arglist>(const Clazz&lt; T &gt; *object) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_base.html</filename>
    <base>maliput::drake::systems::internal::SystemMessageInterface</base>
    <class kind="struct">maliput::drake::systems::SystemBase::ContextSizes</class>
    <member kind="function">
      <type></type>
      <name>~SystemBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ae7271d3848e9754bee3e07c53614100c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad5260b9627048b854b45d05ed34adc22</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aea1591b1773209f55ccc85356efb639a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>GetSystemName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>acf2143907221997b4bfd7cf5fc40b422</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSystemPathname</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ac8f54385db97ee385847ad7577dbe34e</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSystemType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a283b89b5f6b6d1745bc590e6050177a9</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; ContextBase &gt;</type>
      <name>AllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a0e75aaff1fa28d033136d4073c59e097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a9d6169e37fb10a5b25a6fe347ff161e9</anchor>
      <arglist>(std::string description, ValueType(MySystem::*make)() const, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ae547d10ddbc3b5c837e0ae70520f5c4c</anchor>
      <arglist>(std::string description, const ValueType &amp;model_value, ValueType(MySystem::*calc)(const MyContext &amp;) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a42eb6c61e9ced41f9b46296327f5db47</anchor>
      <arglist>(std::string description, ValueType(MySystem::*calc)(const MyContext &amp;) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue *</type>
      <name>EvalAbstractInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2cb18001bedce2dfaf75b0ae8a14375e</anchor>
      <arglist>(const ContextBase &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>EvalInputValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>afc0d520318199bf36a45ec450612fdce</anchor>
      <arglist>(const ContextBase &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_input_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a94a6d73c74c7268734792b3703e8600d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_output_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a7ceec1b22b6b1b25fc675234e78e71be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPortBase &amp;</type>
      <name>get_input_port_base</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a209c59864026db2a428f593601ee7ffc</anchor>
      <arglist>(InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPortBase &amp;</type>
      <name>get_output_port_base</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2fa50d5f614683c52737a0694e245963</anchor>
      <arglist>(OutputPortIndex port_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_inputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a61fbc5b339d9006ff53e39b8df10c611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_outputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ae1394e3cf29023475b4983cb4ad16e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::multimap&lt; int, int &gt;</type>
      <name>GetDirectFeedthroughs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab34847cc9c420c8aa3186d8900197e0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_cache_entries</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a87a98a257dc03eb749975de05778dbc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntry &amp;</type>
      <name>get_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a517ae28d98adfc4e8381382d0a4c7be9</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>get_mutable_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aa94a6a1b2fe554bfa62515be514e2c79</anchor>
      <arglist>(CacheIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue *</type>
      <name>EvalAbstractInput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2cb18001bedce2dfaf75b0ae8a14375e</anchor>
      <arglist>(const ContextBase &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>EvalInputValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>afc0d520318199bf36a45ec450612fdce</anchor>
      <arglist>(const ContextBase &amp;context, int port_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_input_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a94a6d73c74c7268734792b3703e8600d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_output_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a7ceec1b22b6b1b25fc675234e78e71be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InputPortBase &amp;</type>
      <name>get_input_port_base</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a209c59864026db2a428f593601ee7ffc</anchor>
      <arglist>(InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function">
      <type>const OutputPortBase &amp;</type>
      <name>get_output_port_base</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2fa50d5f614683c52737a0694e245963</anchor>
      <arglist>(OutputPortIndex port_index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_inputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a61fbc5b339d9006ff53e39b8df10c611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_total_outputs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ae1394e3cf29023475b4983cb4ad16e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::multimap&lt; int, int &gt;</type>
      <name>GetDirectFeedthroughs</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab34847cc9c420c8aa3186d8900197e0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_cache_entries</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a87a98a257dc03eb749975de05778dbc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CacheEntry &amp;</type>
      <name>get_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a517ae28d98adfc4e8381382d0a4c7be9</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>get_mutable_cache_entry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aa94a6a1b2fe554bfa62515be514e2c79</anchor>
      <arglist>(CacheIndex index)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af8522153f26cb7620bd669b288b91c26</anchor>
      <arglist>(std::string description, std::function&lt; std::unique_ptr&lt; AbstractValue &gt;()&gt; alloc_function, std::function&lt; void(const ContextBase &amp;, AbstractValue *)&gt; calc_function, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>afea7c026952e64b2be27ef9634bd76b8</anchor>
      <arglist>(&quot;2021-11-01&quot;, &quot;This overload for DeclareCacheEntry is rarely the best choice; it is&quot; &quot; unusual for allocation to actually require a boutique callback rather&quot; &quot; than just a Clone of a model_value. We found that most uses of this&quot; &quot; overload hindered readability, because other overloads would often do&quot; &quot; the job more directly. If no existing overload works, you may wrap a&quot; &quot; ValueProducer around your existing make method and call the primary&quot; &quot; DeclareCacheEntry overload that takes a ValueProducer, instead.&quot;) CacheEntry &amp;DeclareCacheEntry(std</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a376502958f63c619086e6cd89f091fdb</anchor>
      <arglist>(std::string description, const ValueType &amp;model_value, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
      <docanchor file="classmaliput_1_1drake_1_1systems_1_1_system_base.html">DeclareCacheEntry_model_and_calc</docanchor>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a35fcadc2c8c1466d7c7bead0908b04ce</anchor>
      <arglist>(&quot;2021-11-01&quot;, &quot;This overload for DeclareCacheEntry is dispreferred because it might&quot; &quot; not reuse heap storage from one calculation to the next, and so is&quot; &quot; typically less efficient than the other overloads. A better option&quot; &quot; is to change the ValueType returned by-value to be an output pointer&quot; &quot; instead, and return void. If that is not possible, you may wrap a&quot; &quot; ValueProducer around your existing method and call the primary&quot; &quot; DeclareCacheEntry overload that takes a ValueProducer, instead.&quot;) CacheEntry &amp;DeclareCacheEntry(std</arglist>
    </member>
    <member kind="function">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad5d2a9a7af14845f76fbfa627020887e</anchor>
      <arglist>(std::string description, void(MySystem::*calc)(const MyContext &amp;, ValueType *) const, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
      <docanchor file="classmaliput_1_1drake_1_1systems_1_1_system_base.html">DeclareCacheEntry_calc_only</docanchor>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a35fcadc2c8c1466d7c7bead0908b04ce</anchor>
      <arglist>(&quot;2021-11-01&quot;, &quot;This overload for DeclareCacheEntry is dispreferred because it might&quot; &quot; not reuse heap storage from one calculation to the next, and so is&quot; &quot; typically less efficient than the other overloads. A better option&quot; &quot; is to change the ValueType returned by-value to be an output pointer&quot; &quot; instead, and return void. If that is not possible, you may wrap a&quot; &quot; ValueProducer around your existing method and call the primary&quot; &quot; DeclareCacheEntry overload that takes a ValueProducer, instead.&quot;) CacheEntry &amp;DeclareCacheEntry(std</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntry</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af58ff2c0e75003f66e5c196c61538f1f</anchor>
      <arglist>(std::string description, ValueProducer value_producer, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={all_sources_ticket()})</arglist>
      <docanchor file="classmaliput_1_1drake_1_1systems_1_1_system_base.html">DeclareCacheEntry_primary</docanchor>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>discrete_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>adf86073429b07d388b0157956bfdbac6</anchor>
      <arglist>(DiscreteStateIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>abstract_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a4a8d4f32034a610ea30a283699040708</anchor>
      <arglist>(AbstractStateIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>numeric_parameter_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a45e0bf1fd3096bff3df2587ec4f02285</anchor>
      <arglist>(NumericParameterIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>abstract_parameter_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a1a4ef0e0e633c6f722ee518308d7cb5a</anchor>
      <arglist>(AbstractParameterIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>input_port_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a191b7cb5dcbfee51a62fa042ec14561f</anchor>
      <arglist>(InputPortIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>cache_entry_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a7e92c6f01c04b3591d642d27a467b093</anchor>
      <arglist>(CacheIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>DependencyTicket</type>
      <name>output_port_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a7c95876fd161fda4fb4fb7d51bec2a81</anchor>
      <arglist>(OutputPortIndex index) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_continuous_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aa568c26e18ea55bb339893881cff3e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_discrete_state_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a1a03d2d5e70020145bd659eba780f967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_states</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad2c71c7988b370b4e93ea1c33a2a0e9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_numeric_parameter_groups</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aff6508ca0ff8f5e886e63fb9c830e36a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_abstract_parameters</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a0232523ac7f8337a392b321ffd282187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>implicit_time_derivatives_residual_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aba0bd9017cbe1fbf0f02912f0d45fd10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a7622a0fb573704de7505804d57e66a79</anchor>
      <arglist>(const ContextBase &amp;context) const final</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a4eded72dc7f57febf1d8c171426d81de</anchor>
      <arglist>(const ContextBase *context) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateCreatedForThisSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aa4fd1fc18c838f00d24942d8afcd26e4</anchor>
      <arglist>(const Clazz &amp;object) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a1cd0ce5bd76208e8110ad85a956e3127</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab83ce091f3aba8ecb71e72262fc1fd6b</anchor>
      <arglist>(std::unique_ptr&lt; InputPortBase &gt; port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddOutputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a89be3ba9e76827e83fb1e139e5b750cc</anchor>
      <arglist>(std::unique_ptr&lt; OutputPortBase &gt; port)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>NextInputPortName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a9fd030b5ac189d066b7c8725b65d550c</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; given_name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>NextOutputPortName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ac0bf41c62cddfdf3d006ce88e3768b3d</anchor>
      <arglist>(std::variant&lt; std::string, UseDefaultName &gt; given_name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddDiscreteStateGroup</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab4e83668b3fecff021600eff4390cc2a</anchor>
      <arglist>(DiscreteStateIndex index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractState</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af329e5c00e271bc61a65b0227d34c76e</anchor>
      <arglist>(AbstractStateIndex index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddNumericParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a794ca537e26044e254cda9ccba0a6385</anchor>
      <arglist>(NumericParameterIndex index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>AddAbstractParameter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>accca12932eb38b764d93ab6bed8f02fc</anchor>
      <arglist>(AbstractParameterIndex index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CacheEntry &amp;</type>
      <name>DeclareCacheEntryWithKnownTicket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a47fc57338deed2fa61c0bdf4fcb35389</anchor>
      <arglist>(DependencyTicket known_ticket, std::string description, ValueProducer value_producer, std::set&lt; DependencyTicket &gt; prerequisites_of_calc={ all_sources_ticket()})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const internal::SystemParentServiceInterface *</type>
      <name>get_parent_service</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab8bcdc5ff465681009f4a32470ebfb26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DependencyTicket</type>
      <name>assign_next_dependency_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a161f7073ea98c0a25ca55f5dd4186dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::function&lt; void(const AbstractValue &amp;)&gt;</type>
      <name>MakeFixInputPortTypeChecker</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a68edc113d25e053c138ab15996332664</anchor>
      <arglist>(InputPortIndex port_index) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractValue *</type>
      <name>EvalAbstractInputImpl</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a4f89d878ae72c67da5af5acb06f48a22</anchor>
      <arglist>(const char *func, const ContextBase &amp;context, InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowNegativePortIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aa640b3592c2af42c76fac2d8a048d25c</anchor>
      <arglist>(const char *func, int port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowInputPortIndexOutOfRange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a9295e809fe1cff333430e1b00a84520c</anchor>
      <arglist>(const char *func, InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowOutputPortIndexOutOfRange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af58594b987a3e5b1684d4e38bf00767e</anchor>
      <arglist>(const char *func, OutputPortIndex port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowNotAVectorInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aee2dfff6a2db34da2c791a7971e2af0c</anchor>
      <arglist>(const char *func, InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowInputPortHasWrongType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2200e7d8b6b39e758e5df64ee81c356a</anchor>
      <arglist>(const char *func, InputPortIndex port_index, const std::string &amp;expected_type, const std::string &amp;actual_type) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowCantEvaluateInputPort</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a49bc2d35e014b293b9564cb9e85e5390</anchor>
      <arglist>(const char *func, InputPortIndex port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const InputPortBase &amp;</type>
      <name>GetInputPortBaseOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ace57c456b11046f56381f7b4ab7e2343</anchor>
      <arglist>(const char *func, int port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const OutputPortBase &amp;</type>
      <name>GetOutputPortBaseOrThrow</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab18146b3800f5a63bbe4d08eae828883</anchor>
      <arglist>(const char *func, int port_index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowValidateContextMismatch</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a36ffbedd99e6e5c0fb71753ad2b833b7</anchor>
      <arglist>(const ContextBase &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>InitializeContextBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a0eb74936487f1ae4658b54979195fa1b</anchor>
      <arglist>(ContextBase *context) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; ContextBase &gt;</type>
      <name>DoAllocateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>acfa7f79f981ab30a3919aa36e829b62a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ContextSizes &amp;</type>
      <name>get_context_sizes</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad91661e6330ae28c6e7be235ed7bfd10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContextSizes &amp;</type>
      <name>get_mutable_context_sizes</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>acf9b9f6c41032b95eaf53a3fda7ba77e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_implicit_time_derivatives_residual_size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a67f200e6184921996fcce55fcb18fba6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>nothing_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a6fe75ddbd79ab1d862df9a50b3c8a624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>time_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a68516072b2dc51a601f2de699691f1c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>accuracy_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad649083fc3bcb645671be3fad577d2ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>q_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a41d3cdadf7d6b62b055993148b82df19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>v_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab858ddb6f259d65f760c2032b3bd5164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>z_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a340a9b088fc407f703a9e21ed9dee32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a385e0d5605b81db0fbfc6bdd57affb5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xd_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a64938d044107c8eedc97f89aaf0e4a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xa_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a19842775d11b50e5ae56abcc6d38ccc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_state_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a2789768c5d75378c081683a8016f0784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pn_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aaeae092662e78f50416eb6dc01ad3ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pa_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af3c65473a41f73091c600eaead714fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_parameters_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ad6b63a1cb8922051fb1a7fe4b56092bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_input_ports_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a6d7c526102c09a75195c57ebf5f54a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_sources_except_input_ports_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>abcd2ceca3da3b633da04d2f11c206b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>all_sources_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>af0b9bc9f93181e042bdb2c36f4dbea10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>configuration_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a28830dced98dcdc1f498d8d250db0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>kinematics_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a1291b5091aa55dbd03c9b5944dbced09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>xcdot_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>ab42cd3bff14253894eb0a29edf843b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pe_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a49f1689b1ae9f05b6e2f194db873927b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>ke_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a66e1d9af27119011a497b78df6907b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>afdc60bc4c201f17bd35bf40c13a183b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyTicket</type>
      <name>pnc_ticket</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a0afc9712c887706c12039e871476f30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>set_parent_service</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>abbed6ab1f586a7b4d4a6131c6fa415ab</anchor>
      <arglist>(SystemBase *child, const internal::SystemParentServiceInterface *parent_service)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ThrowInputPortHasWrongType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>aca66a5dc0394edc50a2944eabcc586dc</anchor>
      <arglist>(const char *func, const std::string &amp;system_pathname, InputPortIndex, const std::string &amp;port_name, const std::string &amp;expected_type, const std::string &amp;actual_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>ThrowUnsupportedScalarConversion</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>a3d7705860c5c35247d366bb79783d388</anchor>
      <arglist>(const SystemBase &amp;from, const std::string &amp;destination_type_name)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ContextSizes &amp;</type>
      <name>get_context_sizes</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_base.html</anchorfile>
      <anchor>acae5fb494dd1e5a799534b5fc0826062</anchor>
      <arglist>(const SystemBase &amp;system)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::SystemBaseContextBaseAttorney</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_base_context_base_attorney.html</filename>
    <member kind="function">
      <type></type>
      <name>SystemBaseContextBaseAttorney</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_base_context_base_attorney.html</anchorfile>
      <anchor>a216d7bafe983311cbc40280b53460dc3</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>maliput::drake::systems::DiagramContextTest</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_base_context_base_attorney.html</anchorfile>
      <anchor>af70c0cc6534ab399e8c3cdaac3c42f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>maliput::drake::systems::LeafContextTest</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_base_context_base_attorney.html</anchorfile>
      <anchor>a12cffce87916b4b775dd438503b5b9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>maliput::drake::systems::SystemBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_base_context_base_attorney.html</anchorfile>
      <anchor>a17c31a5e334eb29555473879e46675ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemConstraint</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SystemConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a7f4a4465f9643bf8f48fda8ffaf41131</anchor>
      <arglist>(const System&lt; T &gt; *system, std::string description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>af269862dd25edca586ba2097088aba1d</anchor>
      <arglist>(const System&lt; T &gt; *system, ContextConstraintCalc&lt; T &gt; calc_function, SystemConstraintBounds bounds, std::string description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemConstraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>afb8cca7bc4a12bf41444b20bd4e35a5f</anchor>
      <arglist>(const System&lt; T &gt; *system, SystemConstraintCalc&lt; T &gt; calc_function, SystemConstraintBounds bounds, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a36c85b060c434857b59b0992f9f95619</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, VectorX&lt; T &gt; *value) const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>CheckSatisfied</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a3899e4ce18e02c4370c47d0feebbc9e3</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>const System&lt; T &gt; &amp;</type>
      <name>get_system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a5c403016877fd5f6291208aeb9a8063c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SystemConstraintBounds &amp;</type>
      <name>bounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>ae87e33ae13c59fffc72c5519a9741504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SystemConstraintType</type>
      <name>type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a290e041bd3a8025e0db998efee366d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_equality_constraint</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>abcafbae944197bced07e5fad982d9341</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>lower_bound</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>af82995c25d1c99a8ec676ffd7ec92204</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>upper_bound</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a451749e9965610a12833a0252edc7803</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::optional&lt; internal::SystemId &gt; &amp;</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a0a58f995f3aff39ba8792f0a8c2158ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint.html</anchorfile>
      <anchor>a3965cbaa8df39799338ac0838f8306a7</anchor>
      <arglist>(internal::SystemId id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemConstraintBounds</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</filename>
    <member kind="function">
      <type></type>
      <name>SystemConstraintBounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>a30f1ab19d53bdfbbc7ca39b23ea63a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemConstraintBounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>ab52304c935037bd82d9cbb3c29c30938</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lower, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemConstraintBounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>a81a486d7d72159d28afa0c24fee43fc7</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;lower, std::nullopt_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemConstraintBounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>abcb65ef98a52d5f09834aaccc9c79749</anchor>
      <arglist>(std::nullopt_t, const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SystemConstraintType</type>
      <name>type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>a290e041bd3a8025e0db998efee366d6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>lower</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>abde60322baf729eefeb3642f4e5b5d29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>upper</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>a6ef0aece28b0b839f47496770a1d0d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SystemConstraintBounds</type>
      <name>Equality</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_constraint_bounds.html</anchorfile>
      <anchor>a2b31cd373b0b7376f7841a59af449816</anchor>
      <arglist>(int size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::SystemMessageInterface</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SystemMessageInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>a6ae326f847266a2b6bfbc52af788ade1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>GetSystemName</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>aa443a7928b8021fb096c64dbca9520be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>GetSystemPathname</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>a666fc7f4dd0ed645e2d505a84d8c59db</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>GetSystemType</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>a924a4bfcee3b493c902f107dcf4e5c5e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ValidateContext</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>afcb9629bcb34274ff2a057ed2464fe5e</anchor>
      <arglist>(const ContextBase &amp;context) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>no_name</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>a42c9c3abbe724802f8ec38ae7dd3d852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>path_separator</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>ad87f213ddd3de8d532531de410a5767c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemMessageInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>abd68313ffba488495c27ea557981b994</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_message_interface.html</anchorfile>
      <anchor>a40b28a2fd4037516dcfbebfd78c14ca1</anchor>
      <arglist>(SystemMessageInterface)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemOutput</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_output.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>ab190f103ce7de4d992a4e39ae03e8dca</anchor>
      <arglist>(SystemOutput)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SystemOutput</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>a432f2051132ba80bf6467b702927ffbe</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_ports</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>ae7da72b26338686a8d3395d3231ec0d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue *</type>
      <name>get_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>af1a19ce9b2e53b51be34f9e9fac24eb4</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const BasicVector&lt; T &gt; *</type>
      <name>get_vector_data</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>a60013dba1473fd30e87e70192cdd411c</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue *</type>
      <name>GetMutableData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>ae75be064aaeada65abd5db89cb622b66</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>BasicVector&lt; T &gt; *</type>
      <name>GetMutableVectorData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>a8cc8006b406f31ec693aeac7fd660dfd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>internal::SystemId</type>
      <name>get_system_id</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>a1b3f9382208d13e11984a54afa711577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>System&lt; T &gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>acc101f7fb3a61892369e9d49e46d2793</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SystemOutputTest</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_output.html</anchorfile>
      <anchor>a473f76ec31b905f85f545e2ee3ec3d42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::SystemParentServiceInterface</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SystemParentServiceInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>af076b1e10e175284ef3b6780adbde7b9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>GetParentPathname</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>a0f28cd98cfd8f3fc225a66cdbfb95ead</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const SystemBase &amp;</type>
      <name>GetRootSystemBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>a8841fcd200ac13c36163ba0ca9b986d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemParentServiceInterface</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>a192d373b47b685661aa6e5ed11053656</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>aaa75f64a649bd3488852853a7a041420</anchor>
      <arglist>(SystemParentServiceInterface)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::maliput::drake::systems::SystemBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_system_parent_service_interface.html</anchorfile>
      <anchor>a1fba7b6c45eda9b70c638d7fc577fc83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemScalarConverter</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</filename>
    <member kind="typedef">
      <type>std::function&lt; std::unique_ptr&lt; System&lt; T &gt; &gt;(const System&lt; U &gt; &amp;)&gt;</type>
      <name>supported</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>ab64101f38b9e8b6aa702e25763030e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>ab81f354cf9ec41fa90e1e8d092de021e</anchor>
      <arglist>(SystemScalarConverter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemScalarConverter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a3834c7f6d8a065ef95436cfc0b0ebaa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemScalarConverter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a04fcaa98c869b8ff1c345bb5e98f2561</anchor>
      <arglist>(SystemTypeTag&lt; S &gt;)</arglist>
    </member>
    <member kind="function">
      <type>enum</type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a6321b9cf19eeccac14d828cb6dac676c</anchor>
      <arglist>(&quot;2021-11-01&quot;, &quot;Use MakeWithoutSubtypeChecking instead of kDisabled.&quot;) GuaranteedSubtypePreservation</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SystemScalarConverter</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a39bc263bfa369d811ee1c1ef60850d5b</anchor>
      <arglist>(SystemTypeTag&lt; S &gt;, GuaranteedSubtypePreservation sub)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Add</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>ab688111bb39aa17b3c4937fb3dc1327c</anchor>
      <arglist>(const ConverterFunction&lt; T, U &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddIfSupported</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a741ce0f7af95f7085627930436dab249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RemoveUnlessAlsoSupportedBy</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a9016c7efc7525c57ed373c3e00b47151</anchor>
      <arglist>(const SystemScalarConverter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>acd5d1f84f2f2a44c8c039711a228effa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsConvertible</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a8baa6c61f01430d61236235b8af457c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; System&lt; T &gt; &gt;</type>
      <name>Convert</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a862227b546ec331405fdc8696aeb9002</anchor>
      <arglist>(const System&lt; U &gt; &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SystemScalarConverter</type>
      <name>MakeWithoutSubtypeChecking</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_scalar_converter.html</anchorfile>
      <anchor>a6275b6e3f7ef323d21f726c6f093d1dd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::SystemTypeTag</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_system_type_tag.html</filename>
    <templarg>S</templarg>
    <member kind="function">
      <type></type>
      <name>SystemTypeTag</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1_system_type_tag.html</anchorfile>
      <anchor>a379e6a18189f3ab144292c07cd2cd1d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::SystemVisitor</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_system_visitor.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SystemVisitor</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_visitor.html</anchorfile>
      <anchor>ad4a0eb26e075adddd704eda8e4b08c4e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>VisitSystem</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_visitor.html</anchorfile>
      <anchor>a269301e7a7eaee8a0d421f59d14b7944</anchor>
      <arglist>(const System&lt; T &gt; &amp;system)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SystemVisitor</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_system_visitor.html</anchorfile>
      <anchor>a99b3f29fe6c3e035f83a1959706ab4da</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::Polynomial::Term</name>
    <filename>classmaliput_1_1drake_1_1_polynomial_1_1_term.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_term.html</anchorfile>
      <anchor>ac1257eb15b653872d1754f9731e7b1f2</anchor>
      <arglist>(const Term &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_term.html</anchorfile>
      <anchor>a5c98542968a765a4da1cf13b71e2eaaa</anchor>
      <arglist>(const Term &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>VarType</type>
      <name>var</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_term.html</anchorfile>
      <anchor>a3c0813942263106700a29e522a224006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PowerType</type>
      <name>power</name>
      <anchorfile>classmaliput_1_1drake_1_1_polynomial_1_1_term.html</anchorfile>
      <anchor>ac1824026fd6513f52dbf078e21746c5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::ThreadPool</name>
    <filename>classmaliput_1_1utility_1_1_thread_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>a0bf34c4dfb73c2b78d1953cdfe818c3e</anchor>
      <arglist>(ThreadPool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>afb14059ba8fb0a2101908a3826462959</anchor>
      <arglist>(std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadPool</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>ad41a30b11a0c9d8566ca1a53b4cf43f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; R &gt;</type>
      <name>Queue</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>ab60bad5d924a62faad599b82691da200</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Start</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>a07aaf1227e4d645f15e0a964f54ef291</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Finish</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>af9d1bc46635e487c85720b943dd8ba28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel_pending</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>a484a870cd323db7e606fb1dae4a18416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>classmaliput_1_1utility_1_1_thread_pool.html</anchorfile>
      <anchor>a61da580fc69a74f3ef17956ba5fd88a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::TrafficLight</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</filename>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; TrafficLight &gt;</type>
      <name>Id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>a029206de7f2b36baf2a974fd7922b7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>af7e0ad54f29a7c2093923bbc6dc88d4c</anchor>
      <arglist>(TrafficLight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrafficLight</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>a8a33df5cc72ed7a810509b2050d34fc0</anchor>
      <arglist>(const Id &amp;id, const InertialPosition &amp;position_road_network, const Rotation &amp;orientation_road_network, std::vector&lt; std::unique_ptr&lt; BulbGroup &gt;&gt; bulb_groups)</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>a3e9b36985fa40131c908fffb29f45c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InertialPosition &amp;</type>
      <name>position_road_network</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>ad86da4631941ff862e4b86de5ee16747</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>orientation_road_network</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>a9b101cd2eb8d2e39f53c7ffeb93af33a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const BulbGroup * &gt;</type>
      <name>bulb_groups</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>ad158f2067d781a34df2de96c61b2ba48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BulbGroup *</type>
      <name>GetBulbGroup</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light.html</anchorfile>
      <anchor>a9ad32001c047b97b3fc0f4b0dc182fcc</anchor>
      <arglist>(const BulbGroup::Id &amp;id) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::TrafficLightBook</name>
    <filename>classmaliput_1_1_traffic_light_book.html</filename>
    <base>maliput::api::rules::TrafficLightBook</base>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1_traffic_light_book.html</anchorfile>
      <anchor>abcc08c5751a8d7e9ffcf5e7e27e1e611</anchor>
      <arglist>(TrafficLightBook)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrafficLightBook</name>
      <anchorfile>classmaliput_1_1_traffic_light_book.html</anchorfile>
      <anchor>ac6252aac70ee58246aaa76909c91dad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrafficLightBook</name>
      <anchorfile>classmaliput_1_1_traffic_light_book.html</anchorfile>
      <anchor>a73564dc67d24d37a28f9699229eb6707</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddTrafficLight</name>
      <anchorfile>classmaliput_1_1_traffic_light_book.html</anchorfile>
      <anchor>af7b16aaf63fff8a971cd59fd74347f96</anchor>
      <arglist>(std::unique_ptr&lt; const api::rules::TrafficLight &gt; traffic_light)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::TrafficLightBook</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_NO_COPY_NO_MOVE_NO_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</anchorfile>
      <anchor>abcc08c5751a8d7e9ffcf5e7e27e1e611</anchor>
      <arglist>(TrafficLightBook)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TrafficLightBook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</anchorfile>
      <anchor>a14bb0d04101a52c43ba47d129b835554</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; const TrafficLight * &gt;</type>
      <name>TrafficLights</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</anchorfile>
      <anchor>a047c977e446c27ecdadcc648b408f37f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TrafficLight *</type>
      <name>GetTrafficLight</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</anchorfile>
      <anchor>af6732393db10e43a27efd4eb21b79aa1</anchor>
      <arglist>(const TrafficLight::Id &amp;id) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TrafficLightBook</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_traffic_light_book.html</anchorfile>
      <anchor>a050a1e9e217785773eedeff40a95f39b</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::TrafficLightBookBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_traffic_light_book_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_traffic_light</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_traffic_light_book_build_flags.html</anchorfile>
      <anchor>a3bac9554279313f4f503536e73bbb5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrafficLightBuildFlags</type>
      <name>traffic_light_book_flags</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_traffic_light_book_build_flags.html</anchorfile>
      <anchor>a080a1fb21261f6948a8bd09b5e0ebc86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::api::test::TrafficLightBuildFlags</name>
    <filename>structmaliput_1_1api_1_1test_1_1_traffic_light_build_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_traffic_light</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_traffic_light_build_flags.html</anchorfile>
      <anchor>a64291f874be4b14bdca4cff55d7f37bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>add_missing_bulb_group</name>
      <anchorfile>structmaliput_1_1api_1_1test_1_1_traffic_light_build_flags.html</anchorfile>
      <anchor>a668864f7fc8b7607446a3275c8bf957f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::scalar_conversion::Traits</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_traits.html</filename>
    <templarg>S</templarg>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>supported</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_traits.html</anchorfile>
      <anchor>a76dde5043e78ffb5c870d4979d17e758</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::trajectories::Trajectory</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Trajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>aec58a75947d06ba435adda6fd990678e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; Trajectory&lt; T &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a5921e7a9f7532c682fd111d829f0258e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MatrixX&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a50929a6273d23c3db2a0ba8d431fa9d9</anchor>
      <arglist>(const T &amp;t) const =0</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; T &gt;</type>
      <name>vector_values</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>ad3a9474931d162dd67c7b3261479e39c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a9507f1cc6b538dc632d20e3d681bbaba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; T &gt;</type>
      <name>EvalDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>abf2912689d33fd58c54d119cab8f4140</anchor>
      <arglist>(const T &amp;t, int derivative_order=1) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; T &gt; &gt;</type>
      <name>MakeDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>ad0a2e28df96d5c3f7a7d94c47208d65a</anchor>
      <arglist>(int derivative_order=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::Index</type>
      <name>rows</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a857db071d9bf847d026ba7046aa9744e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::Index</type>
      <name>cols</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0e99f338d336c4da23d6d773f4463a52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0a8606a2bfd8a6ecade8bf4f95fb40c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a1b212bc051048c39dc23d9437d7cd188</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Trajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0d2a23aec55910c9e1102de7ab8c3249</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>do_has_derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>acbc462b09a2c72f6e2e03b2b29d7957a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MatrixX&lt; T &gt;</type>
      <name>DoEvalDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>acef358295975b0110b81bfbec3acb87f</anchor>
      <arglist>(const T &amp;t, int derivative_order) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Trajectory&lt; T &gt; &gt;</type>
      <name>DoMakeDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a2cfd16b1b58da4de8205fe29d65c3012</anchor>
      <arglist>(int derivative_order) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Trajectory&lt; double &gt;</name>
    <filename>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Trajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>aec58a75947d06ba435adda6fd990678e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; Trajectory&lt; double &gt; &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a5921e7a9f7532c682fd111d829f0258e</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MatrixX&lt; double &gt;</type>
      <name>value</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a50929a6273d23c3db2a0ba8d431fa9d9</anchor>
      <arglist>(const double &amp;t) const=0</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; double &gt;</type>
      <name>vector_values</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>ad3a9474931d162dd67c7b3261479e39c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a9507f1cc6b538dc632d20e3d681bbaba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixX&lt; double &gt;</type>
      <name>EvalDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>abf2912689d33fd58c54d119cab8f4140</anchor>
      <arglist>(const double &amp;t, int derivative_order=1) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Trajectory&lt; double &gt; &gt;</type>
      <name>MakeDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>ad0a2e28df96d5c3f7a7d94c47208d65a</anchor>
      <arglist>(int derivative_order=1) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::Index</type>
      <name>rows</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a857db071d9bf847d026ba7046aa9744e</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::Index</type>
      <name>cols</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0e99f338d336c4da23d6d773f4463a52</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>start_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0a8606a2bfd8a6ecade8bf4f95fb40c5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>end_time</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a1b212bc051048c39dc23d9437d7cd188</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Trajectory</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a0d2a23aec55910c9e1102de7ab8c3249</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>do_has_derivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>acbc462b09a2c72f6e2e03b2b29d7957a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MatrixX&lt; double &gt;</type>
      <name>DoEvalDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>acef358295975b0110b81bfbec3acb87f</anchor>
      <arglist>(const double &amp;t, int derivative_order) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Trajectory&lt; double &gt; &gt;</type>
      <name>DoMakeDerivative</name>
      <anchorfile>classmaliput_1_1drake_1_1trajectories_1_1_trajectory.html</anchorfile>
      <anchor>a2cfd16b1b58da4de8205fe29d65c3012</anchor>
      <arglist>(int derivative_order) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::type_erased_ptr</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1type__erased__ptr.html</filename>
    <member kind="variable">
      <type>const void *</type>
      <name>raw</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1type__erased__ptr.html</anchorfile>
      <anchor>a2ca7df1dcbbe6ebf3189b004e4390617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::type_info &amp;</type>
      <name>info</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1type__erased__ptr.html</anchorfile>
      <anchor>a83584e5da185d8c19b02ef8e4967dbb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHash</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hash.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hash.html</anchorfile>
      <anchor>ac53a5c9169ca1fff022abefe0903aab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hash.html</anchorfile>
      <anchor>a683d03ea043a2042f19548c240390a16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasher</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasher&lt; T, true &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasher&lt; T&lt; Args... &gt;, false &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_3_01_args_8_8_8_01_4_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>Args</templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_3_01_args_8_8_8_01_4_00_01false_01_4.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasher&lt; T&lt; U, N, Ns... &gt;, false &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_3_01_u_00_01_n_00_01_ns_8_8_8_01_4_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>Ns</templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher_3_01_t_3_01_u_00_01_n_00_01_ns_8_8_8_01_4_00_01false_01_4.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher_has_non_type_template_parameter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher_has_non_type_template_parameter.html</anchorfile>
      <anchor>a5b4ee4ae6cba6bb75200ba7af1910873</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter&lt; T, typehasher_void_t&lt; typename T::NonTypeTemplateParameter &gt; &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_type_hasher_has_non_type_template_parameter_3_01_t_00_01t01a5658a721b810034073c0f544596bc.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_type_hasher_has_non_type_template_parameter_3_01_t_00_01t01a5658a721b810034073c0f544596bc.html</anchorfile>
      <anchor>a5b4ee4ae6cba6bb75200ba7af1910873</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::TypeSafeIndex</name>
    <filename>classmaliput_1_1drake_1_1_type_safe_index.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; Tag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; Tag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a5c2780a3319569b44d05b9e104926e11</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSafeIndex &amp;i) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; Tag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; Tag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; Tag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const =delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSafeIndex&lt; class CacheTag &gt;</name>
    <filename>classmaliput_1_1drake_1_1_type_safe_index.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class CacheTag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class CacheTag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a5c2780a3319569b44d05b9e104926e11</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSafeIndex &amp;i) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class CacheTag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class CacheTag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; class CacheTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSafeIndex&lt; class DependencyTag &gt;</name>
    <filename>classmaliput_1_1drake_1_1_type_safe_index.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class DependencyTag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class DependencyTag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a5c2780a3319569b44d05b9e104926e11</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSafeIndex &amp;i) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1c8cc4c8e4fcff85d9f45953f7e85ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a86f7f7d48c6ea02f663e349218b3c040</anchor>
      <arglist>(int64_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab7e5c7bb9fa9592c66eb66b3532c6743</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;idx)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a77070525c55f8391d7a487cf40611ad1</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSafeIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ab8fe25221514a74ab8eacfd4901b095d</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ad1c78c1f5f180392bde05738517d9074</anchor>
      <arglist>(const TypeSafeIndex &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a080f70e7d49b8d17701b67b14b12bcaf</anchor>
      <arglist>(TypeSafeIndex &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a44ebd02034fe5a45142bdc93de66e86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator++</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>af1b175d2b18bf55d96a7e3158cb09e08</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const TypeSafeIndex &amp;</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa10ab5f21e19ae6f6818c5a0c50da483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex</type>
      <name>operator--</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a696eb5ef6a78719e7694987a20ea5c07</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a03f9eff6c478820f68d53cb74cc4c1f1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class DependencyTag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a8a590cea85b8058c907e00b0171e89cc</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4f721d2c4b6c2868f6874090803d32d9</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4db10db238456ee418a3175848f1ff7f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; class DependencyTag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9f2194476e6a5e3e54f7b5591769da89</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TypeSafeIndex&lt; U &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a993771ad2110ff13f413304d4f1827da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a4eaadb58ee892d3700d3666f336c157e</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a69daa5ab4d2c3ad982d2b9f726bfa047</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a81b9e8a975a58ee6aeec611e7aec8078</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9b06a7c55812c1c18a4aecf76d318525</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac07ea317d8e9d3651e4df7aea60a9edd</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa77ea52bfb8c2c46a8d4e4e8c303fb63</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a2f100af0f05d43221c6825bde6f7da1f</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a70b5a9b0d1f9892a6fe1da20f5bea200</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa7a51eedb20a929b7ef5b76f7fb37e33</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a6c6625bb1b0a6191fe40c39910c3f2ff</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a935a6d0f094bb372551d285caba51033</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a9a2f21bbdbe979bea71eb9b65ad617da</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a7f1c61a6f9bd5307c6bac7f0ff1b6d99</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a96f44fc9ccb215fce916bc8ae7641669</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>ac03aaa9b62f800418cef6fbe1a688839</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a74f0a0724242bb9df75f9b9026421ee8</anchor>
      <arglist>(const TypeSafeIndex&lt; class DependencyTag &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>a65e04dfbaa13dbd713967c8b0c05e744</anchor>
      <arglist>(const U &amp;value) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classmaliput_1_1drake_1_1_type_safe_index.html</anchorfile>
      <anchor>aa730876d99ffdad4139b54689421c93c</anchor>
      <arglist>(const TypeSafeIndex&lt; U &gt; &amp;u) const=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::TypeSpecificIdentifier</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; BulbGroup &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>BulbGroup</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; BulbGroup &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; BulbGroup &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class BranchPoint &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class BranchPoint</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class BranchPoint &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class BranchPoint &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Bulb &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Bulb</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Bulb &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Bulb &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Junction &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Junction</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Junction &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Junction &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Lane &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Lane</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Lane &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Lane &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class MaliputPlugin &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class MaliputPlugin</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class MaliputPlugin &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class MaliputPlugin &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class PhaseRing &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class PhaseRing</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class PhaseRing &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class PhaseRing &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class RoadGeometry &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class RoadGeometry</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class RoadGeometry &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class RoadGeometry &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Rule &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Rule</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Rule &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Rule &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Segment &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Segment</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Segment &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Segment &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; class Type &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>class Type</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Type &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; class Type &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; Phase &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>Phase</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; Phase &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; Phase &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TypeSpecificIdentifier&lt; TrafficLight &gt;</name>
    <filename>classmaliput_1_1api_1_1_type_specific_identifier.html</filename>
    <member kind="typedef">
      <type>TrafficLight</type>
      <name>identified_type</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af20630e7db1b537e2b605e0f5a266e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ae1c90c9eff1dfe4d052c9a012f813fca</anchor>
      <arglist>(TypeSpecificIdentifier)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeSpecificIdentifier</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>af57672784e7f203359a24bb2694327b2</anchor>
      <arglist>(std::string string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>ab135a123a2ff98cdd1d23b6df15eb9ab</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; TrafficLight &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a40a8386e472aff3f49ddaa53197b6746</anchor>
      <arglist>(const TypeSpecificIdentifier&lt; TrafficLight &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_type_specific_identifier.html</anchorfile>
      <anchor>a4b1b321bba77194abdc265fc952ea158</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const TypeSpecificIdentifier &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::common::uhash</name>
    <filename>structmaliput_1_1common_1_1uhash.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename HashAlgorithm::result_type</type>
      <name>result_type</name>
      <anchorfile>structmaliput_1_1common_1_1uhash.html</anchorfile>
      <anchor>aec09227295d6a2c005ec578d42120039</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1common_1_1uhash.html</anchorfile>
      <anchor>ac98906b29c4381d0121f715fac155440</anchor>
      <arglist>(const T &amp;item) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::uhash</name>
    <filename>structmaliput_1_1drake_1_1uhash.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename HashAlgorithm::result_type</type>
      <name>result_type</name>
      <anchorfile>structmaliput_1_1drake_1_1uhash.html</anchorfile>
      <anchor>aec09227295d6a2c005ec578d42120039</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>result_type</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1drake_1_1uhash.html</anchorfile>
      <anchor>ac98906b29c4381d0121f715fac155440</anchor>
      <arglist>(const T &amp;item) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::UniqueBulbGroupId</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</filename>
    <base>maliput::api::UniqueId</base>
    <member kind="function">
      <type></type>
      <name>UniqueBulbGroupId</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a6b56866308db0ffd3a10ad1c217bbdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniqueBulbGroupId</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a7c41a79157851fcbc769a422c8090b54</anchor>
      <arglist>(const TrafficLight::Id &amp;traffic_light_id, const BulbGroup::Id &amp;bulb_group_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a19726ac5ec776c8990fdd97e7f03ff6e</anchor>
      <arglist>(const UniqueBulbGroupId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>abf8fe07cffa09c0e4945695f8beaaf31</anchor>
      <arglist>(const UniqueBulbGroupId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TrafficLight::Id</type>
      <name>traffic_light_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a31cec2486d5dd8457e22f2e8da4fb31f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BulbGroup::Id</type>
      <name>bulb_group_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>afc2b8afc47ca96ed8cdf34bd62c8b442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>delimiter</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a3c0d7966f17c0369088f62c528c7141b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_group_id.html</anchorfile>
      <anchor>a8840c3d5f7bae5874350fbb1f73bca4d</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const UniqueBulbGroupId &amp;id) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::rules::UniqueBulbId</name>
    <filename>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</filename>
    <base>maliput::api::UniqueId</base>
    <member kind="function">
      <type></type>
      <name>UniqueBulbId</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a16c3e3a3deeacd47cce19bd1e934b87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniqueBulbId</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a8d612bded2b5e462ded1869b389db67a</anchor>
      <arglist>(const TrafficLight::Id &amp;traffic_light_id, const BulbGroup::Id &amp;bulb_group_id, const Bulb::Id &amp;bulb_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>acf7dd6e3040991e3467f10f9aa71b070</anchor>
      <arglist>(const UniqueBulbId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a6a66a429b9765ce2ae162946fbe456e5</anchor>
      <arglist>(const UniqueBulbId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const TrafficLight::Id</type>
      <name>traffic_light_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>ae42cb78e4495e959c1edbb06c03b0d54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BulbGroup::Id</type>
      <name>bulb_group_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a2a30e8d7f41e05d33899b83d9f4cde76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Bulb::Id</type>
      <name>bulb_id</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a924a13fd939430365be17e891ace4d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>delimiter</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>a3c0d7966f17c0369088f62c528c7141b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1rules_1_1_unique_bulb_id.html</anchorfile>
      <anchor>ab2b5ffc8707c5d5b41cf082b81376338</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const UniqueBulbId &amp;id) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::api::UniqueId</name>
    <filename>classmaliput_1_1api_1_1_unique_id.html</filename>
    <member kind="function">
      <type></type>
      <name>MALIPUT_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>af436638a8649ecef0cf0a9c43e26ff6d</anchor>
      <arglist>(UniqueId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniqueId</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>a84f4736b8c2dd9fb9613e66e863cb7eb</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>string</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>a7314f49a51859d46439cfeddb9ea06ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>ae7c22f3d9785b02ceb051635d48a6070</anchor>
      <arglist>(const UniqueId &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>a81d80ef37b0cb0d8a599adadea3ef653</anchor>
      <arglist>(const UniqueId &amp;rhs) const</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>hash_append</name>
      <anchorfile>classmaliput_1_1api_1_1_unique_id.html</anchorfile>
      <anchor>aab1889b8b747db5796e87311e03554dd</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const UniqueId &amp;item) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::utility::mesh::UniqueIndexer</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>UniqueIndexer</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>aaa1d13c26d74e9d68e8b65b9f1323629</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push_back</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a762fc54fe99fd4accfa1447850fc8ba9</anchor>
      <arglist>(const T &amp;thing)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const T * &gt; &amp;</type>
      <name>vector</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a32c8226c7e0f9886ef3e9eba55329c96</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UniqueIndexer&lt; maliput::utility::mesh::GeoNormal, maliput::common::uhash, maliput::utility::mesh::GeoNormal::Equiv &gt;</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</filename>
    <member kind="function">
      <type></type>
      <name>UniqueIndexer</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>aaa1d13c26d74e9d68e8b65b9f1323629</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push_back</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a762fc54fe99fd4accfa1447850fc8ba9</anchor>
      <arglist>(const maliput::utility::mesh::GeoNormal &amp;thing)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const maliput::utility::mesh::GeoNormal * &gt; &amp;</type>
      <name>vector</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a32c8226c7e0f9886ef3e9eba55329c96</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UniqueIndexer&lt; maliput::utility::mesh::GeoVertex, maliput::common::uhash, maliput::utility::mesh::GeoVertex::Equiv &gt;</name>
    <filename>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</filename>
    <member kind="function">
      <type></type>
      <name>UniqueIndexer</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>aaa1d13c26d74e9d68e8b65b9f1323629</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>push_back</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a762fc54fe99fd4accfa1447850fc8ba9</anchor>
      <arglist>(const maliput::utility::mesh::GeoVertex &amp;thing)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const maliput::utility::mesh::GeoVertex * &gt; &amp;</type>
      <name>vector</name>
      <anchorfile>classmaliput_1_1utility_1_1mesh_1_1_unique_indexer.html</anchorfile>
      <anchor>a32c8226c7e0f9886ef3e9eba55329c96</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::UnrestrictedUpdateEvent</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::Event</base>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const UnrestrictedUpdateEvent&lt; T &gt; &amp;, State&lt; T &gt; *)&gt;</type>
      <name>UnrestrictedUpdateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a1ad5bc9187928229cce35a57b939b8ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const UnrestrictedUpdateEvent&lt; T &gt; &amp;, State&lt; T &gt; *)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>ad05c437c96fd2f441af9a2b348bda4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a8fe8b121926de700c56c6a20a6ebabed</anchor>
      <arglist>(UnrestrictedUpdateEvent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_discrete_update</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a6411929eebb98e856021335d43bcb7f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a923254fc42e21319fabe9bff44453ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a67e1ce5f0ac183dab57d2335136e44e3</anchor>
      <arglist>(const UnrestrictedUpdateCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a366cb097df6d7b213d58d46bb37e6deb</anchor>
      <arglist>(const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a135af8351eaadcc23fa4560e13cf63a0</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const UnrestrictedUpdateCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a06575bfe54a6b23e4398638cdb8d3470</anchor>
      <arglist>(const TriggerType &amp;trigger_type, const SystemCallback &amp;system_callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnrestrictedUpdateEvent</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>ab552241b5f4c96f6ab4f58744ba18d3f</anchor>
      <arglist>(const TriggerType &amp;trigger_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a48472a620e79d2e1e6c5c03b1accf9ec</anchor>
      <arglist>(const System&lt; T &gt; &amp;system, const Context&lt; T &gt; &amp;context, State&lt; T &gt; *state) const</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, const UnrestrictedUpdateEvent&lt; T &gt; &amp;, State&lt; T &gt; *)&gt;</type>
      <name>UnrestrictedUpdateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>a1ad5bc9187928229cce35a57b939b8ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, const UnrestrictedUpdateEvent&lt; T &gt; &amp;, State&lt; T &gt; *)&gt;</type>
      <name>SystemCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_unrestricted_update_event.html</anchorfile>
      <anchor>ad05c437c96fd2f441af9a2b348bda4e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::UseDefaultName</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1_use_default_name.html</filename>
  </compound>
  <compound kind="class">
    <name>maliput::drake::Value</name>
    <filename>classmaliput_1_1drake_1_1_value.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a1a0112a091533d91bb7f1620a33f6f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>ac46df528297cdbfbb2b9ef7e3971f595</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a3c17aca264f8110cc4c5d664b7e6530e</anchor>
      <arglist>(Arg1 &amp;&amp;arg1, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a7d0cbe6ab64b21b2cd78c88e05bbfe69</anchor>
      <arglist>(Arg1 &amp;&amp;arg1, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>ac5d2f9cf8eb37db651ca00d8abb9cd33</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>aa3faad85c8dfe39333a78904c77e4ade</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a9a11b6dcc2492ab592a0b97e4823f121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get_mutable_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a05138ea74499608a2f4ab57637a00277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a6f7532d04340f2d1f390eb792e0a6130</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Clone</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a4a0876bf87f1f247767ef2b913a49974</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a383ff587628c2a175f05abec1e00902b</anchor>
      <arglist>(const AbstractValue &amp;other) override</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>type_info</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>aab9739f60b859a7faf65fd7fc5b9816b</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>static_type_info</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a55326515586dc1114795bfac30a5c859</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetNiceTypeName</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a7fda3b2dfb60c909cd978753dd57c279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>virtual const std::type_info &amp;</type>
      <name>static_type_info</name>
      <anchorfile>classmaliput_1_1drake_1_1_value.html</anchorfile>
      <anchor>a022b45e2a88a0b71f37dce8df3f9aade</anchor>
      <arglist>() const=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::scalar_conversion::ValueConverter</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_value_converter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_value_converter.html</anchorfile>
      <anchor>a8a63ad999f7b515a27e608907704a113</anchor>
      <arglist>(const U &amp;u) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::systems::scalar_conversion::ValueConverter&lt; T, T &gt;</name>
    <filename>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_value_converter_3_01_t_00_01_t_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>U</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_value_converter_3_01_t_00_01_t_01_4.html</anchorfile>
      <anchor>a922b853b1fa03c63528dda71698c419a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structmaliput_1_1drake_1_1systems_1_1scalar__conversion_1_1_value_converter_3_01_t_00_01_t_01_4.html</anchorfile>
      <anchor>a8a63ad999f7b515a27e608907704a113</anchor>
      <arglist>(const U &amp;u) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ValueHasher</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_value_hasher.html</filename>
    <templarg></templarg>
    <templarg>K</templarg>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>calc</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_hasher.html</anchorfile>
      <anchor>abbd0485d7694dadad9dccec1702a35a1</anchor>
      <arglist>(FNV1aHasher *result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::ValueProducer</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</filename>
    <member kind="typedef">
      <type>std::function&lt; std::unique_ptr&lt; AbstractValue &gt;()&gt;</type>
      <name>AllocateCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a4df060317da95358cd76822bd802de72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const ContextBase &amp;, AbstractValue *)&gt;</type>
      <name>CalcCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a3947b9d8e95098739aaaea55af1d1ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a37a48e32198e33c6e6e2a5eb82e7e501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a65c1eb6ca885a75e413b03b7e1e56d7f</anchor>
      <arglist>(const SomeInstance *instance, void(SomeClass::*calc)(const SomeContext &amp;, SomeOutput *) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>af3a3c398eafd51a9db9822c7f261e232</anchor>
      <arglist>(const SomeInstance *instance, const SomeOutput &amp;model_value, void(SomeClass::*calc)(const SomeContext &amp;, SomeOutput *) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a8a06d103b5c91e1b390c1f6090e3e34e</anchor>
      <arglist>(const SomeInstance *instance, std::unique_ptr&lt; SomeOutput &gt;(SomeClass::*allocate)() const, void(SomeClass::*calc)(const SomeContext &amp;, SomeOutput *) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a0ba6c329027557ff2e69631a36862d4a</anchor>
      <arglist>(const SomeInstance *instance, AllocateCallback allocate, void(SomeClass::*calc)(const SomeContext &amp;, SomeOutput *) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a135a073f26ba8996ba7b9a2189728508</anchor>
      <arglist>(const SomeInstance *instance, SomeOutput(SomeClass::*calc)(const SomeContext &amp;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a50e361ef4c709cd7903d9a5e9464bfc1</anchor>
      <arglist>(const SomeInstance *instance, const SomeOutput &amp;model_value, SomeOutput(SomeClass::*calc)(const SomeContext &amp;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a44e64b07c1ad09e85a4a5fab86d7147a</anchor>
      <arglist>(const SomeInstance *instance, std::unique_ptr&lt; SomeOutput &gt;(SomeClass::*allocate)() const, SomeOutput(SomeClass::*calc)(const SomeContext &amp;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a4166ab7527fa4c7eab6bc89454e8b400</anchor>
      <arglist>(const SomeInstance *instance, AllocateCallback allocate, SomeOutput(SomeClass::*calc)(const SomeContext &amp;) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>aa519e63ccfbde7fbd77e22d01459f613</anchor>
      <arglist>(std::function&lt; void(const SomeContext &amp;, SomeOutput *)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>ae2c8899b6e32b9e066d86d7b5fbfa539</anchor>
      <arglist>(const SomeOutput &amp;model_value, std::function&lt; void(const SomeContext &amp;, SomeOutput *)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>ac39685ab5b27e68f5236bd779c388546</anchor>
      <arglist>(const SomeInstance *instance, std::unique_ptr&lt; SomeOutput &gt;(SomeClass::*allocate)() const, std::function&lt; void(const SomeContext &amp;, SomeOutput *)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a65b455919faa9e40dee7085e285fa6a3</anchor>
      <arglist>(AllocateCallback allocate, std::function&lt; void(const SomeContext &amp;, SomeOutput *)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>abcd71ed3b0b0d71223b07f82b8586e71</anchor>
      <arglist>(std::function&lt; SomeOutput(const SomeContext &amp;)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>afbd69f8e0e4471d50579a3e2fe55551b</anchor>
      <arglist>(const SomeOutput &amp;model_value, std::function&lt; SomeOutput(const SomeContext &amp;)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a7b615f1e89450ff74cd425ddc864c46f</anchor>
      <arglist>(const SomeInstance *instance, std::unique_ptr&lt; SomeOutput &gt;(SomeClass::*allocate)() const, std::function&lt; SomeOutput(const SomeContext &amp;)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a8b211916a59d93d6c9667a40561e7157</anchor>
      <arglist>(AllocateCallback allocate, std::function&lt; SomeOutput(const SomeContext &amp;)&gt; calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a97c61a7e38441244d660d2f2cdc0e1cd</anchor>
      <arglist>(const SomeOutput &amp;model_value, CalcCallback calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a51474bff3a734ddb28e1dcdca9200fb3</anchor>
      <arglist>(const SomeInstance *instance, std::unique_ptr&lt; SomeOutput &gt;(SomeClass::*allocate)() const, CalcCallback calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a74eb4d5adf5946eb974a38c8183f5cda</anchor>
      <arglist>(AllocateCallback allocate, CalcCallback calc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueProducer</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a58721f46775c64faf8620a927020ebc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a8ca0e76fa665125f1e50bd1ed8dbd213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>Allocate</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a5a36b55b69e1bffeae1e9805e8688e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Calc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a9a4f2d22f653bb5cd0ba5af224cfaf58</anchor>
      <arglist>(const ContextBase &amp;context, AbstractValue *output) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>NoopCalc</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_value_producer.html</anchorfile>
      <anchor>a79811b972986dc175d5063c4efbc2ba9</anchor>
      <arglist>(const ContextBase &amp;, AbstractValue *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::ValueToAbstractValue</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</filename>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</anchorfile>
      <anchor>a60b97f4b0ec3f4e1ba9ee130ec91b675</anchor>
      <arglist>(const char *api_name, const AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</anchorfile>
      <anchor>a2318e7c7d5db3d47848bb3867e299890</anchor>
      <arglist>(const char *api_name, const char *c_string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</anchorfile>
      <anchor>a5e9837c083ca85385f7f5e74012f2d9f</anchor>
      <arglist>(const char *api_name, const ValueType &amp;eigen_value,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>has_accessible_clone</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</anchorfile>
      <anchor>a986ab2a12cea50ea2899094309c8749d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_abstract_value.html</anchorfile>
      <anchor>a92d570685e0828571b7d123fd2793bcb</anchor>
      <arglist>(const char *api_name, const ValueType &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::internal::ValueToVectorValue</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</anchorfile>
      <anchor>a294734dd939e0097a0f8509f43844be1</anchor>
      <arglist>(const char *api_name, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</anchorfile>
      <anchor>a33c0884ddca50cc3848ed186faa1ddbe</anchor>
      <arglist>(const char *api_name, const T &amp;scalar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</anchorfile>
      <anchor>a357fd1d1c8f7e4ad01a3ec3c80ce1a73</anchor>
      <arglist>(const char *api_name, const BasicVector&lt; T &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</anchorfile>
      <anchor>a60b97f4b0ec3f4e1ba9ee130ec91b675</anchor>
      <arglist>(const char *api_name, const AbstractValue &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; AbstractValue &gt;</type>
      <name>ToAbstract</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1internal_1_1_value_to_vector_value.html</anchorfile>
      <anchor>a8922d89976a705b47af292e1a95bfe02</anchor>
      <arglist>(const char *api_name, const ValueType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ValueTraitsImpl</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl.html</filename>
    <templarg></templarg>
    <templarg>use_copy</templarg>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ValueTraitsImpl&lt; T, false &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename maliput::drake::copyable_unique_ptr&lt; T &gt;</type>
      <name>Storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a5cd7b7f814d40fd7a3dce170acfdee77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reinitialize_if_necessary</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>aa44461b807a3dc1bd8ca3ee0b5d091a9</anchor>
      <arglist>(Storage *value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Storage</type>
      <name>to_storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a55ae247dc2e501b18a723fa2e4da9330</anchor>
      <arglist>(const T &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Storage</type>
      <name>to_storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>a5650a647668c048f2b7b9fb543ba1da6</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>access</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>adcc7e4648489180d92d5dac20071fb53</anchor>
      <arglist>(const Storage &amp;storage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T &amp;</type>
      <name>access</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01false_01_4.html</anchorfile>
      <anchor>ac99d9168e2007df7ca4cadac6f012b74</anchor>
      <arglist>(Storage &amp;storage)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::internal::ValueTraitsImpl&lt; T, true &gt;</name>
    <filename>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>a3cacef7a26c89843e25e67457106c2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reinitialize_if_necessary</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>a26fb0e7f1686be8a2219dc058233876f</anchor>
      <arglist>(Storage *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>to_storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>a36df0bdf42dd660aebf339fe47656776</anchor>
      <arglist>(const T &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Storage &amp;</type>
      <name>to_storage</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>aabb9583e18ff740b617514db6723d741</anchor>
      <arglist>(const std::unique_ptr&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>access</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>adcc7e4648489180d92d5dac20071fb53</anchor>
      <arglist>(const Storage &amp;storage)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T &amp;</type>
      <name>access</name>
      <anchorfile>structmaliput_1_1drake_1_1internal_1_1_value_traits_impl_3_01_t_00_01true_01_4.html</anchorfile>
      <anchor>ac99d9168e2007df7ca4cadac6f012b74</anchor>
      <arglist>(Storage &amp;storage)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Vector</name>
    <filename>classmaliput_1_1math_1_1_vector.html</filename>
    <templarg>N</templarg>
    <base>VectorBase&lt; N, Vector&lt; N &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmaliput_1_1math_1_1_vector.html</anchorfile>
      <anchor>a4df026156780bc0ca651c342b7d6daa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmaliput_1_1math_1_1_vector.html</anchorfile>
      <anchor>a0451c017fd69ecedd061d3b1f6c104c0</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classmaliput_1_1math_1_1_vector.html</anchorfile>
      <anchor>a5fda97ea6556aba3abf517a52a77e8c1</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N - 1 &gt;</type>
      <name>reduce</name>
      <anchorfile>classmaliput_1_1math_1_1_vector.html</anchorfile>
      <anchor>aef9d0e4609ee9e32f5849678ad46fb18</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Vector2</name>
    <filename>classmaliput_1_1math_1_1_vector2.html</filename>
    <base>VectorBase&lt; 2, Vector2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a3a5df4502ce081e8b80838fe2c15628d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a88d4a34975bc72458fd0c56a633bb381</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a3adddf3f3f7d658b59c5954361ed52de</anchor>
      <arglist>(std::array&lt; double, 2 &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a54f14911c467791709425b5816b5ef33</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>af7a5959337d6cbb192ceeb8f18df4f2e</anchor>
      <arglist>(const Vector&lt; 2 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a833e1cf314b7b7a5537b2b6a56fee6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>aca424ddaf2902c1cde483f37813d4278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2</type>
      <name>UnitX</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>aa277bba68d286eeab533c7c89cd48000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2</type>
      <name>UnitY</name>
      <anchorfile>classmaliput_1_1math_1_1_vector2.html</anchorfile>
      <anchor>ab55d93263d7c68e9a4188362c1f59bd1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Vector3</name>
    <filename>classmaliput_1_1math_1_1_vector3.html</filename>
    <base>VectorBase&lt; 3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector3</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>ac40804b7686a1152bcba217dfe5dde6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a682c334789c485ce8d6b3647ed9940ba</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>afec7e9f2de12ea746bc37aacb013431a</anchor>
      <arglist>(std::array&lt; double, 3 &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a91df46b5fecfd0bb7a88404351f0b2ba</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a4791eb4e30cc1efa7daa73cb5f31cedd</anchor>
      <arglist>(const Vector&lt; 3 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a833e1cf314b7b7a5537b2b6a56fee6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>aca424ddaf2902c1cde483f37813d4278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>ae7bc7213001e326be4d4eb2d8a035c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a2134ad02d68f29e9c7cd87e4cd4c75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>cross</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>acb8a5703662ce8da7a5c2f4d8bc0f270</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>UnitX</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>abacbcf9f8111a12d514c23fbb2396dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>UnitY</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a21b9d8912c423fd1b8f7434011fc1e08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>UnitZ</name>
      <anchorfile>classmaliput_1_1math_1_1_vector3.html</anchorfile>
      <anchor>a4321a755d40996973dcad3ddaae1a078</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::Vector4</name>
    <filename>classmaliput_1_1math_1_1_vector4.html</filename>
    <base>VectorBase&lt; 4, Vector4 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vector4</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a7620f20e8868d975c2e6af52042d6433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a2069b7a45eb61e903a767a8f30477c74</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a60b698b3dd06eb1d900a71482d8b3e0e</anchor>
      <arglist>(std::array&lt; double, 4 &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>af8d2a5ac9526843099834f587c84f86b</anchor>
      <arglist>(double x, double y, double z, double w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a5e76a59ed44a8baaf9d2e598ab215ba0</anchor>
      <arglist>(const Vector&lt; 4 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a833e1cf314b7b7a5537b2b6a56fee6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>aca424ddaf2902c1cde483f37813d4278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>ae7bc7213001e326be4d4eb2d8a035c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>w</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a745f411855e1082580b1d485172ad6ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>x</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a3b195b867437acf8de45f48c83e81932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>y</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>ad927d9808ded1fc49c05ae9e1a3ed2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>z</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a2134ad02d68f29e9c7cd87e4cd4c75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>w</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a5ca5515fecd7fe676bbc2c4f2dd586a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>UnitX</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a7385d8627fb9ce82f89444583b0fa73b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>UnitY</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a65febda56255dd5025d31035ed88d79e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>UnitZ</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a8ef7e8dd0bf9f6514ce6f393fcef4dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>UnitW</name>
      <anchorfile>classmaliput_1_1math_1_1_vector4.html</anchorfile>
      <anchor>a76b4c29a87116c5b3bbdc654fc8a3b4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::VectorBase</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>abc19c2584a73f03bd1e31277d11315b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a36b716289158c33f86a8cf30219be68c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a2d4b36a43041d6505f82836a6aeccd52</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>ab3f0073680dabba9d2778d9a6f35aed7</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>GetAtIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>ae79ea848ba1a3e2a87da1777b3f399cc</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>GetAtIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>aef7a4ff282156d6974f47912756265b4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAtIndex</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a5c5902bbfda44607fda562f0c3956520</anchor>
      <arglist>(int index, const T &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetFrom</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a3a8364f71b762045df41bfcb58927fe5</anchor>
      <arglist>(const VectorBase&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetFromVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>aea9d9b7396dccc9374d87a9be04a2597</anchor>
      <arglist>(const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>SetZero</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a04797332f4fa1889d462e5c7aacf1400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorX&lt; T &gt;</type>
      <name>CopyToVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a23751ea78ff51179a9b3ed90317c922d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>CopyToPreSizedVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a9f65de06c90fe4b0a0cd427032313218</anchor>
      <arglist>(EigenPtr&lt; VectorX&lt; T &gt;&gt; vec) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ScaleAndAddToVector</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>abe595692eca6a4b16cd0344195d54599</anchor>
      <arglist>(const T &amp;scale, EigenPtr&lt; VectorX&lt; T &gt;&gt; vec) const</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>PlusEqScaled</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>aecb348d2ee8136278c64e180f4af21b7</anchor>
      <arglist>(const T &amp;scale, const VectorBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>PlusEqScaled</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a32def866adfc4d6ce3dfe3255881651c</anchor>
      <arglist>(const std::initializer_list&lt; std::pair&lt; T, const VectorBase&lt; T &gt; &amp; &gt;&gt; &amp;rhs_scale)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>accc86d5305584bc7cb96971f60220125</anchor>
      <arglist>(const VectorBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>acb91f3ae2b66473a274073f56c5fbec0</anchor>
      <arglist>(const VectorBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>GetElementBounds</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>afcd23700f1c0e51cb736750eb3fafa51</anchor>
      <arglist>(Eigen::VectorXd *lower, Eigen::VectorXd *upper) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>DoGetAtIndexUnchecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>afd5f03561f8acae4788b65a50f1f3976</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual T &amp;</type>
      <name>DoGetAtIndexUnchecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a97deb44c7757ee934f32bef2afed9a2b</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const T &amp;</type>
      <name>DoGetAtIndexChecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>ab8b65615b7a17723177ea016cd5521a0</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual T &amp;</type>
      <name>DoGetAtIndexChecked</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a487b2857071e5fefee941a9b9f39a5bb</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>DoPlusEqScaled</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>a2fe79641d14373b863f2bb2a6bf40d14</anchor>
      <arglist>(const std::initializer_list&lt; std::pair&lt; T, const VectorBase&lt; T &gt; &amp; &gt;&gt; &amp;rhs_scale)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowOutOfRange</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>abdd4d55ace1242d8a8deac5d5edcb8bd</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ThrowMismatchedSize</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_vector_base.html</anchorfile>
      <anchor>acfa12ab9f75a241f10fe4554da824957</anchor>
      <arglist>(int other_size) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::math::VectorBase</name>
    <filename>classmaliput_1_1math_1_1_vector_base.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a55fba31593b1d010ea070efaaf247e37</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a24ab8533b9334b61c193a06e7d4da6a5</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>afdf1dfa67c2c25f7f753bda4ffca79f1</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a47be0f27e4093c456c9704a67b350fee</anchor>
      <arglist>(VectorBase&lt; N, Derived &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aace65438ca391d3f70e60557ebdceb07</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aee8f19c5aea949c2909164e1359d5d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ade1601ccf1fa3bcf050867f0852ca4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; double, N &gt;</type>
      <name>to_array</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2fab940cd9ca8ddfc007b89cc8b89f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab1a8588a6efb4f64c89636b3f6833613</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a905fbcc816baf4c94415fb4548602a50</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a04f07a89fa10d9c50a11adf95a7f1d28</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2a52d03aa6f526bef8391c60ee337aa9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4d2119c110ae5c7bdecd27175c23126d</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4395e08cc424e4ef908b97d5b19f675e</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad19e5b6f903f6f52869e9b8f7176021b</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab38dfe16ae264df117f13bc4d0de2533</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ae2a5052de7fa1c770923eba33f700a33</anchor>
      <arglist>(const VectorBase&lt; N, Derived &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f30546a0293a269d5d1bc4b2efd8522</anchor>
      <arglist>(double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived</type>
      <name>Zero</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f53a8586874298727f440ae2e803ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived</type>
      <name>Ones</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a96e7df0569658f4bd1a5226a905c93d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived</type>
      <name>FromStr</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a306392c895dce3965dd925a36a71391c</anchor>
      <arglist>(const std::string &amp;vector_str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>kDimension</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad84b87a816f6adc156f7d09cbd2894ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; double, N &gt;</type>
      <name>values_</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a965e041a57d285d60d2abce184306e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a6477d4f1a51a0c5c3ec47a60fdb4203e</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a26eff520ddd8f75a8b3b747455e756e5</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>abb7e8f7ce1f48418814ff28063f31567</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorBase&lt; 2, Vector2 &gt;</name>
    <filename>classmaliput_1_1math_1_1_vector_base.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a55fba31593b1d010ea070efaaf247e37</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a24ab8533b9334b61c193a06e7d4da6a5</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>afdf1dfa67c2c25f7f753bda4ffca79f1</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a47be0f27e4093c456c9704a67b350fee</anchor>
      <arglist>(VectorBase&lt; N, Vector2 &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aace65438ca391d3f70e60557ebdceb07</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aee8f19c5aea949c2909164e1359d5d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ade1601ccf1fa3bcf050867f0852ca4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; double, N &gt;</type>
      <name>to_array</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2fab940cd9ca8ddfc007b89cc8b89f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab1a8588a6efb4f64c89636b3f6833613</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a905fbcc816baf4c94415fb4548602a50</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a04f07a89fa10d9c50a11adf95a7f1d28</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2a52d03aa6f526bef8391c60ee337aa9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4d2119c110ae5c7bdecd27175c23126d</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4395e08cc424e4ef908b97d5b19f675e</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad19e5b6f903f6f52869e9b8f7176021b</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab38dfe16ae264df117f13bc4d0de2533</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ae2a5052de7fa1c770923eba33f700a33</anchor>
      <arglist>(const VectorBase&lt; N, Vector2 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f30546a0293a269d5d1bc4b2efd8522</anchor>
      <arglist>(double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2</type>
      <name>Zero</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f53a8586874298727f440ae2e803ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2</type>
      <name>Ones</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a96e7df0569658f4bd1a5226a905c93d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2</type>
      <name>FromStr</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a306392c895dce3965dd925a36a71391c</anchor>
      <arglist>(const std::string &amp;vector_str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>kDimension</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad84b87a816f6adc156f7d09cbd2894ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; double, N &gt;</type>
      <name>values_</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a965e041a57d285d60d2abce184306e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a6477d4f1a51a0c5c3ec47a60fdb4203e</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a26eff520ddd8f75a8b3b747455e756e5</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>abb7e8f7ce1f48418814ff28063f31567</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorBase&lt; 3, Vector3 &gt;</name>
    <filename>classmaliput_1_1math_1_1_vector_base.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a55fba31593b1d010ea070efaaf247e37</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a24ab8533b9334b61c193a06e7d4da6a5</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>afdf1dfa67c2c25f7f753bda4ffca79f1</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a47be0f27e4093c456c9704a67b350fee</anchor>
      <arglist>(VectorBase&lt; N, Vector3 &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aace65438ca391d3f70e60557ebdceb07</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aee8f19c5aea949c2909164e1359d5d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ade1601ccf1fa3bcf050867f0852ca4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; double, N &gt;</type>
      <name>to_array</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2fab940cd9ca8ddfc007b89cc8b89f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab1a8588a6efb4f64c89636b3f6833613</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a905fbcc816baf4c94415fb4548602a50</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a04f07a89fa10d9c50a11adf95a7f1d28</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2a52d03aa6f526bef8391c60ee337aa9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4d2119c110ae5c7bdecd27175c23126d</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4395e08cc424e4ef908b97d5b19f675e</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad19e5b6f903f6f52869e9b8f7176021b</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab38dfe16ae264df117f13bc4d0de2533</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ae2a5052de7fa1c770923eba33f700a33</anchor>
      <arglist>(const VectorBase&lt; N, Vector3 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f30546a0293a269d5d1bc4b2efd8522</anchor>
      <arglist>(double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Zero</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f53a8586874298727f440ae2e803ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Ones</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a96e7df0569658f4bd1a5226a905c93d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>FromStr</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a306392c895dce3965dd925a36a71391c</anchor>
      <arglist>(const std::string &amp;vector_str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>kDimension</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad84b87a816f6adc156f7d09cbd2894ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; double, N &gt;</type>
      <name>values_</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a965e041a57d285d60d2abce184306e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a6477d4f1a51a0c5c3ec47a60fdb4203e</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a26eff520ddd8f75a8b3b747455e756e5</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>abb7e8f7ce1f48418814ff28063f31567</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorBase&lt; 4, Vector4 &gt;</name>
    <filename>classmaliput_1_1math_1_1_vector_base.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a55fba31593b1d010ea070efaaf247e37</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a24ab8533b9334b61c193a06e7d4da6a5</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>afdf1dfa67c2c25f7f753bda4ffca79f1</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a47be0f27e4093c456c9704a67b350fee</anchor>
      <arglist>(VectorBase&lt; N, Vector4 &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aace65438ca391d3f70e60557ebdceb07</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aee8f19c5aea949c2909164e1359d5d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ade1601ccf1fa3bcf050867f0852ca4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; double, N &gt;</type>
      <name>to_array</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2fab940cd9ca8ddfc007b89cc8b89f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab1a8588a6efb4f64c89636b3f6833613</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector4 &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a905fbcc816baf4c94415fb4548602a50</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a04f07a89fa10d9c50a11adf95a7f1d28</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2a52d03aa6f526bef8391c60ee337aa9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4d2119c110ae5c7bdecd27175c23126d</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4395e08cc424e4ef908b97d5b19f675e</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad19e5b6f903f6f52869e9b8f7176021b</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab38dfe16ae264df117f13bc4d0de2533</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ae2a5052de7fa1c770923eba33f700a33</anchor>
      <arglist>(const VectorBase&lt; N, Vector4 &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f30546a0293a269d5d1bc4b2efd8522</anchor>
      <arglist>(double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>Zero</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f53a8586874298727f440ae2e803ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>Ones</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a96e7df0569658f4bd1a5226a905c93d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector4</type>
      <name>FromStr</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a306392c895dce3965dd925a36a71391c</anchor>
      <arglist>(const std::string &amp;vector_str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>kDimension</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad84b87a816f6adc156f7d09cbd2894ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; double, N &gt;</type>
      <name>values_</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a965e041a57d285d60d2abce184306e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a6477d4f1a51a0c5c3ec47a60fdb4203e</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a26eff520ddd8f75a8b3b747455e756e5</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>abb7e8f7ce1f48418814ff28063f31567</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorBase&lt; N, Vector&lt; N &gt; &gt;</name>
    <filename>classmaliput_1_1math_1_1_vector_base.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a146b52fc4bf3790ed55a6c097ca3e76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a55fba31593b1d010ea070efaaf247e37</anchor>
      <arglist>(std::array&lt; double, N &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a24ab8533b9334b61c193a06e7d4da6a5</anchor>
      <arglist>(std::initializer_list&lt; double &gt; values)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>afdf1dfa67c2c25f7f753bda4ffca79f1</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a47be0f27e4093c456c9704a67b350fee</anchor>
      <arglist>(VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aace65438ca391d3f70e60557ebdceb07</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>adbeac4b406b78e64460863820679c14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>acd0de676568888d848beb97dcc53ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt;</type>
      <name>normalized</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>aee8f19c5aea949c2909164e1359d5d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ade1601ccf1fa3bcf050867f0852ca4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; double, N &gt;</type>
      <name>to_array</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2fab940cd9ca8ddfc007b89cc8b89f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab1a8588a6efb4f64c89636b3f6833613</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a905fbcc816baf4c94415fb4548602a50</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a04f07a89fa10d9c50a11adf95a7f1d28</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a2a52d03aa6f526bef8391c60ee337aa9</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4d2119c110ae5c7bdecd27175c23126d</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a4395e08cc424e4ef908b97d5b19f675e</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad19e5b6f903f6f52869e9b8f7176021b</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ab38dfe16ae264df117f13bc4d0de2533</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt;</type>
      <name>operator-</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ae2a5052de7fa1c770923eba33f700a33</anchor>
      <arglist>(const VectorBase&lt; N, Vector&lt; N &gt; &gt; &amp;vector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; N &gt;</type>
      <name>operator/</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f30546a0293a269d5d1bc4b2efd8522</anchor>
      <arglist>(double scalar) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a7157eb0f3e4314a1d621f0bed374ea97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector&lt; N &gt;</type>
      <name>Zero</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a0f53a8586874298727f440ae2e803ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector&lt; N &gt;</type>
      <name>Ones</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a96e7df0569658f4bd1a5226a905c93d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector&lt; N &gt;</type>
      <name>FromStr</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a306392c895dce3965dd925a36a71391c</anchor>
      <arglist>(const std::string &amp;vector_str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>kDimension</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>ad84b87a816f6adc156f7d09cbd2894ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; double, N &gt;</type>
      <name>values_</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a965e041a57d285d60d2abce184306e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a6477d4f1a51a0c5c3ec47a60fdb4203e</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend Derived_</type>
      <name>operator*</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>a26eff520ddd8f75a8b3b747455e756e5</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classmaliput_1_1math_1_1_vector_base.html</anchorfile>
      <anchor>abb7e8f7ce1f48418814ff28063f31567</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::utility::mesh::IndexFace::Vertex</name>
    <filename>structmaliput_1_1utility_1_1mesh_1_1_index_face_1_1_vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>Vertex</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_index_face_1_1_vertex.html</anchorfile>
      <anchor>a9b0f16e1f9b88668f9f7125b81f3f8d0</anchor>
      <arglist>(int vertex_index_in, int normal_index_in)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vertex_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_index_face_1_1_vertex.html</anchorfile>
      <anchor>a9ae457d1b6caa08add101f7a86d4686d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>normal_index</name>
      <anchorfile>structmaliput_1_1utility_1_1mesh_1_1_index_face_1_1_vertex.html</anchorfile>
      <anchor>aa325f0fc7bcf9d11383638170851f851</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::logging::Warn</name>
    <filename>structmaliput_1_1drake_1_1logging_1_1_warn.html</filename>
    <member kind="function">
      <type></type>
      <name>Warn</name>
      <anchorfile>structmaliput_1_1drake_1_1logging_1_1_warn.html</anchorfile>
      <anchor>adfebb4989e81d5d715e9ef669de87dfe</anchor>
      <arglist>(const char *a, const Args &amp;... b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::WitnessFunction</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; T(const Context&lt; T &gt; &amp;)&gt;</type>
      <name>CalcCallback</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>ae80bcec7d1a0eed4b8cc10f61ba5768b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a96e9ceed6c6a739b8fa294b9e0e12277</anchor>
      <arglist>(const System&lt; T &gt; *system, const SystemBase *system_base, std::string description, const WitnessFunctionDirection &amp;direction, T(MySystem::*calc)(const Context&lt; T &gt; &amp;) const, std::unique_ptr&lt; Event&lt; T &gt;&gt; event=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WitnessFunction</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>aa1c55c98f95f72e9db5e6c1aa9009531</anchor>
      <arglist>(const System&lt; T &gt; *system, const SystemBase *system_base, std::string description, const WitnessFunctionDirection &amp;direction, std::function&lt; T(const Context&lt; T &gt; &amp;)&gt; calc, std::unique_ptr&lt; Event&lt; T &gt;&gt; event=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>description</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a69c497e09fe90969c3f9d46692eb668f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WitnessFunctionDirection</type>
      <name>direction_type</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a42e6ac7e64f6c610dd24a73ca3bdc249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcWitnessValue</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a99ad09b580175decbf00aa9858a4d450</anchor>
      <arglist>(const Context&lt; T &gt; &amp;context) const</arglist>
    </member>
    <member kind="function">
      <type>const System&lt; T &gt; &amp;</type>
      <name>get_system</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a5c403016877fd5f6291208aeb9a8063c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; T &gt;</type>
      <name>should_trigger</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>ace44961132e96e032f20ea411cdf6736</anchor>
      <arglist>(const T &amp;w0, const T &amp;wf) const</arglist>
    </member>
    <member kind="function">
      <type>const Event&lt; T &gt; *</type>
      <name>get_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>a677b263497c4e65d9a108e08e838f7f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Event&lt; T &gt; *</type>
      <name>get_mutable_event</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_function.html</anchorfile>
      <anchor>aef95581415f22863a5bce5f9f3f24260</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>maliput::drake::systems::WitnessTriggeredEventData</name>
    <filename>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</filename>
    <templarg></templarg>
    <base>maliput::drake::systems::EventData</base>
    <member kind="function">
      <type></type>
      <name>WitnessTriggeredEventData</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a804a54725e78d25bd66d4d5800e6c61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a9538819f4ab361991fe9caae18f23e06</anchor>
      <arglist>(WitnessTriggeredEventData)</arglist>
    </member>
    <member kind="function">
      <type>const WitnessFunction&lt; T &gt; *</type>
      <name>triggered_witness</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>aa1987ee9e3b84b254f8f2b34d66f0ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_triggered_witness</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a914dec8b2fca61f76f6c17c06b380bfe</anchor>
      <arglist>(const WitnessFunction&lt; T &gt; *triggered_witness)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>t0</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a426b2611dccf0f1b97705d150e586570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_t0</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a0066aa2cd6610c7e22e586fe943d1573</anchor>
      <arglist>(const T &amp;t0)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>tf</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>aaed8ebf240db4f3111b9853820024b1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tf</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a8f4a7c93f72ccab5d5953c03a915f9d4</anchor>
      <arglist>(const T &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; *</type>
      <name>xc0</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>aef7c55391ae2a9db556ad98420557713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_xc0</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>a4a9a1d9837da76d5a76a1c036dc22917</anchor>
      <arglist>(const ContinuousState&lt; T &gt; *xc0)</arglist>
    </member>
    <member kind="function">
      <type>const ContinuousState&lt; T &gt; *</type>
      <name>xcf</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>aa220cd3808a2ef7b27dcc1715589c77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_xcf</name>
      <anchorfile>classmaliput_1_1drake_1_1systems_1_1_witness_triggered_event_data.html</anchorfile>
      <anchor>afbe08f2e3275f85c38d7d8510e377aa3</anchor>
      <arglist>(const ContinuousState&lt; T &gt; *xcf)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>maliput::drake::AbstractValue::Wrap</name>
    <filename>structmaliput_1_1drake_1_1_abstract_value_1_1_wrap.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>value</name>
      <anchorfile>structmaliput_1_1drake_1_1_abstract_value_1_1_wrap.html</anchorfile>
      <anchor>a54c2bae0f8aeed048a397b0618037252</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput</name>
    <filename>namespacemaliput.html</filename>
    <namespace>maliput::api</namespace>
    <namespace>maliput::common</namespace>
    <namespace>maliput::drake</namespace>
    <namespace>maliput::geometry_base</namespace>
    <namespace>maliput::math</namespace>
    <namespace>maliput::plugin</namespace>
    <namespace>maliput::routing</namespace>
    <namespace>maliput::utility</namespace>
    <class kind="struct">maliput::DiscreteValueRuleConstants</class>
    <class kind="class">maliput::Intersection</class>
    <class kind="class">maliput::IntersectionBook</class>
    <class kind="class">maliput::ManualDiscreteValueRuleStateProvider</class>
    <class kind="class">maliput::ManualPhaseProvider</class>
    <class kind="class">maliput::ManualPhaseRingBook</class>
    <class kind="class">maliput::ManualRangeValueRuleStateProvider</class>
    <class kind="class">maliput::ManualRulebook</class>
    <class kind="class">maliput::PhasedDiscreteRuleStateProvider</class>
    <class kind="struct">maliput::RangeValueRuleConstants</class>
    <class kind="struct">maliput::RelatedRulesKeys</class>
    <class kind="struct">maliput::RelatedUniqueIdsKeys</class>
    <class kind="struct">maliput::RuleConstants</class>
    <class kind="struct">maliput::RuleTypeFilter</class>
    <class kind="class">maliput::SimplePhaseRingBook</class>
    <class kind="class">maliput::SimpleRulebook</class>
    <class kind="class">maliput::TrafficLightBook</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const api::rules::DiscreteValueRule &amp;)&gt;</type>
      <name>DiscreteValueRuleFilter</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>af47f9bba35c4e7f194275267573a1faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const api::rules::RangeValueRule &amp;)&gt;</type>
      <name>RangeValueRuleFilter</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab010f6124960691793181deddb8302e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>api::rules::RoadRulebook::QueryResults</type>
      <name>QueryResults</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3fa6b098ad1261c86b7a71c1cb1a558b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a0da2be5e4963c00e7d90bea0c5d6e299</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299aff95300802b888f287a7cce6fb26e6de">kDiscreteValueRuleType</enumvalue>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299aa21f41aa0071e057d4063688cde149cd">kRangeValueRuleType</enumvalue>
      <enumvalue file="namespacemaliput.html" anchor="a0da2be5e4963c00e7d90bea0c5d6e299acb176da2fcabc07c07cc1a211231a3f1">kUnknownRuleType</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae9de13cab362dfe504997becac2948a</anchor>
      <arglist>(const std::string &amp;input, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::IntersectionBook &gt;</type>
      <name>LoadIntersectionBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a70af57ac223401656e6143e147caaf5d</anchor>
      <arglist>(const std::string &amp;filename, const api::rules::RoadRulebook &amp;road_rulebook, const api::rules::PhaseRingBook &amp;phase_ring_book, const api::RoadGeometry *road_geometry, ManualPhaseProvider *phase_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a71eff4450bcc4e11f38442441cdb5195</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFileOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a179c8e2243d2f113a0574efc1f57758e</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a16da6294622c366500107beede513985</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aa94a8bdc4b38fcc4d05e6637903f0f56</anchor>
      <arglist>(const api::rules::RoadRulebook *rulebook, const api::rules::TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae87bad07e3c579517a7e486544448e59</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aae8bb612786d298f2f4eb0ea5a010caf</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a86a2036f65730d912b68767e489d36f4</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;input, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RoadRulebook &gt;</type>
      <name>LoadRoadRulebookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>accce2c90d0627fa85c6b11c9924c0609</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;filename, const api::rules::RuleRegistry &amp;rule_registry)</arglist>
    </member>
    <member kind="function">
      <type>api::rules::RoadRulebook::QueryResults</type>
      <name>FilterRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab6fcf00cfd61b5f2c309a471f8973340</anchor>
      <arglist>(const api::rules::RoadRulebook::QueryResults &amp;rules, const std::vector&lt; DiscreteValueRuleFilter &gt; &amp;discrete_value_rules_filters, const std::vector&lt; RangeValueRuleFilter &gt; &amp;range_value_rules_filters)</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>DirectionUsageRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a59970e4acc510adc08b7d1b925c79428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildDirectionUsageRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a88f6afe21f74c97a61caa392f3d99085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>RightOfWayRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ac32b426289adb8580f95431a088dca4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildRightOfWayRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ae129ca7ec98c04f107c8ca5642a18805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>VehicleStopInZoneBehaviorRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ade7b13115e7582b310a1425d0c3a5a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::DiscreteValueRuleTypeAndValues</type>
      <name>BuildVehicleStopInZoneBehaviorRuleType</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a7764364f52a7f06d32340e697d2fd894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>api::rules::Rule::TypeId</type>
      <name>SpeedLimitRuleTypeId</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3fedaec7dc89f069552385eeaf1bddee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistry</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a8578b49883025263c70cb77aea11af3e</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::RuleRegistry &gt;</type>
      <name>LoadRuleRegistryFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a03c4c176854c7d60524ec666c03f3ff4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a98b23877bdff76d8134d4ae47c0e6001</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::rules::Rule::Id &gt;</type>
      <name>GetCurrentYieldGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a717bbe98643e0f44b2f22588f3876a9d</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ace5a222c0c4ca44dbc09aa5b9bfa7c63</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule::DiscreteValue &amp;discrete_value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; maliput::api::UniqueId &gt;</type>
      <name>GetCurrentBulbGroup</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a07de48c35e49e183caf5ad6580b4d0d5</anchor>
      <arglist>(const maliput::api::rules::DiscreteValueRule &amp;discrete_value_rule, const maliput::api::rules::DiscreteValueRuleStateProvider *state_provider)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a3673381fed4e6e5b62a3ffc77f3f9bae</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::TrafficLightBook &gt;</type>
      <name>LoadTrafficLightBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a748a7535cbc24118299c3bcbef33a20d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsDiscreteValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a1e9fde3287ad8867f768d2f3c05cdf0a</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsRangeValue</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a939fda7aa16deb30b6226ffea2396632</anchor>
      <arglist>(const YAML::Node &amp;rule_node)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetSeverityFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>af40338e73891cfbcf9072e153710dd68</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>GetRangeMinMaxValuesFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a733eb44f957c784b58ea15b0cb54687e</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetValueFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>ab3dc4113f3ad71335d63a727cc7152ba</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetDescriptionFromYamlNode</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aaa19c2692bbb842a8218d2257e1cd168</anchor>
      <arglist>(const YAML::Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBook</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a965f15f535b37a8265347d8d2e5434be</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFile</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a265cddc5edae1f57e02d03499c4c29c5</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>aa55ad2c0686a0577304e12d2094fa355</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; api::rules::PhaseRingBook &gt;</type>
      <name>LoadPhaseRingBookFromFileOldRules</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a826897c7b08dbb77b64737456e1d0b7a</anchor>
      <arglist>(const RoadRulebook *rulebook, const TrafficLightBook *traffic_light_book, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>common::Logger *</type>
      <name>log</name>
      <anchorfile>namespacemaliput.html</anchorfile>
      <anchor>a8d79f56feceef38ffe51eb5e0a1e1b03</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::api</name>
    <filename>namespacemaliput_1_1api.html</filename>
    <namespace>maliput::api::rules</namespace>
    <namespace>maliput::api::test</namespace>
    <class kind="class">maliput::api::BasicIdIndex</class>
    <class kind="class">maliput::api::BranchPoint</class>
    <class kind="class">maliput::api::HBounds</class>
    <class kind="class">maliput::api::InertialPosition</class>
    <class kind="class">maliput::api::Intersection</class>
    <class kind="class">maliput::api::IntersectionBook</class>
    <class kind="struct">maliput::api::IsoLaneVelocity</class>
    <class kind="class">maliput::api::Junction</class>
    <class kind="class">maliput::api::Lane</class>
    <class kind="struct">maliput::api::LaneEnd</class>
    <class kind="class">maliput::api::LaneEndSet</class>
    <class kind="class">maliput::api::LanePosition</class>
    <class kind="struct">maliput::api::LanePositionResult</class>
    <class kind="class">maliput::api::LaneSRange</class>
    <class kind="class">maliput::api::LaneSRoute</class>
    <class kind="class">maliput::api::RBounds</class>
    <class kind="class">maliput::api::RoadGeometry</class>
    <class kind="class">maliput::api::RoadNetwork</class>
    <class kind="struct">maliput::api::RoadNetworkValidatorOptions</class>
    <class kind="struct">maliput::api::RoadPosition</class>
    <class kind="struct">maliput::api::RoadPositionResult</class>
    <class kind="class">maliput::api::Rotation</class>
    <class kind="class">maliput::api::Segment</class>
    <class kind="class">maliput::api::SRange</class>
    <class kind="class">maliput::api::TypeSpecificIdentifier</class>
    <class kind="class">maliput::api::UniqueId</class>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class BranchPoint &gt;</type>
      <name>BranchPointId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>af58adb58c809af6076770134bdb68e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Junction &gt;</type>
      <name>JunctionId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab025537d8f29dd0709b9c53bf2e3afd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Lane &gt;</type>
      <name>LaneId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ae511c23137380e1e22dd8bd24613a561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class RoadGeometry &gt;</type>
      <name>RoadGeometryId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a38fc077ab1aedc28346df61bf12c96a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSpecificIdentifier&lt; class Segment &gt;</type>
      <name>SegmentId</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a405b9288d31a542db4352153419edba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePositionResult &gt;</type>
      <name>IsLanePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a189db2b6c069d74f1643e510b2ba3f9f</anchor>
      <arglist>(const LanePositionResult &amp;lpr_a, const LanePositionResult &amp;lpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoadPositionResult &gt;</type>
      <name>IsRoadPositionResultClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc4737b8e01dd40ef4b03ae668f78357</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;rpr_a, const maliput::api::RoadPositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsInertialPositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a5257d7064e7c5f3d9e8b543b18737ece</anchor>
      <arglist>(const InertialPosition &amp;pos1, const InertialPosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LanePosition &gt;</type>
      <name>IsLanePositionClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aab04b7759b264bea5aa98a8c5d0ba92f</anchor>
      <arglist>(const LanePosition &amp;pos1, const LanePosition &amp;pos2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsRotationClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab614274503f66904453dbe7df1418872</anchor>
      <arglist>(const Rotation &amp;rot1, const Rotation &amp;rot2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RBounds &gt;</type>
      <name>IsRBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aae0d5876f143bae90467aab92f4c4799</anchor>
      <arglist>(const RBounds &amp;rbounds1, const RBounds &amp;rbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; HBounds &gt;</type>
      <name>IsHBoundsClose</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9ab2f16b53bbe8119b92f357c9e4007a</anchor>
      <arglist>(const HBounds &amp;hbounds1, const HBounds &amp;hbounds2, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsLaneEndEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a4d3dd63ef50b18662dbfecbad3ab4222</anchor>
      <arglist>(const LaneEnd &amp;lane_end1, const LaneEnd &amp;lane_end2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Junction &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a14c009382ff3ec884ffbdbbe9c77e53e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Junction *a, const Junction *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Segment &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aebd496c20514127f152a58234d5f2e46</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Segment *a, const Segment *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Lane &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a92104863cc85fffe8cf24d730d90c3d5</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const Lane *a, const Lane *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BranchPoint &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ad839c893606e35b71870c973735f2388</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const BranchPoint *a, const BranchPoint *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; bool &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a875dc08f7e6920a937b74e8f6277bfdb</anchor>
      <arglist>(const char *a_expression, const char *b_expression, bool a, bool b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; double &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>adc0698791787e063312963e3ddbbb0e1</anchor>
      <arglist>(const char *a_expression, const char *b_expression, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::size_t &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ab90f768fcf35f41cc11e991e1b56070e</anchor>
      <arglist>(const char *a_expression, const char *b_expression, std::size_t a, std::size_t b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; TypeSpecificIdentifier&lt; T &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>ad3b047c6def3cb9a61471fd97a7ca185</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const TypeSpecificIdentifier&lt; T &gt; &amp;a, const TypeSpecificIdentifier&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a54a377f86e3fe9bdba070ad995ea9c43</anchor>
      <arglist>(const SRange &amp;s_range_1, const SRange &amp;s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRange &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aa2149e3694b14710b9532dd46d942c9d</anchor>
      <arglist>(const LaneSRange &amp;lane_s_range_1, const LaneSRange &amp;lane_s_range_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; LaneSRange &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a655a6daa38d963ca4d5c891e1a954462</anchor>
      <arglist>(const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_1, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneSRoute &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3989128857764f83815fb37b7908ae38</anchor>
      <arglist>(const LaneSRoute &amp;lane_s_route_1, const LaneSRoute &amp;lane_s_route_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; InertialPosition &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a9f413a2a34bdae4caea6741672077217</anchor>
      <arglist>(const InertialPosition &amp;inertial_position_1, const InertialPosition &amp;inertial_position_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Rotation &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a718452968e53dc8ac4a02d12b6702d4a</anchor>
      <arglist>(const Rotation &amp;rotation_1, const Rotation &amp;rotation_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd::Which &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a20369172b027ed8a4154e2a2af78514f</anchor>
      <arglist>(const LaneEnd::Which &amp;which_1, const LaneEnd::Which &amp;which_2)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; LaneEnd &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>aaa5fa369b98544a98a81ccda4684c393</anchor>
      <arglist>(const LaneEnd &amp;lane_end_1, const LaneEnd &amp;lane_end_2)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::string &gt;</type>
      <name>CheckIdIndexing</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3a6309cbd7aad2179ccd00c1d00c4722</anchor>
      <arglist>(const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a48eeb740d4ff16cd88bf8bf99e5eb309</anchor>
      <arglist>(std::ostream &amp;out, const LaneEnd::Which &amp;which_end)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a967a84358ae62857cee70964b7fcd2f8</anchor>
      <arglist>(std::ostream &amp;out, const InertialPosition &amp;inertial_position)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>af06102e3da0eee4b9a99e2c55e91e3fa</anchor>
      <arglist>(std::ostream &amp;out, const Rotation &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a835a821b6ebb66f57e28664f3b582401</anchor>
      <arglist>(std::ostream &amp;out, const LanePosition &amp;lane_position)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsContiguous</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a1fd0168db4089a09b26edfadbcb4035d</anchor>
      <arglist>(const LaneSRange &amp;lane_range_a, const LaneSRange &amp;lane_range_b, const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIncluded</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a3da5b0c5446a7ad1183d09f99fbd2e61</anchor>
      <arglist>(const InertialPosition &amp;inertial_position, const std::vector&lt; LaneSRange &gt; &amp;lane_s_ranges, const RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api.html</anchorfile>
      <anchor>a7adf7645912f0c98f92ad236bfd919be</anchor>
      <arglist>(const RoadNetwork &amp;road_network, const RoadNetworkValidatorOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::api::rules</name>
    <filename>namespacemaliput_1_1api_1_1rules.html</filename>
    <class kind="class">maliput::api::rules::Bulb</class>
    <class kind="class">maliput::api::rules::BulbGroup</class>
    <class kind="class">maliput::api::rules::DiscreteValueRule</class>
    <class kind="class">maliput::api::rules::DiscreteValueRuleStateProvider</class>
    <class kind="class">maliput::api::rules::Phase</class>
    <class kind="class">maliput::api::rules::PhaseProvider</class>
    <class kind="class">maliput::api::rules::PhaseRing</class>
    <class kind="class">maliput::api::rules::PhaseRingBook</class>
    <class kind="class">maliput::api::rules::RangeValueRule</class>
    <class kind="class">maliput::api::rules::RangeValueRuleStateProvider</class>
    <class kind="class">maliput::api::rules::RoadRulebook</class>
    <class kind="class">maliput::api::rules::Rule</class>
    <class kind="class">maliput::api::rules::RuleRegistry</class>
    <class kind="struct">maliput::api::rules::StateProviderResult</class>
    <class kind="class">maliput::api::rules::TrafficLight</class>
    <class kind="class">maliput::api::rules::TrafficLightBook</class>
    <class kind="class">maliput::api::rules::UniqueBulbGroupId</class>
    <class kind="class">maliput::api::rules::UniqueBulbId</class>
    <member kind="typedef">
      <type>std::unordered_map&lt; RightOfWayRule::Id, RightOfWayRule::State::Id &gt;</type>
      <name>deprecated</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9880f1aadf0730ff465fc9a4ea2a0ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; UniqueBulbId, BulbState &gt;</type>
      <name>BulbStates</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a53658179f838e5cccfddc785fbc8bd08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt;</type>
      <name>DiscreteValueRuleStates</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a98a27b2eab5f51c5c1f5521133252919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Rule::TypeId, std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>DiscreteValueRuleTypeAndValues</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a2243c6424f27aa59e29bec1413f2d962</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Rule::TypeId, std::vector&lt; RangeValueRule::Range &gt; &gt;</type>
      <name>RangeValueRuleTypeAndValues</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a2cc52403baadc577433abb54894abe15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BulbColor</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6e1f10a3be6871610a2558424fcd78ed</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78edafb0136b923af8c04b31a9d1b5e989acf">kRed</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78eda4c6c30a3642462190739bb7f13af9c7b">kYellow</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a6e1f10a3be6871610a2558424fcd78eda1299e6e2ec6371a79385cd3a862f7cc9">kGreen</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BulbType</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae21a360eb5822a6f1f2579b377ba2bb2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="ae21a360eb5822a6f1f2579b377ba2bb2a19cbfb4904c3202ff69a412c142cda6c">kRound</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="ae21a360eb5822a6f1f2579b377ba2bb2ab9915b027f3c5c3f045c880f99f22bc4">kArrow</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BulbState</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a8e3cc9f879a0ac1d7bd47eb69bba5b34</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34acc9ab5e60ac2a9a675ba64bf4bb49dc8">kOff</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34a2e6612c563e3cf5e64362b0f19f4b33f">kOn</enumvalue>
      <enumvalue file="namespacemaliput_1_1api_1_1rules.html" anchor="a8e3cc9f879a0ac1d7bd47eb69bba5b34a52932182c1d638e198dc39077e8da180">kBlinking</enumvalue>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RuleStates &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a0cfb3eca710e367eab908684ddfdf980</anchor>
      <arglist>(const RuleStates &amp;a, const RuleStates &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Phase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9f1f6e26d3f3580677fd5a03d18cfe1e</anchor>
      <arglist>(const Phase &amp;a, const Phase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhaseRing::NextPhase &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac2feceb2c2c7e833f1513f2e7980589b</anchor>
      <arglist>(const PhaseRing::NextPhase &amp;a, const PhaseRing::NextPhase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; PhaseRing::NextPhase &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a8ec97e6a1eb755eec1dd3a46be0e663b</anchor>
      <arglist>(const std::vector&lt; PhaseRing::NextPhase &gt; &amp;a, const std::vector&lt; PhaseRing::NextPhase &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule::Range &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac1ae78bac143112dfa38fa8cb2663009</anchor>
      <arglist>(const RangeValueRule::Range &amp;a, const RangeValueRule::Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RangeValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a10d499f1d9aeb43c5510733d2fdee2b5</anchor>
      <arglist>(const RangeValueRule &amp;a, const RangeValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; RangeValueRule::Range &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad63b2658fb261295617e5d87976b4f07</anchor>
      <arglist>(const std::vector&lt; RangeValueRule::Range &gt; &amp;a, const std::vector&lt; RangeValueRule::Range &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule::DiscreteValue &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a5c14748b1ad34975cf9468c177feade9</anchor>
      <arglist>(const DiscreteValueRule::DiscreteValue &amp;a, const DiscreteValueRule::DiscreteValue &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DiscreteValueRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a827bc3bbcdcc4f84fa63c6406017d1d8</anchor>
      <arglist>(const DiscreteValueRule &amp;a, const DiscreteValueRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aac2491d5f89fa9757adcd961b115d2e1</anchor>
      <arglist>(const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::vector&lt; DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a527d13d667c2731c3644b7935b309009</anchor>
      <arglist>(const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;a, const std::unordered_map&lt; Rule::Id, DiscreteValueRule::DiscreteValue &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aca0215ac78c560613fb4f6cf9b7bf5f4</anchor>
      <arglist>(DirectionUsageRule::State::Type a, DirectionUsageRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4bf0ba6a1cd5f9e7609330b9781476f3</anchor>
      <arglist>(DirectionUsageRule::State::Severity a, DirectionUsageRule::State::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abebeeaa7e17710a0cbd1ac8b13ca3c3c</anchor>
      <arglist>(const DirectionUsageRule::State &amp;a, const DirectionUsageRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a602ca78a52ab4edd78cf3f6bd1b19d1e</anchor>
      <arglist>(const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;a, const std::unordered_map&lt; DirectionUsageRule::State::Id, DirectionUsageRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; DirectionUsageRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a9b0c2979c735e8f7ad4f362e3294f0cf</anchor>
      <arglist>(const DirectionUsageRule &amp;a, const DirectionUsageRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::ZoneType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae4cb55f9970dbbd07a67a3c61eadef75</anchor>
      <arglist>(RightOfWayRule::ZoneType a, RightOfWayRule::ZoneType b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a5b736599074667b726bf341d361cf0c0</anchor>
      <arglist>(RightOfWayRule::State::Type a, RightOfWayRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; RightOfWayRule::Id &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a571a9b0c909d02cbfcdb8dcf9564dad2</anchor>
      <arglist>(const std::vector&lt; RightOfWayRule::Id &gt; &amp;a, const std::vector&lt; RightOfWayRule::Id &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aafb6336b4ee5dad06762b2a95da4f231</anchor>
      <arglist>(const RightOfWayRule::State &amp;a, const RightOfWayRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6c76877f16e32e3111d1d99870329f58</anchor>
      <arglist>(const std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &amp;a, const std::unordered_map&lt; RightOfWayRule::State::Id, RightOfWayRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a965aabd181e7f30267d069dfbefead6a</anchor>
      <arglist>(const RightOfWayRule &amp;a, const RightOfWayRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RightOfWayRuleStateProvider::RightOfWayResult &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aabbeb1c527d15b5c6f74830c9827dd62</anchor>
      <arglist>(const RightOfWayRuleStateProvider::RightOfWayResult &amp;a, const RightOfWayRuleStateProvider::RightOfWayResult &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SpeedLimitRule::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6cbac4e690784344f88131948f936080</anchor>
      <arglist>(SpeedLimitRule::Severity a, SpeedLimitRule::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; SpeedLimitRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>af5fd6917a97424ba3652c748b2e14023</anchor>
      <arglist>(const SpeedLimitRule &amp;a, const SpeedLimitRule &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt; &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>af8e58c672542d2e4d423897401aab24e</anchor>
      <arglist>(const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;a, const std::unordered_map&lt; TrafficLight::Id, std::vector&lt; BulbGroup::Id &gt;&gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbColor &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>acea4e4a30df6f586298a64b73300b4a6</anchor>
      <arglist>(const BulbColor &amp;a, const BulbColor &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a917a3bcc37f446034d075b2faa0a6b6e</anchor>
      <arglist>(const BulbType &amp;a, const BulbType &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbState &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a06c24e637236f751f36dcdae579f74d3</anchor>
      <arglist>(const BulbState &amp;a, const BulbState &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; BulbStates &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>abc5fd5d8ecab29d55de671979a19e9a8</anchor>
      <arglist>(const std::optional&lt; BulbStates &gt; &amp;a, const std::optional&lt; BulbStates &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::optional&lt; double &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aaed7bb4434dbd9ceb45ccb63face03af</anchor>
      <arglist>(const std::optional&lt; double &gt; &amp;a, const std::optional&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb::BoundingBox &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a009baf985ccd9faaad716f3ffbde8818</anchor>
      <arglist>(const Bulb::BoundingBox &amp;a, const Bulb::BoundingBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; Bulb &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a964b62ec16aad58eadaac5bd2874cd5c</anchor>
      <arglist>(const Bulb *a, const Bulb *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; const Bulb * &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a218a821205187039ebbdc17e9472a0e3</anchor>
      <arglist>(const char *a_expression, const char *b_expression, const std::vector&lt; const Bulb * &gt; &amp;a, const std::vector&lt; const Bulb * &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; BulbGroup &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ac89bb07221b67b33f53850b7c9e9838a</anchor>
      <arglist>(const BulbGroup *a, const BulbGroup *b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; TrafficLight &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ada0b3d3130a0150d03f22411e9ec2bfc</anchor>
      <arglist>(const TrafficLight *a, const TrafficLight *b)</arglist>
    </member>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a22caa4eb253ffe3163ac3b3bb3cdce2a</anchor>
      <arglist>(&quot;DirectionUsageRule will be deprecated&quot;, &quot;DiscreteValueRule&quot;) DirectionUsageRule final</arglist>
    </member>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a0d497c24123337e67c55e9b163db1135</anchor>
      <arglist>(&quot;RightOfWayRule class will be deprecated&quot;, &quot;DiscreteValueRule&quot;) RightOfWayRule final</arglist>
    </member>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a689b8cce73fdae159a03a234f658a925</anchor>
      <arglist>(&quot;RigthOfWayRule class will be deprecated.&quot;) RightOfWayRuleStateProvider</arglist>
    </member>
    <member kind="function">
      <type>class</type>
      <name>MALIPUT_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aeac7d5c176e479046745b85fe96f21e5</anchor>
      <arglist>(&quot;next release&quot;, &quot;Use RangeValueRule instead.&quot;) SpeedLimitRule</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbColor, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbColorMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4e3ace1816c987e259ef55535b1cb07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbType, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbTypeMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ae22def226ba4538ee9a91f02bd1b5ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_map&lt; BulbState, const char *, maliput::common::DefaultHash &gt;</type>
      <name>BulbStateMapper</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ab2af2bdbf1550cd1e87d177254662692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::ZoneType &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>aaedba4d6b9f741b9f611879f2bd56128</anchor>
      <arglist>(rules::RightOfWayRule::ZoneType a, rules::RightOfWayRule::ZoneType b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::State::Type &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a4910894724f5c5d708348a2d3d947d73</anchor>
      <arglist>(rules::RightOfWayRule::State::Type a, rules::RightOfWayRule::State::Type b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::vector&lt; rules::RightOfWayRule::Id &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a1693b9b252363302b27bf839605d46ae</anchor>
      <arglist>(const std::vector&lt; rules::RightOfWayRule::Id &gt; &amp;a, const std::vector&lt; rules::RightOfWayRule::Id &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRule::State &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a3555a18aa26fb32d21b15c3b05815701</anchor>
      <arglist>(const rules::RightOfWayRule::State &amp;a, const rules::RightOfWayRule::State &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a6e43dd8a2c8b7adce4accf28287439cb</anchor>
      <arglist>(const std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &amp;a, const std::unordered_map&lt; rules::RightOfWayRule::State::Id, rules::RightOfWayRule::State &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::RightOfWayRuleStateProvider::RightOfWayResult &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad8fe47aec69e25617f657dcfa704b98d</anchor>
      <arglist>(const rules::RightOfWayRuleStateProvider::RightOfWayResult &amp;a, const rules::RightOfWayRuleStateProvider::RightOfWayResult &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::SpeedLimitRule::Severity &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>ad800885b472aa22fb68ca2715749bad6</anchor>
      <arglist>(rules::SpeedLimitRule::Severity a, rules::SpeedLimitRule::Severity b)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; rules::SpeedLimitRule &gt;</type>
      <name>IsEqual</name>
      <anchorfile>namespacemaliput_1_1api_1_1rules.html</anchorfile>
      <anchor>a29519b9edca82b00edbcca667d7ab888</anchor>
      <arglist>(const rules::SpeedLimitRule &amp;a, const rules::SpeedLimitRule &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::api::test</name>
    <filename>namespacemaliput_1_1api_1_1test.html</filename>
    <class kind="class">maliput::api::test::MockBranchPoint</class>
    <class kind="class">maliput::api::test::MockIdIndex</class>
    <class kind="class">maliput::api::test::MockJunction</class>
    <class kind="class">maliput::api::test::MockLane</class>
    <class kind="class">maliput::api::test::MockLaneEndSet</class>
    <class kind="class">maliput::api::test::MockRoadGeometry</class>
    <class kind="class">maliput::api::test::MockSegment</class>
    <class kind="struct">maliput::api::test::PhaseBuildFlags</class>
    <class kind="struct">maliput::api::test::RightOfWayBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadGeometryBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadGeometryContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadGeometryIdIndexBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadNetworkContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookContiguityBuildFlags</class>
    <class kind="struct">maliput::api::test::RoadRulebookRelatedRulesBuildFlags</class>
    <class kind="struct">maliput::api::test::TrafficLightBookBuildFlags</class>
    <class kind="struct">maliput::api::test::TrafficLightBuildFlags</class>
    <member kind="function">
      <type>LaneSRoute</type>
      <name>CreateLaneSRoute</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c856e72bc0afc0eaf827a76ce67837a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LaneSRange</type>
      <name>CreateLaneSRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9f54fdf32656d83625b07ceed84d1a0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State::YieldGroup</type>
      <name>YieldGroup2</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aec9d4bffea146b49d663e7a9f8a09cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>NoYieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abc28ca8174569877ffb51fc033b4892a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::State</type>
      <name>YieldState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ab721bf86f7c6a95fb347209649e92d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule::RelatedBulbGroups</type>
      <name>RelatedBulbGroups</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a88549b6027accd8039b7ae7d8ff826d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2de3fcf39c604ae62092ebab9c970823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RightOfWayRule</type>
      <name>CreateRightOfWayRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6d6031e2e7f3f1cc51454c93f1e13122</anchor>
      <arglist>(const RightOfWayBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::SpeedLimitRule</type>
      <name>CreateSpeedLimitRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a464b8eb391fd0b3f1c290ebadcd3eebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule::State</type>
      <name>CreateDirectionUsageRuleState</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a002a9e759ee230aee60e8af3c3d79aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DirectionUsageRule</type>
      <name>CreateDirectionUsageRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aff97bea27b014243cc9ed27e0f1c2dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>abf5240b6d7d293372814907b54a984f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedRules</type>
      <name>CreateNonEmptyRelatedRules</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad559e840135f887befaf56114d733bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae3aae82bafc81c39d09d31b6e7e2717e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Rule::RelatedUniqueIds</type>
      <name>CreateNonEmptyRelatedUniqueIds</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4d59fda38f4449f5bcfab925ad51218c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae7bb43141551b4a187af9db961e4e246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::DiscreteValueRule</type>
      <name>CreateDiscreteValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a896be0327988e11101f2e380f749e632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule::Range</type>
      <name>CreateRange</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ba03b0924d18269ee24739cb7fa0214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aabccdacb186a8549b6ff5543dc865f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aca2601f4483c573870038c4147109fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::Phase</type>
      <name>CreatePhase</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>acb299c39196e6da912e40ff5b01e9771</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aef98f29da5733309ae9e7ad4c6956a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rules::PhaseRing</type>
      <name>CreatePhaseRing</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a504c78f01a3bda12a760e4e7c95ae137</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>rules::RangeValueRule</type>
      <name>CreateRangeValueRuleForContiguityTest</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad93d4462062718fe885a4cf47fd146c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a055aef0ad0d91cdd77fddd8520f767ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae0ed68b9006706f6014a4ed540c54172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2ca5097e35d97da77db9905a98622731</anchor>
      <arglist>(const RoadGeometryBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateMockContiguousRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a86df4889faa77e29796faedd939b9872</anchor>
      <arglist>(const RoadGeometryContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateOneLaneRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a7c3f52a9cc6512cab92b3c32a26e5119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5c45c4b17f389bc37a33fbccad327f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateTwoLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a2d03c6c4dc963fce73446f652efb950d</anchor>
      <arglist>(const LanePositionResult &amp;lane_a_pos_result, const LanePositionResult &amp;lane_b_pos_result)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Lane &gt;</type>
      <name>CreateLane</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aa97c50d03ebd0e3eba4d489def2351c3</anchor>
      <arglist>(const LaneId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4a1d1da83594d9dee3b4e14809df517d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a09e8c7db93fb922d6f4cf363d0588060</anchor>
      <arglist>(const RoadRulebookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a51675d2410d58943165742f4ff98d22e</anchor>
      <arglist>(const RoadRulebookRelatedRulesBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RoadRulebook &gt;</type>
      <name>CreateMockContiguousRoadRulebook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a229f81180182fd2d2847e4effa5758ee</anchor>
      <arglist>(const RoadRulebookContiguityBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::BulbGroup &gt;</type>
      <name>CreateBulbGroup</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adad533de12202353e8158d4581f45233</anchor>
      <arglist>(bool add_missing_bulb_group)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLight &gt;</type>
      <name>CreateTrafficLight</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a6153b0d3869a083346188992d611145f</anchor>
      <arglist>(const TrafficLightBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a64d6476b07e2711e2d73b62f3f7f8638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::TrafficLightBook &gt;</type>
      <name>CreateTrafficLightBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>adf94c46d007e5ff6a964475bcdc52a11</anchor>
      <arglist>(const TrafficLightBookBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a1155506619e42073372c87d30a740819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseRingBook &gt;</type>
      <name>CreatePhaseRingBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a9b169bdf50c14b3a2f4aedaf8d33b46e</anchor>
      <arglist>(const PhaseBuildFlags &amp;build_flags)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RightOfWayRuleStateProvider &gt;</type>
      <name>CreateRightOfWayRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a506864db3b98a62062783b946ce0be7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::PhaseProvider &gt;</type>
      <name>CreatePhaseProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a73bc83a71c52c26c9a54493d063a46b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; IntersectionBook &gt;</type>
      <name>CreateIntersectionBook</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a92b5693c77b4338dc119e305c05908dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ae8af3a6fd1d97f48349cc4536ab81cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RuleRegistry &gt;</type>
      <name>CreateBasicRuleRegistry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>ad397f34ac523cac7f123bedd82e2f67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::DiscreteValueRuleStateProvider &gt;</type>
      <name>CreateDiscreteValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a5dced08998d0beb56994f840e0c5f342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rules::RangeValueRuleStateProvider &gt;</type>
      <name>CreateRangeValueRuleStateProvider</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>aadea518f62326e52e4db3968cdb2398f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiscreteValueRule</type>
      <name>CreateDiscreteValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a4d4d11b5dc30bf2beacd5ca99b6a799a</anchor>
      <arglist>(bool consistent_related_rule_groups)</arglist>
    </member>
    <member kind="function">
      <type>RangeValueRule</type>
      <name>CreateRangeValueRule</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>a3de6b649b65eb6e43a9b26b18470a030</anchor>
      <arglist>(bool consistent_related_rule_groups)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; RoadGeometry &gt;</type>
      <name>CreateMultipleLanesRoadGeometry</name>
      <anchorfile>namespacemaliput_1_1api_1_1test.html</anchorfile>
      <anchor>acb850383540320ccf001ff91e0e78f36</anchor>
      <arglist>(const std::vector&lt; Lane * &gt; &amp;lanes)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::common</name>
    <filename>namespacemaliput_1_1common.html</filename>
    <namespace>maliput::common::internal</namespace>
    <namespace>maliput::common::logger</namespace>
    <class kind="class">maliput::common::assertion_error</class>
    <class kind="struct">maliput::common::ComparisonResult</class>
    <class kind="class">maliput::common::ComparisonResultCollector</class>
    <class kind="struct">maliput::common::DelegatingHasher</class>
    <class kind="class">maliput::common::Filesystem</class>
    <class kind="class">maliput::common::Logger</class>
    <class kind="class">maliput::common::never_destroyed</class>
    <class kind="class">maliput::common::Passkey</class>
    <class kind="class">maliput::common::Path</class>
    <class kind="class">maliput::common::RangeValidator</class>
    <class kind="struct">maliput::common::Serialize</class>
    <class kind="class">maliput::common::Sink</class>
    <class kind="class">maliput::common::SinkBase</class>
    <class kind="struct">maliput::common::uhash</class>
    <member kind="typedef">
      <type>internal::FNV1aHasher</type>
      <name>DefaultHasher</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a5a11519c4c803fc3f2118df94e858e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>maliput::common::uhash&lt; DefaultHasher &gt;</type>
      <name>DefaultHash</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ae925cde990a915749d22776d5b22b6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a44240da1e534b4f1ad217fd60715fefe</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a8fe1b380d6f3061ce1d4be519a5d634b</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_floating_point&lt; T &gt;::value &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a88818e7cfdc0923d054f8c0b9c953388</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>add13b60ba7eee019e20e4ff81f147420</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::basic_string&lt; char, Traits, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>aa52d300c87b4dd871f45e6965a0a5f30</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::pair&lt; T1, T2 &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ad70b949938141a7dfe81a18dd902df2c</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::optional&lt; T &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append_range</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>ac616586047afb5b1676510994e105f9b</anchor>
      <arglist>(HashAlgorithm &amp;hasher, Iter begin, Iter end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a8e063b533ac295f539dc0d562089a35c</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::map&lt; T1, T2, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a9cb30385aa3dc7978a7f5b0b98c739a1</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::set&lt; Key, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unused</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>af4f9479a48d8c6a544754428a183a423</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>set_log_level</name>
      <anchorfile>namespacemaliput_1_1common.html</anchorfile>
      <anchor>a7783f3769985bc4aab7193b525bb4411</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::common::internal</name>
    <filename>namespacemaliput_1_1common_1_1internal.html</filename>
    <class kind="class">maliput::common::internal::FNV1aHasher</class>
    <member kind="function">
      <type></type>
      <name>__attribute__</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a997f9f257b92b1ff8d991dc50da1e040</anchor>
      <arglist>((noreturn)) void Abort(const char *condition</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a9dc47715d64b92b8dfb781bb50ba4682</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>aa50fecffef9f6c591e7f367e06c1a4ff</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line, const char *extra_details)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a1adb6d4bdebbb807916d6b9231d14a8e</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>func</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>ac4d02c4762d7260b3ce0a2274521a3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char *</type>
      <name>file</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a88cdae8c33f1a7c9d1032870876961e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char int</type>
      <name>line</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a42ff6d48d03489dd3a8ee0f1ff63bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char int const char *</type>
      <name>extra_details</name>
      <anchorfile>namespacemaliput_1_1common_1_1internal.html</anchorfile>
      <anchor>a1a63baa421186d858d40d4baf283b591</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::common::logger</name>
    <filename>namespacemaliput_1_1common_1_1logger.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>level</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>trace</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a36a3b17acbfb35380a47b3d88c9b8942</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>debug</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a5be0fd270d9cbf6a0b7445db855089da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>info</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3aa4abb266e72efba828327b605b2ab0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>warn</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a030352c93c772334261abda73e03885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>error</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3ad606e435413ea0944dd00d49e901e4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>critical</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a5fe0ea375791d13455a34f3d40dc9c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>off</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a53ace14c115e45153a1c9105accceb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unchanged</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>afde8e18a788ccc92fc61cab298bca7e3a4fb8437e3610883e3ac68ffe75ab521d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; std::string, logger::level &gt;</type>
      <name>kStringToLevel</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>ae1c3da69b2be6b9ffbe88cc03856aa60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; int, std::string &gt;</type>
      <name>kLevelToString</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>ab81b119f214f87c2b6af1d30dea096e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::map&lt; int, std::string &gt;</type>
      <name>kLevelToMessage</name>
      <anchorfile>namespacemaliput_1_1common_1_1logger.html</anchorfile>
      <anchor>a4015c7b3d782510e3fc09658157df199</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake</name>
    <filename>namespacemaliput_1_1drake.html</filename>
    <namespace>maliput::drake::assert</namespace>
    <namespace>maliput::drake::internal</namespace>
    <namespace>maliput::drake::logging</namespace>
    <namespace>maliput::drake::systems</namespace>
    <namespace>maliput::drake::trajectories</namespace>
    <class kind="class">maliput::drake::AbstractValue</class>
    <class kind="class">maliput::drake::copyable_unique_ptr</class>
    <class kind="struct">maliput::drake::DelegatingHasher</class>
    <class kind="struct">maliput::drake::dummy_value</class>
    <class kind="struct">maliput::drake::dummy_value&lt; int &gt;</class>
    <class kind="class">maliput::drake::EigenPtr</class>
    <class kind="struct">maliput::drake::EigenSizeMinPreferDynamic</class>
    <class kind="struct">maliput::drake::EigenSizeMinPreferFixed</class>
    <class kind="class">maliput::drake::Identifier</class>
    <class kind="struct">maliput::drake::is_eigen_nonvector_of</class>
    <class kind="struct">maliput::drake::is_eigen_scalar_same</class>
    <class kind="struct">maliput::drake::is_eigen_type</class>
    <class kind="struct">maliput::drake::is_eigen_vector</class>
    <class kind="struct">maliput::drake::is_eigen_vector_of</class>
    <class kind="struct">maliput::drake::MultiplyEigenSizes</class>
    <class kind="class">maliput::drake::never_destroyed</class>
    <class kind="class">maliput::drake::NiceTypeName</class>
    <class kind="class">maliput::drake::Polynomial</class>
    <class kind="class">maliput::drake::RandomGenerator</class>
    <class kind="class">maliput::drake::reset_on_copy</class>
    <class kind="struct">maliput::drake::scalar_predicate</class>
    <class kind="class">maliput::drake::TypeSafeIndex</class>
    <class kind="struct">maliput::drake::uhash</class>
    <class kind="class">maliput::drake::Value</class>
    <member kind="typedef">
      <type>typename scalar_predicate&lt; T &gt;::type</type>
      <name>boolean</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a1f1c657c4d2cf400649123a7c2573d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, T, std::less&lt; Key &gt;, Eigen::aligned_allocator&lt; std::pair&lt; Key const, T &gt; &gt;&gt;</type>
      <name>eigen_aligned_std_map</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae13e10d823b0e212fdfb27cc8f18065a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; Key, T, std::hash&lt; Key &gt;, std::equal_to&lt; Key &gt;, Eigen::aligned_allocator&lt; std::pair&lt; Key const, T &gt; &gt;&gt;</type>
      <name>eigen_aligned_std_unordered_map</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afcadf96d397f45d041d01bf17061bc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T, Eigen::aligned_allocator&lt; T &gt; &gt;</type>
      <name>eigen_aligned_std_vector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4150555527b3cf871fe911f8776f301a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 0, 1 &gt;</type>
      <name>Vector0</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acda0b15d77e4c1701d160b17a2cb2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 1 &gt;</type>
      <name>Vector1</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af359dfdb84d6c13b606bb3ed7b821e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 1, 1 &gt;</type>
      <name>Vector1d</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a6d923e79e6e92c2556edd86520145077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, 1 &gt;</type>
      <name>Vector2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab9f8b7dbd727440c2dd207bf43812f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0ad29daab565ce347c4d1c5aae6a76c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, 1 &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af7e96394aef85f13f3fc84d3c3c238b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</type>
      <name>Vector6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a14aa433aedda321a15238f2d4074d4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
      <name>Vector6d</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a44f103cf5fdeb3f539ceeeb9cd3a0a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Rows, 1 &gt;</type>
      <name>Vector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a01ae662d5635b7c9efe03d15d976f7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a77dd228fb4dd66a2c17dd3f7f38ffd85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, 1, 0, 6, 1 &gt;</type>
      <name>VectorUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>adfbacdba0566fe8958cfafd659b4373f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 2 &gt;</type>
      <name>RowVector2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afc54e1f7aa3341a5f6b305705452d9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 3 &gt;</type>
      <name>RowVector3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aee4ae0d841ea1629551bf77fd5d9ec9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 4 &gt;</type>
      <name>RowVector4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aa9b373b2971391d9054b431d8a3e4b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, 6 &gt;</type>
      <name>RowVector6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3ad88c2d704ccb2899d475d3ae05de14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, Cols &gt;</type>
      <name>RowVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3eb9dffa1f3d48e4c5fe406e5a4617fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 1, Eigen::Dynamic &gt;</type>
      <name>RowVectorX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a218f39990d2d9090c7a25c9c18cbf832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, 2 &gt;</type>
      <name>Matrix2</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a06406a5da633da84f911e2979aa48549</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3922cc0c6264e8ff225a6aa0dd993667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, 4 &gt;</type>
      <name>Matrix4</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae74155a11dfcdaad0adc0349f0956148</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 6 &gt;</type>
      <name>Matrix6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a11f9aa896d31437a219ed19fa944fe20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 2, Eigen::Dynamic &gt;</type>
      <name>Matrix2X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af13883859324817e6310d04a6d2fe206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 3, Eigen::Dynamic &gt;</type>
      <name>Matrix3X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acfe2dee57bc492bfbd96fe078b65ab00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 4, Eigen::Dynamic &gt;</type>
      <name>Matrix4X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a585f047d94502e00bfb163347abbc771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, Eigen::Dynamic &gt;</type>
      <name>Matrix6X</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a668e1152f8b876967b9093ae4d95298b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>MatrixX</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a28c58d881c60e96f48a7a4e32a699b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, Eigen::Dynamic, Eigen::Dynamic, 0, 6, 6 &gt;</type>
      <name>MatrixUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>abc0efed85a04025fda487f0d59b71d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, Eigen::Dynamic, 0, 6, 6 &gt;</type>
      <name>Matrix6xUpTo6</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae2b0be18a912f9cacfec6d0a0a6d873c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; Scalar &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4156bf453a5b323356d7cc784dfdf084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxis</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a90d91e75997a81a48adea1e83caddde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Transform&lt; Scalar, 3, Eigen::Isometry &gt;</type>
      <name>Isometry3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a9eb383d64a842ca9002f66b2e10254aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Translation&lt; Scalar, 3 &gt;</type>
      <name>Translation3</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a50f8d19f395776637448f26e734228f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, 1 &gt;</type>
      <name>TwistVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afbf249fd84580486a877500bed5a0b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, Eigen::Dynamic &gt;</type>
      <name>TwistMatrix</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af30fe85a821bd0e0ab46f2e165c8e480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, kTwistSize, kTwistSize &gt;</type>
      <name>SquareTwistMatrix</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3aa72a15690d6e4db2040ebc8814a74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</type>
      <name>WrenchVector</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af98fed5f98c376f4d45fff56bb96c8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::FNV1aHasher</type>
      <name>DefaultHasher</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a5a11519c4c803fc3f2118df94e858e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>maliput::drake::uhash&lt; DefaultHasher &gt;</type>
      <name>DefaultHash</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0b2a4541f86da3123b759d584b6f34ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>is_cloneable_internal::is_cloneable_helper&lt; T, void &gt;</type>
      <name>is_cloneable</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a158f68939b94f6c2c5ea353d652919da</anchor>
      <arglist></arglist>
      <docanchor file="namespacemaliput_1_1drake.html">is_cloneable_doc</docanchor>
    </member>
    <member kind="typedef">
      <type>Polynomial&lt; double &gt;</type>
      <name>Polynomiald</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab0a2621977171e1d2d5b64c55141b9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; Polynomiald, Eigen::Dynamic, 1 &gt;</type>
      <name>VectorXPoly</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a00cbebcd97766579bb36e35abcf44acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ToleranceType</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af8777bc10296f9d39d52753861110e26</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="af8777bc10296f9d39d52753861110e26abab0767e88027de9944aa55c24c8387a">kAbsolute</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="af8777bc10296f9d39d52753861110e26af460a96ab20647996c15854794763384">kRelative</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RandomDistribution</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a72383be4710d27584d0821effc6506a5</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5a3ea9f7aca87fd7b64469a0d1119f0b50">kUniform</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5ab933cd0242085c2dbf804dbf288ce7f0">kGaussian</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake.html" anchor="a72383be4710d27584d0821effc6506a5a601bf5851ffd28f5e6219c0f1945c8d6">kExponential</enumvalue>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>all</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a18197d6999dda546d996d5b8dfccd53a</anchor>
      <arglist>(const Eigen::DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>all_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aea88dde6d4dd05c07a631ac8b94ef5e7</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>any</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a87f661d87ca8519af1494a8c045aef91</anchor>
      <arglist>(const Eigen::DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>any_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a581bce854832eed48d47ead042014dd0</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>Derived::Scalar</type>
      <name>none</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a78e78dcc4c899c0f86a05e8f8c5df78f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>boolean&lt; typename Derived::Scalar &gt;</type>
      <name>none_of</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acfc3e8670f86d1c69eaf29ad072865cc</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;m, const std::function&lt; boolean&lt; typename Derived::Scalar &gt;(const typename Derived::Scalar &amp;)&gt; &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRAKE_DEPRECATED</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aef84e5a8cff869d8a840d52578ae89db</anchor>
      <arglist>(&quot;2020-08-01&quot;, &quot;Provide a specific overload of ExtractDoubleOrThrow for any &quot; &quot;type that really is sensible at compile time and should &quot; &quot;defer failure to runtime; this version was too generic.&quot;) typename std</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>ExtractDoubleOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab4b4b76d02b97e432f12b85f16d06a83</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_same_v&lt; typename Derived::Scalar, double &gt;, Eigen::Matrix&lt; double, Derived::RowsAtCompileTime, Derived::ColsAtCompileTime, Derived::Options, Derived::MaxRowsAtCompileTime, Derived::MaxColsAtCompileTime &gt; &gt;</type>
      <name>ExtractDoubleOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acbb565e9a203554c64228bfea2808935</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a0284bfa9d633e202f564338a6cf623b4</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_enum_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a5c729e47e35c048046d463e042446b36</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt; &gt;</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acb07677aa04f0138bd05f7d361466e93</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const T &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ad0a837d489bcc6395a68518f05f84171</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::basic_string&lt; char, Traits, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afd3a753d7c4264b50a08d98ab24cd9b5</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::pair&lt; T1, T2 &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a135056b56b4b74592a8bb99e661e3824</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::optional&lt; T &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append_range</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ad61c75c1d13adf6bab150b67a38b84d3</anchor>
      <arglist>(HashAlgorithm &amp;hasher, Iter begin, Iter end) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a7f49ebd9ac9892798c67660d47780bb6</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::map&lt; T1, T2, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>abc126047be01b9fcf50d66794419b2f5</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const std::set&lt; Key, Compare, Allocator &gt; &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a04fe934638081d5266e1b191d2a3ae7d</anchor>
      <arglist>(const maliput::drake::Identifier&lt; Tag &gt; &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>static_pointer_cast</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a36150fcc9734997befa37c4c9c8ac80b</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>dynamic_pointer_cast</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a44c423659476de5c504384a34a7a48de</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>dynamic_pointer_cast_or_throw</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>afdc8d19ae3df0e6cb635460680f4335d</anchor>
      <arglist>(std::unique_ptr&lt; U &gt; &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Polynomial&lt; T &gt;</type>
      <name>pow</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a54e1a1d5235229e09f8af51fe653d896</anchor>
      <arglist>(const Polynomial&lt; T &gt; &amp;base, typename Polynomial&lt; T &gt;::PowerType exponent)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3b9bb65194582cce374b2a7d01a09610</anchor>
      <arglist>(std::ostream &amp;os, const Eigen::Matrix&lt; Polynomial&lt; T &gt;, Rows, Cols &gt; &amp;poly_mat)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>CalcProbabilityDensity</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a7459c4a03d4b4f77eea119df933489da</anchor>
      <arglist>(RandomDistribution distribution, const Eigen::Ref&lt; const VectorX&lt; T &gt;&gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>logging::logger *</type>
      <name>log</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aa157c1d75c2e52df3370e5f458022ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ab6f5d094c05d975c3fb1eb735d7e0428</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a689b232e965c2a9cb7b98e702eb8502f</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a67239655b7c6173aa85ba63103d62382</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>adc287d6eb32ff6e9287c29d414a2e046</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a8073dc48e59dfd721a71171a88763b7e</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_integral_v&lt; U &gt; &amp;&amp;std::is_unsigned_v&lt; U &gt;, bool &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aae8637931173103787c3afd15dbeb4a1</anchor>
      <arglist>(const U &amp;value, const TypeSafeIndex&lt; Tag &gt; &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unused</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>acbbd758ec364c16c9c4137651e771013</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>template double</type>
      <name>CalcProbabilityDensity&lt; double &gt;</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a10bce133654002443b7d69eec8835b39</anchor>
      <arglist>(RandomDistribution, const Eigen::Ref&lt; const VectorX&lt; double &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kQuaternionSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a07869e660ffe730425feca7595de2273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kSpaceDimension</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>af869092c52ed7cc9d2db40ce56050c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kRpySize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aeab5b0d99cafc2f6ae5812128cea27a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kTwistSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ac9ce1d9cce0ad61dd2f5a295c1a10fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>kHomogeneousTransformSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a63c55e4d8662e0986e79d11486334486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>kRotmatSize</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ace32fe90adc0d2100ad4fc9f4bc6f79a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kDrakeAssertIsArmed</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>ae5ffa02b326b2dd39e7f6cbc4606b61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kDrakeAssertIsDisarmed</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>aaef73489ed741143f9d712623e53b6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>kNameChars</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a4278037dcb693a8ee6b06709bf630e7c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kNumNameChars</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a3eb8cf48cd1a44df66b82ec47978884b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kNameLength</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>a8beaa96b5dc7c903f4412e3f6ce95bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>kMaxNamePart</name>
      <anchorfile>namespacemaliput_1_1drake.html</anchorfile>
      <anchor>affa3b7e9b38e1a49824ae3edfcca411f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::assert</name>
    <filename>namespacemaliput_1_1drake_1_1assert.html</filename>
    <class kind="struct">maliput::drake::assert::ConditionTraits</class>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::internal</name>
    <filename>namespacemaliput_1_1drake_1_1internal.html</filename>
    <class kind="class">maliput::drake::internal::assertion_error</class>
    <class kind="class">maliput::drake::internal::FNV1aHasher</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher&lt; N, Ns... &gt;</class>
    <class kind="struct">maliput::drake::internal::IntPackHasher&lt;&gt;</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher&lt; A, B... &gt;</class>
    <class kind="struct">maliput::drake::internal::ParameterPackHasher&lt;&gt;</class>
    <class kind="struct">maliput::drake::internal::ReportUseOfTypeHash</class>
    <class kind="struct">maliput::drake::internal::ReportUseOfTypeHash&lt; T, 0 &gt;</class>
    <class kind="struct">maliput::drake::internal::type_erased_ptr</class>
    <class kind="struct">maliput::drake::internal::TypeHash</class>
    <class kind="struct">maliput::drake::internal::TypeHasher</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T, true &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T&lt; Args... &gt;, false &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasher&lt; T&lt; U, N, Ns... &gt;, false &gt;</class>
    <class kind="struct">maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter</class>
    <class kind="struct">maliput::drake::internal::TypeHasherHasNonTypeTemplateParameter&lt; T, typehasher_void_t&lt; typename T::NonTypeTemplateParameter &gt; &gt;</class>
    <class kind="struct">maliput::drake::internal::ValueHasher</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl&lt; T, false &gt;</class>
    <class kind="struct">maliput::drake::internal::ValueTraitsImpl&lt; T, true &gt;</class>
    <member kind="typedef">
      <type>std::function&lt; std::string(const type_erased_ptr &amp;)&gt;</type>
      <name>NiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a8b64ad8cc708de24f780bf02416bd18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueTraitsImpl&lt; T, std::is_copy_constructible_v&lt; T &gt; &gt;</type>
      <name>ValueTraits</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>abfac4da6c79a6441a48613034f5db4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::enable_if_t&lt; std::is_constructible_v&lt; T, Arg1, Args... &gt; &amp;&amp;!std::is_same_v&lt; T, Arg1 &gt; &amp;&amp;!std::is_same_v&lt; T &amp;, Arg1 &gt; &amp;&amp;!std::is_fundamental_v&lt; T &gt; &amp;&amp;(choose_copy==std::is_copy_constructible_v&lt; T &gt;)&gt;</type>
      <name>ValueForwardingCtorEnabled</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a6eb8034ac947af2e08653116c0f945b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref_t</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>addc190dd01303fdccea2e97490e5d800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>typehasher_void_t</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a48e25365483f81f6b6942815475a0e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Abort</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>ad2abe8136e08b5f797c53bd05f8328fa</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AssertionFailed</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a4d931b90810bf1c0017fc60634871042</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Throw</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a2fc2284f318fd605ea71cdc006537d00</anchor>
      <arglist>(const char *condition, const char *func, const char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>DrakeThrowUnlessWasUsedWithRawPointer</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a4bdcbd8e35ca94dc55c1d70da84b7c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>DrakeThrowUnlessWasUsedWithRawPointer&lt; true &gt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>ad05094dfcfee3d0bc0ede508399de0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a6172345627ca7c9e736144cc71523585</anchor>
      <arglist>(NiceTypeNamePtrOverride new_ptr_override)</arglist>
    </member>
    <member kind="function">
      <type>const NiceTypeNamePtrOverride &amp;</type>
      <name>GetNiceTypeNamePtrOverride</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a1212619fa4d8bca81de1e180172adc39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hash_template_argument_from_pretty_func</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>af079568a021f33d97623eb499843654e</anchor>
      <arglist>(const char *pretty, int which_argument, bool discard_nested, bool discard_cast, FNV1aHasher *result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ReportZeroHash</name>
      <anchorfile>namespacemaliput_1_1drake_1_1internal.html</anchorfile>
      <anchor>a12407aae7832e4556353ffbf97e03947</anchor>
      <arglist>(const std::type_info &amp;detail)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::logging</name>
    <filename>namespacemaliput_1_1drake_1_1logging.html</filename>
    <class kind="struct">maliput::drake::logging::Warn</class>
    <member kind="typedef">
      <type>spdlog::logger</type>
      <name>logger</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a9cae370466ffb304c10aebea42eca26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sink *</type>
      <name>get_dist_sink</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>ae5f4005c702178bf55523cbea71b6f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>set_log_level</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>ae4810092d5fdfca56f482a22ba061ce9</anchor>
      <arglist>(const std::string &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_pattern</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a4375c78dc51caefbb7ce65fe50098d26</anchor>
      <arglist>(const std::string &amp;pattern)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>kHaveSpdlog</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a43a4a42dcea3143d400de1575cb5758c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogLevelUnchanged</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a28b9ac97658840560d344084211ab54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogLevelHelpMessage</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>aa17788a2d3ef00dc12989d677b8b5f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *const</type>
      <name>kSetLogPatternHelpMessage</name>
      <anchorfile>namespacemaliput_1_1drake_1_1logging.html</anchorfile>
      <anchor>a9be7016e2ec3b1dafb989c8d9b91624b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::systems</name>
    <filename>namespacemaliput_1_1drake_1_1systems.html</filename>
    <namespace>maliput::drake::systems::internal</namespace>
    <namespace>maliput::drake::systems::scalar_conversion</namespace>
    <namespace>maliput::drake::systems::system_scalar_converter_internal</namespace>
    <class kind="class">maliput::drake::systems::AbstractValues</class>
    <class kind="class">maliput::drake::systems::AntiderivativeFunction</class>
    <class kind="class">maliput::drake::systems::BasicVector</class>
    <class kind="class">maliput::drake::systems::Cache</class>
    <class kind="class">maliput::drake::systems::CacheEntry</class>
    <class kind="class">maliput::drake::systems::CacheEntryValue</class>
    <class kind="class">maliput::drake::systems::CompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::Context</class>
    <class kind="class">maliput::drake::systems::ContextBase</class>
    <class kind="class">maliput::drake::systems::ContinuousState</class>
    <class kind="class">maliput::drake::systems::DenseOutput</class>
    <class kind="class">maliput::drake::systems::DependencyGraph</class>
    <class kind="class">maliput::drake::systems::DependencyTracker</class>
    <class kind="class">maliput::drake::systems::Diagram</class>
    <class kind="class">maliput::drake::systems::DiagramCompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::DiagramEventCollection</class>
    <class kind="class">maliput::drake::systems::DiscreteUpdateEvent</class>
    <class kind="class">maliput::drake::systems::DiscreteValues</class>
    <class kind="class">maliput::drake::systems::Event</class>
    <class kind="class">maliput::drake::systems::EventCollection</class>
    <class kind="class">maliput::drake::systems::EventData</class>
    <class kind="class">maliput::drake::systems::EventStatus</class>
    <class kind="class">maliput::drake::systems::ExternalSystemConstraint</class>
    <class kind="class">maliput::drake::systems::FixedInputPortValue</class>
    <class kind="class">maliput::drake::systems::HermitianDenseOutput</class>
    <class kind="class">maliput::drake::systems::InitialValueProblem</class>
    <class kind="class">maliput::drake::systems::InputPort</class>
    <class kind="class">maliput::drake::systems::InputPortBase</class>
    <class kind="class">maliput::drake::systems::IntegratorBase</class>
    <class kind="class">maliput::drake::systems::LeafCompositeEventCollection</class>
    <class kind="class">maliput::drake::systems::LeafContext</class>
    <class kind="class">maliput::drake::systems::LeafEventCollection</class>
    <class kind="class">maliput::drake::systems::LeafOutputPort</class>
    <class kind="class">maliput::drake::systems::LeafSystem</class>
    <class kind="class">maliput::drake::systems::OutputPort</class>
    <class kind="class">maliput::drake::systems::OutputPortBase</class>
    <class kind="class">maliput::drake::systems::Parameters</class>
    <class kind="class">maliput::drake::systems::PeriodicEventData</class>
    <class kind="struct">maliput::drake::systems::PeriodicEventDataComparator</class>
    <class kind="class">maliput::drake::systems::PortBase</class>
    <class kind="class">maliput::drake::systems::PublishEvent</class>
    <class kind="class">maliput::drake::systems::RungeKutta3Integrator</class>
    <class kind="class">maliput::drake::systems::ScalarDenseOutput</class>
    <class kind="class">maliput::drake::systems::ScalarInitialValueProblem</class>
    <class kind="class">maliput::drake::systems::ScalarViewDenseOutput</class>
    <class kind="class">maliput::drake::systems::State</class>
    <class kind="class">maliput::drake::systems::StepwiseDenseOutput</class>
    <class kind="class">maliput::drake::systems::Subvector</class>
    <class kind="class">maliput::drake::systems::System</class>
    <class kind="class">maliput::drake::systems::SystemBase</class>
    <class kind="class">maliput::drake::systems::SystemConstraint</class>
    <class kind="class">maliput::drake::systems::SystemConstraintBounds</class>
    <class kind="class">maliput::drake::systems::SystemOutput</class>
    <class kind="class">maliput::drake::systems::SystemScalarConverter</class>
    <class kind="struct">maliput::drake::systems::SystemTypeTag</class>
    <class kind="class">maliput::drake::systems::SystemVisitor</class>
    <class kind="class">maliput::drake::systems::UnrestrictedUpdateEvent</class>
    <class kind="struct">maliput::drake::systems::UseDefaultName</class>
    <class kind="class">maliput::drake::systems::ValueProducer</class>
    <class kind="class">maliput::drake::systems::VectorBase</class>
    <class kind="class">maliput::drake::systems::WitnessFunction</class>
    <class kind="class">maliput::drake::systems::WitnessTriggeredEventData</class>
    <member kind="typedef">
      <type>std::unordered_set&lt; TriggerType, DefaultHash &gt;</type>
      <name>TriggerTypeSet</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ac84c84e9fbb652ce19106e2f2e1f3d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class DependencyTag &gt;</type>
      <name>DependencyTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a4dead03a05139d2c4dfc0a7042a936ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class CacheTag &gt;</type>
      <name>CacheIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a06ac9ad764b14ccff79b6feb393be498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class SubsystemIndexTag &gt;</type>
      <name>SubsystemIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a72b9d4d169dbb0f1f740e1b25697e65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class InputPortTag &gt;</type>
      <name>InputPortIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>aa53feaf560f7ff6cfa4add8dc6ff0db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class OutputPortTag &gt;</type>
      <name>OutputPortIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afb427ae7d4f36f7a3cfe34eb5a3d51aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class ContinuousStateTag &gt;</type>
      <name>ContinuousStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a180dfb39dc60232f4dacf555d1ed2582</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class DiscreteStateTag &gt;</type>
      <name>DiscreteStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>acf2a50397e9fa764d32553cf98460ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class AbstractStateTag &gt;</type>
      <name>AbstractStateIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a8c3a27f43e356726f770159944adb929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class NumericParameterTag &gt;</type>
      <name>NumericParameterIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>af11369a06c5bfd3fa18acb79f85777df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class AbstractParameterTag &gt;</type>
      <name>AbstractParameterIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a86b350169906f6d5e07e9db46e36d57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeSafeIndex&lt; class SystemConstraintTag &gt;</type>
      <name>SystemConstraintIndex</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a69608eb99ec6982ed17d1ac6d3d6dce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *value)&gt;</type>
      <name>ContextConstraintCalc</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afb8f89bae1d60315dd16a46224febd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const System&lt; T &gt; &amp;, const Context&lt; T &gt; &amp;, VectorX&lt; T &gt; *value)&gt;</type>
      <name>SystemConstraintCalc</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>af67c9d8e51c043770c3cf671ba779083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TriggerType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a59b7f49353f2a99b6c22d2eaae0fe9e9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a25c2dc47991b3df171ed5192bcf70390">kUnknown</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a1800fd44ac807b793ceba2dd9cef1e25">kInitialization</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9af8ece195be5dd5e820bdeee7ad21a4bf">kForced</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a4ee52a6184757eae288c6bfaca2b3cc8">kTimed</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9aa4dadcf41a1fb6841557aad7688dc1a4">kPeriodic</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a04a6eca450c24af0269212fb90c57d9f">kPerStep</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a59b7f49353f2a99b6c22d2eaae0fe9e9a74e1dac7f98f52df26d510f93c36ae34">kWitness</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PortDataType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kVectorValued</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbea8224a2a2efb09b6189f8fd5a42c8ce52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAbstractValued</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ae516fceb67f15f61c7a232b9cc483fbeaf2203e0344f142b8e294a1bf4546a94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InputPortSelection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a5484375bdbfb17f525cd2ed396d747f9</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a5484375bdbfb17f525cd2ed396d747f9a757e9aed460a5351e83462b6ac3e8627">kNoInput</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a5484375bdbfb17f525cd2ed396d747f9ae969b88961b5a19a96fee66796e8d713">kUseFirstInputIfItExists</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputPortSelection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a00432489001229d1f63cb6d373403a6e</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a00432489001229d1f63cb6d373403a6ea04b33f9fae5ed24fc651a8d4be9d9041">kNoOutput</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="a00432489001229d1f63cb6d373403a6ea2e0016ab225d09e0af0e4648992d8be5">kUseFirstOutputIfItExists</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SystemConstraintType</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>aae3110b50a7cad6f8b6d2842f2177e0f</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="aae3110b50a7cad6f8b6d2842f2177e0fa24f3db88d378f692d6d4de3357ccfce7">kEquality</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="aae3110b50a7cad6f8b6d2842f2177e0faad3bf38271b2a03f735e67b88923c432">kInequality</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WitnessFunctionDirection</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>afe8fe136944074e97f02b7e3835347b3</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3a35c3ace1970663a16e5c65baa5941b13">kNone</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3acf58431ee9a2c159a03fbfb7721eebd7">kPositiveThenNonPositive</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3a6ccaf3b73e3536490f4d0145731c89d0">kNegativeThenNonNegative</enumvalue>
      <enumvalue file="namespacemaliput_1_1drake_1_1systems.html" anchor="afe8fe136944074e97f02b7e3835347b3ae2ea39b7ef80705cf65b9c6497eb2705">kCrossesZero</enumvalue>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>ad3ab18736569164bfe5881a6fc0766cc</anchor>
      <arglist>(std::ostream &amp;os, const Context&lt; T &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a4ba45fb3311523dc50e8584613342709</anchor>
      <arglist>(const std::variant&lt; std::string, UseDefaultName &gt; &amp;value, const UseDefaultName &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a0542bdd2e1249b13a80ca7dcf25b3efd</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr UseDefaultName</type>
      <name>kUseDefaultName</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems.html</anchorfile>
      <anchor>a399dec16d9f072ee3a256c35ba3379fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::systems::internal</name>
    <filename>namespacemaliput_1_1drake_1_1systems_1_1internal.html</filename>
    <class kind="class">maliput::drake::systems::internal::AbstractValueCloner</class>
    <class kind="class">maliput::drake::systems::internal::ContextBaseFixedInputAttorney</class>
    <class kind="class">maliput::drake::systems::internal::ContextMessageInterface</class>
    <class kind="class">maliput::drake::systems::internal::FrameworkFactory</class>
    <class kind="class">maliput::drake::systems::internal::ModelValues</class>
    <class kind="struct">maliput::drake::systems::internal::OutputPortPrerequisite</class>
    <class kind="class">maliput::drake::systems::internal::SystemBaseContextBaseAttorney</class>
    <class kind="class">maliput::drake::systems::internal::SystemMessageInterface</class>
    <class kind="class">maliput::drake::systems::internal::SystemParentServiceInterface</class>
    <class kind="class">maliput::drake::systems::internal::ValueToAbstractValue</class>
    <class kind="class">maliput::drake::systems::internal::ValueToVectorValue</class>
    <member kind="typedef">
      <type>maliput::drake::Identifier&lt; class SystemIdTag &gt;</type>
      <name>SystemId</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>ac417892f49eceb6d6e67d94df23660d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuiltInTicketNumbers</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNothingTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea727e5b20adccc1bd45df56920f351bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kTimeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea8115f823b96150e514add0e2feadda9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAccuracyTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea5ee3621c4f779bbadd2e24f7878723f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kQTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea5211f3f6e7cb51b9e5fd7378d29f6830</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kVTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea48e6c042dc5b59be7a69410b8d0eb279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kZTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eadabb145a1bd052caf13b3b54c2c65079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXcTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea8ec1db3f5b1b3903b43dd2df6b147279</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXdTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaeb3f7df9806234d39f6b104c0c27ef80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXaTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea3d127356c74ec5c89bfe7717e31d4d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea3fa43c14b1b0d8264b0dea71f7d0d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPnTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea063e6236b1564f06d39fb3609455d530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPaTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea15122205bbe5a2ac1c6418f2ab0ef483</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllParametersTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea81bbdcd5a588bbccd9459c1f0b4af988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllSourcesExceptInputPortsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ead2f5612e2d497dae86d51bc3cfb061b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllInputPortsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea72ac9945c711a5e87225d03b1cfc4abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kAllSourcesTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea6c690fbafaf400c6c10bf210503cf9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kConfigurationTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea59cf6c2daacaec9c6240e9b06aad7c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kKinematicsTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea2a0c6b4a41b7efcac0a563afb0f3feea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kLastSourceTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaece313a8e7f5b71aab820f0d46305859</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kXcdotTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea99f1a02f4663c0b2289714ce873238b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea95012084c0003b6a6c1adbc3cc4d8f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kKeTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eaa8e569dbccb37d2ee44ad80e846756ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPcTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea22ece8eee6bbc68d897af7a725a7c0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kPncTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611ea0dbb64c766ecb996a6e62410ab44f5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kNextAvailableTicket</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a6143396ef062aba2cec910abc46d611eab396b4df06d0f55e1bba5076f60cd369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>ExtractDoublesOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>aa6290a54f7f62aa23b15443bddca69cb</anchor>
      <arglist>(const std::vector&lt; S &gt; &amp;input_vector)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; MatrixX&lt; double &gt; &gt;</type>
      <name>ExtractDoublesOrThrow</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a73a540b9f78fe10f628e483044a354ae</anchor>
      <arglist>(const std::vector&lt; MatrixX&lt; S &gt;&gt; &amp;input_vector)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; U * &gt;</type>
      <name>Unpack</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a805ce567f4a99c1e8b1200f8954bbe2c</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; U &gt;&gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNonNull</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>aaa0eb91d774ef6ed715ddff6ca1e36fe</anchor>
      <arglist>(const std::vector&lt; PtrType &gt; &amp;pointers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckBasicVectorInvariants</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a32cecb4ef6698dd9aed5fffa9eb5852b</anchor>
      <arglist>(const BasicVector&lt; T &gt; *basic_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckVectorValueInvariants</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a5eb403ea3ef3d8ea620d5d49aa07fc87</anchor>
      <arglist>(const AbstractValue *abstract_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable_helper</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a7f75260709ae2e75a3742a1b3242a84f</anchor>
      <arglist>(decltype(std::declval&lt; Eigen::Ref&lt; ValueType &gt;&gt;(), int()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable_helper</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a60e000d29c31065409637d315a5ef03e</anchor>
      <arglist>(char)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>is_eigen_refable</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1internal.html</anchorfile>
      <anchor>a4a9091f2afeb9b96551c86ffbf9aa044</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::systems::scalar_conversion</name>
    <filename>namespacemaliput_1_1drake_1_1systems_1_1scalar__conversion.html</filename>
    <class kind="struct">maliput::drake::systems::scalar_conversion::FromDoubleTraits</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::Traits</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::ValueConverter</class>
    <class kind="struct">maliput::drake::systems::scalar_conversion::ValueConverter&lt; T, T &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::systems::system_scalar_converter_internal</name>
    <filename>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</filename>
    <member kind="function">
      <type>void</type>
      <name>ThrowConversionMismatch</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>a58fc1e5b73e8984223896941082295a1</anchor>
      <arglist>(const std::type_info &amp;s_t_info, const std::type_info &amp;s_u_info, const std::type_info &amp;other_info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; System&lt; T &gt; &gt;</type>
      <name>Make</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>aa03a4a2cb1a25beafff1998b78d29f4c</anchor>
      <arglist>(const System&lt; U &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ThrowConversionMismatch</name>
      <anchorfile>namespacemaliput_1_1drake_1_1systems_1_1system__scalar__converter__internal.html</anchorfile>
      <anchor>aea629ffdae88fdc0e82b15eb44a3ce89</anchor>
      <arglist>(const type_info &amp;s_t_info, const type_info &amp;s_u_info, const type_info &amp;other_info)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::drake::trajectories</name>
    <filename>namespacemaliput_1_1drake_1_1trajectories.html</filename>
    <class kind="class">maliput::drake::trajectories::PiecewisePolynomial</class>
    <class kind="class">maliput::drake::trajectories::PiecewiseTrajectory</class>
    <class kind="class">maliput::drake::trajectories::Trajectory</class>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sign</name>
      <anchorfile>namespacemaliput_1_1drake_1_1trajectories.html</anchorfile>
      <anchor>a415865b14a58e08d64ed3c7d90011727</anchor>
      <arglist>(T val, T tol)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::geometry_base</name>
    <filename>namespacemaliput_1_1geometry__base.html</filename>
    <namespace>maliput::geometry_base::test</namespace>
    <class kind="class">maliput::geometry_base::BranchPoint</class>
    <class kind="class">maliput::geometry_base::BruteForceStrategy</class>
    <class kind="class">maliput::geometry_base::Junction</class>
    <class kind="class">maliput::geometry_base::KDTreeStrategy</class>
    <class kind="class">maliput::geometry_base::Lane</class>
    <class kind="class">maliput::geometry_base::LaneEndSet</class>
    <class kind="class">maliput::geometry_base::RoadGeometry</class>
    <class kind="class">maliput::geometry_base::Segment</class>
    <class kind="class">maliput::geometry_base::StrategyBase</class>
    <member kind="function">
      <type>std::vector&lt; maliput::api::RoadPositionResult &gt;</type>
      <name>BruteForceFindRoadPositionsStrategy</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>ab608c7a16c9d4364c164504cd1fe00e9</anchor>
      <arglist>(const maliput::api::RoadGeometry *rg, const maliput::api::InertialPosition &amp;inertial_position, double radius)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; api::RoadPositionResult &gt;</type>
      <name>FilterRoadPositionResults</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a6526fab630ce68db4883df8c4f8afe9e</anchor>
      <arglist>(const std::vector&lt; api::RoadPositionResult &gt; &amp;road_position_results, const std::function&lt; bool(const api::RoadPositionResult &amp;)&gt; &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsNewRoadPositionResultCloser</name>
      <anchorfile>namespacemaliput_1_1geometry__base.html</anchorfile>
      <anchor>a099609a21db549b19f38eb51ff83cdda</anchor>
      <arglist>(const maliput::api::RoadPositionResult &amp;new_road_position_result, const maliput::api::RoadPositionResult &amp;road_position_result)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::geometry_base::test</name>
    <filename>namespacemaliput_1_1geometry__base_1_1test.html</filename>
    <class kind="class">maliput::geometry_base::test::MockBranchPoint</class>
    <class kind="class">maliput::geometry_base::test::MockJunction</class>
    <class kind="class">maliput::geometry_base::test::MockLane</class>
    <class kind="class">maliput::geometry_base::test::MockRoadGeometry</class>
    <class kind="class">maliput::geometry_base::test::MockSegment</class>
  </compound>
  <compound kind="namespace">
    <name>maliput::math</name>
    <filename>namespacemaliput_1_1math.html</filename>
    <namespace>maliput::math::details</namespace>
    <class kind="class">maliput::math::AxisAlignedBox</class>
    <class kind="class">maliput::math::BoundingBox</class>
    <class kind="class">maliput::math::BoundingRegion</class>
    <class kind="class">maliput::math::KDTree</class>
    <class kind="class">maliput::math::KDTree3D</class>
    <class kind="class">maliput::math::Matrix</class>
    <class kind="class">maliput::math::Quaternion</class>
    <class kind="class">maliput::math::RollPitchYaw</class>
    <class kind="class">maliput::math::Vector</class>
    <class kind="class">maliput::math::Vector2</class>
    <class kind="class">maliput::math::Vector3</class>
    <class kind="class">maliput::math::Vector4</class>
    <class kind="class">maliput::math::VectorBase</class>
    <member kind="typedef">
      <type>Matrix&lt; 2 &gt;</type>
      <name>Matrix2</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac6bd2b15c356618c3c5ccba30dacfffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a817bdcb2b7e2c17fc4781e72ba6abe37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; 4 &gt;</type>
      <name>Matrix4</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1d79dac56e52511791f446a46b160358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CompareType</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>afbc5396d9a88c41d6aeb522b9f06f426</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="afbc5396d9a88c41d6aeb522b9f06f426abab0767e88027de9944aa55c24c8387a">kAbsolute</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="afbc5396d9a88c41d6aeb522b9f06f426af460a96ab20647996c15854794763384">kRelative</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OverlappingType</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>af6022ec3177e3ba16073ae84ccfb5b61</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a026931af6058f84edf6f23b727936e46">kDisjointed</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a8bf5940d983d36987f4a41691ea1d562">kIntersected</enumvalue>
      <enumvalue file="namespacemaliput_1_1math.html" anchor="af6022ec3177e3ba16073ae84ccfb5b61a37909e88ded01d78663d301fa3454166">kContained</enumvalue>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::VectorBase&lt; N, Derived &gt; &gt;</type>
      <name>CompareVectors</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a47b0c922c564c1155b1d36e5b7f7b9d3</anchor>
      <arglist>(const math::VectorBase&lt; N, Derived &gt; &amp;v1, const math::VectorBase&lt; N, Derived &gt; &amp;v2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; math::Matrix&lt; N &gt; &gt;</type>
      <name>CompareMatrices</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a656c890f9af05404d925f2fd52324beb</anchor>
      <arglist>(const math::Matrix&lt; N &gt; &amp;m1, const math::Matrix&lt; N &gt; &amp;m2, double tolerance=0.0, CompareType compare_type=CompareType::kAbsolute)</arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a4b9dbb2c9b19248a0c0cc41377fff759</anchor>
      <arglist>(const Matrix&lt; N &gt; &amp;matrix, const VectorBase&lt; N, Derived &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator|</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a83bfe484e76b37ad9cc57ed9bd714b79</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
    <member kind="function">
      <type>OverlappingType</type>
      <name>operator&amp;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a188960295ec6a52f2477c6e0bb5984b6</anchor>
      <arglist>(const OverlappingType &amp;first, const OverlappingType &amp;second)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2da180d301577cd15c3869079ae73256</anchor>
      <arglist>(std::ostream &amp;os, const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>saturate</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac8f73efa4810c92b9580ccbba3c76f45</anchor>
      <arglist>(double x, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a13669483b3a7be521d987bfdf00ef1fb</anchor>
      <arglist>(const Matrix&lt; N_ &gt; &amp;matrix, double k)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; N_ &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ae8b1bb89a0507f25c44b757bd01ab4cd</anchor>
      <arglist>(double k, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a989bf25588fe874c9ed33a3a27c7ab9d</anchor>
      <arglist>(std::ostream &amp;os, const Matrix&lt; N_ &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ab98da75bc6981cbd21c7eafbce227aa3</anchor>
      <arglist>(const Matrix&lt; 2 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a62d15c272c19e24cdb8a982e95bf4b2a</anchor>
      <arglist>(const Matrix&lt; 3 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1539d89a706f7476c4b9f786d6bf73ae</anchor>
      <arglist>(const Matrix&lt; 4 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>af25133585627e0335da135b67f4e2608</anchor>
      <arglist>(double, const Matrix&lt; 2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>aee1ded5e873f565353f2f8ed92c5aadd</anchor>
      <arglist>(double, const Matrix&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0883207d0e897aa140ebbd45279d5f5b</anchor>
      <arglist>(double, const Matrix&lt; 4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5d963db5cad448e261bf51f9cc328432</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a589ca39b935f419ebca26a66c0375964</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3ea4a252f70f5399431b2948be666324</anchor>
      <arglist>(std::ostream &amp;, const Matrix&lt; 4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ac6789e79b401dd29df8457355ccbc212</anchor>
      <arglist>(const Matrix&lt; 2 &gt; &amp;matrix, const VectorBase&lt; 2, Vector2 &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2ae7a17a845c51370274f36d3db91581</anchor>
      <arglist>(const Matrix&lt; 3 &gt; &amp;matrix, const VectorBase&lt; 3, Vector3 &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a6ede92b63ec8d483e276fdf9a52cb639</anchor>
      <arglist>(const Matrix&lt; 4 &gt; &amp;matrix, const VectorBase&lt; 4, Vector4 &gt; vector)</arglist>
    </member>
    <member kind="function">
      <type>Derived_</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a05f7955ffcc5c4a3c6d9e1443415ef4f</anchor>
      <arglist>(const VectorBase&lt; N_, Derived_ &gt; &amp;vector, double scalar)</arglist>
    </member>
    <member kind="function">
      <type>Derived_</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3e202389cc39bb64644e3c75de6ab322</anchor>
      <arglist>(double scalar, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>afd8de5de8781324ef4d16ef3e2ebf380</anchor>
      <arglist>(std::ostream &amp;os, const VectorBase&lt; N_, Derived_ &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a08d83c909fb4ef9b01020607b733496b</anchor>
      <arglist>(const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0cfca9bbf711d2a4b884406aa2b0112c</anchor>
      <arglist>(double, const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5bce5fb861e0ba7ba94954c537e75dce</anchor>
      <arglist>(const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 2 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a562a7b7e9dc9b3f83b1f9f3a080fd16e</anchor>
      <arglist>(double, const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0674a5a283777ab89c6f44acbdca6225</anchor>
      <arglist>(const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 3 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>aaede2f6113713dbe1ad5dfcfa1e0233c</anchor>
      <arglist>(double, const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a1114542e4ad020b7388d55bd0c806c53</anchor>
      <arglist>(const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector&lt; 4 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a97dfdc8230fcdcc7191e0b7d09b14752</anchor>
      <arglist>(double, const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a84c3541718c9b76bc12207226c422717</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 1, Vector&lt; 1 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a27dd5d0d6632645ef982bd0e3155881f</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 2, Vector&lt; 2 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a64780b3de4eead0bfa4651443fb2a888</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 3, Vector&lt; 3 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0ae0facd6fc4d00cb3335b0d617e44ee</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 4, Vector&lt; 4 &gt;&gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a3a15d4f129c4609256f2221117f33051</anchor>
      <arglist>(const VectorBase&lt; 2, Vector2 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector2</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a5275976c5116b7d9062b6fb96a1ea6b3</anchor>
      <arglist>(double, const VectorBase&lt; 2, Vector2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ae24f95e8c5b64e5f3ded11172c14655b</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 2, Vector2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a9b660d868269fa12f2822f39771fe88e</anchor>
      <arglist>(const VectorBase&lt; 3, Vector3 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector3</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a70532231622d0409ce6a01b33d17dc5e</anchor>
      <arglist>(double, const VectorBase&lt; 3, Vector3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a2dd290ef0bec4e66539731b5fc90e15f</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 3, Vector3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a0e45c8d235558ae11a03e3b136051c27</anchor>
      <arglist>(const VectorBase&lt; 4, Vector4 &gt; &amp;, double)</arglist>
    </member>
    <member kind="function">
      <type>template Vector4</type>
      <name>operator*</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>ab6528d45adc6279f314a69b208fe171f</anchor>
      <arglist>(double, const VectorBase&lt; 4, Vector4 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1math.html</anchorfile>
      <anchor>a62d65b4338247ad0def225774ddcc0e7</anchor>
      <arglist>(std::ostream &amp;, const VectorBase&lt; 4, Vector4 &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::math::details</name>
    <filename>namespacemaliput_1_1math_1_1details.html</filename>
    <class kind="class">maliput::math::details::KDTreeBase</class>
    <class kind="class">maliput::math::details::Node</class>
    <class kind="struct">maliput::math::details::NodeCmp</class>
    <class kind="struct">maliput::math::details::SquaredDistance</class>
    <member kind="function">
      <type>Node *</type>
      <name>MakeKdTree</name>
      <anchorfile>namespacemaliput_1_1math_1_1details.html</anchorfile>
      <anchor>a24b1dbed2e474a1ac1df591e550d82a9</anchor>
      <arglist>(std::size_t begin, std::size_t end, std::size_t index, std::deque&lt; Node &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Initialize3dRegions</name>
      <anchorfile>namespacemaliput_1_1math_1_1details.html</anchorfile>
      <anchor>abedeb4d44105f736c5a90a959abc6a01</anchor>
      <arglist>(bool left, Node *node)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::plugin</name>
    <filename>namespacemaliput_1_1plugin.html</filename>
    <class kind="class">maliput::plugin::MaliputPlugin</class>
    <class kind="class">maliput::plugin::MaliputPluginManager</class>
    <class kind="class">maliput::plugin::RoadNetworkLoader</class>
    <member kind="typedef">
      <type>void *</type>
      <name>RoadNetworkLoaderPtr</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>ab0a6280bfa379d2f6330517355866c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MaliputPluginType</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a2afd58b120b90956eefe0e19727605d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>kRoadNetworkLoader</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a2afd58b120b90956eefe0e19727605d7a8adc28f8c40a859b0b10d73151f70794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::api::RoadNetwork &gt;</type>
      <name>CreateRoadNetwork</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a995734bfcb7af87c6f7dc4fc81bbd11b</anchor>
      <arglist>(const std::string &amp;road_network_loader_id, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; maliput::plugin::RoadNetworkLoader &gt;</type>
      <name>MakeRoadNetworkLoader</name>
      <anchorfile>namespacemaliput_1_1plugin.html</anchorfile>
      <anchor>a4d44dfc15ed8c612a7a803b0033b6a80</anchor>
      <arglist>(const std::string &amp;road_network_loader_id)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::routing</name>
    <filename>namespacemaliput_1_1routing.html</filename>
    <class kind="class">maliput::routing::Phase</class>
    <class kind="struct">maliput::routing::PhasePositionResult</class>
    <class kind="class">maliput::routing::Route</class>
    <class kind="struct">maliput::routing::RoutePositionResult</class>
    <class kind="class">maliput::routing::Router</class>
    <class kind="struct">maliput::routing::RoutingConstraints</class>
    <member kind="enumeration">
      <type></type>
      <name>LaneSRangeRelation</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a931f81ae3bf7bb2ac7b8924345c23487</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a8127ca1af560889a3ac6d157536c0260">kAdjacentLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2873b3a4083e3b17116552c3fc59339d">kAdjacentRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2d5fde1d924910a2a01ecd8e70a87c28">kLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a2dd2b017192f8a09367d48c7648213c9">kRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a70676032033802d83400fd58143a0150">kSucceedingStraight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487afb05f716bf1f96c5934650f7bcf5bf6d">kSucceedingLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a33e3c4bfa5ec00700febf00173f8dbe2">kSucceedingRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a4d8f12238683b00b95720e5bb005f441">kPreceedingStraight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487aebdee03e4e3c279ee9cc77c219ea9681">kPreceedingLeft</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a64b34efaab13831e11d205386a98b819">kPreceedingRight</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a8bd83ac691f94854afe5a9d6c578aa15">kCoincident</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a9556e04cf8f24d118180ebc0615fbf83">kUnrelated</enumvalue>
      <enumvalue file="namespacemaliput_1_1routing.html" anchor="a931f81ae3bf7bb2ac7b8924345c23487a25c2dc47991b3df171ed5192bcf70390">kUnknown</enumvalue>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; PhasePositionResult &gt;</type>
      <name>IsPhasePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>aa8d966c064b4aa0db718eb9b30eba3b7</anchor>
      <arglist>(const PhasePositionResult &amp;ppr_a, const PhasePositionResult &amp;ppr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>common::ComparisonResult&lt; RoutePositionResult &gt;</type>
      <name>IsRoutePositionResultClose</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a6f39ff2a2a1cc054cd36b637f5db86b2</anchor>
      <arglist>(const RoutePositionResult &amp;rpr_a, const RoutePositionResult &amp;rpr_b, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; api::LaneSRoute &gt;</type>
      <name>DeriveLaneSRoutes</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a50450cdc6c1aefc360378b2dd8e7cafd</anchor>
      <arglist>(const api::RoadPosition &amp;start, const api::RoadPosition &amp;end, double max_length_m)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; const maliput::api::Lane * &gt; &gt;</type>
      <name>FindLaneSequences</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>ae879accab23fdc7d64d39657fd67025c</anchor>
      <arglist>(const maliput::api::Lane *start, const maliput::api::Lane *end, double max_length_m)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; LaneSRangeRelation, const char * &gt;</type>
      <name>LaneSRangeRelationMapper</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a2ff489426594d0e27de889f6cf0d93b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a7203627c4fa2cac6b579928ec5d20404</anchor>
      <arglist>(std::ostream &amp;os, const LaneSRangeRelation &amp;relation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ValidatePositionIsInLaneSRanges</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>acb6529f573444cfd3ee09f9340d5cfb3</anchor>
      <arglist>(const maliput::api::RoadPosition &amp;position, const std::vector&lt; api::LaneSRange &gt; &amp;lane_s_ranges, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ValidateRoutingConstraints</name>
      <anchorfile>namespacemaliput_1_1routing.html</anchorfile>
      <anchor>a3604feb52a6ed523000b97c0033d6c5e</anchor>
      <arglist>(const RoutingConstraints &amp;routing_constraints)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::utility</name>
    <filename>namespacemaliput_1_1utility.html</filename>
    <namespace>maliput::utility::mesh</namespace>
    <class kind="struct">maliput::utility::GenerateStringOptions</class>
    <class kind="struct">maliput::utility::Material</class>
    <class kind="struct">maliput::utility::ObjFeatures</class>
    <class kind="struct">maliput::utility::RoadGeometryMesh</class>
    <class kind="class">maliput::utility::ThreadPool</class>
    <member kind="enumeration">
      <type></type>
      <name>MaterialType</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ace55764233310da429c994a8c334b32a</anchor>
      <arglist></arglist>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa69cdd2c7900c5a4732b4bb63bea57f6c">Asphalt</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa1a79a39f343f2224748ec987ccf8431f">Lane</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa0235c996b43b3799573658df41ef82f2">Marker</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aabc1db859f95b1cf9ae1762a500298b01">HBounds</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa3acb2a2e1e894d7082864de86ec7c517">BranchPointGlow</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa2808c30979d8bed29cfb9510e8078867">GrayedAsphalt</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aafbe31e1cf45d9e5e7cbfe4e0324c5e8e">GrayedLane</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aa20096ed1364976fbca0df105e90d5072">GrayedMarker</enumvalue>
      <enumvalue file="namespacemaliput_1_1utility.html" anchor="ace55764233310da429c994a8c334b32aac68f4e6506520a1ae5f89c48dc2fcca1">Sidewalk</enumvalue>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GetSuffixFromPath</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a0886cacf31715fe4689f330fb5d75193</anchor>
      <arglist>(const std::string &amp;filepath)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllFilePathsFromDirectory</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4f2a167d0c041b88c9f17711d862c12e</anchor>
      <arglist>(const std::string &amp;directory_path, const std::optional&lt; std::string &gt; &amp;ends_with_suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>GetAllPathsFromEnvironment</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab4e1ac100d64634cdc0b7b371e78f81c</anchor>
      <arglist>(const std::string &amp;env_var)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9780629dc375c449ec8e706d7676f4b0</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::LaneId &amp;lane_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a12cfa9eae3d52936290f63b837aabb49</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::BranchPointId &amp;branch_point_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; mesh::GeoMesh, Material &gt;</type>
      <name>BuildMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a93ca25bfba14b89a8d85e0a3374f654b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features, const api::SegmentId &amp;segment_id, const MaterialType &amp;mesh_material)</arglist>
    </member>
    <member kind="function">
      <type>RoadGeometryMesh</type>
      <name>BuildRoadGeometryMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a4ff7b1560f5a8cf9ead581e66309863b</anchor>
      <arglist>(const api::RoadGeometry *rg, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>aab65cc74152ea2c0855bf16945913786</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::pair&lt; mesh::GeoMesh, Material &gt; &gt;</type>
      <name>BuildMeshes</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>ab832955c27b822412b9639fcd4603225</anchor>
      <arglist>(const api::RoadNetwork *road_network, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a9ca0996b95b162407ed432e9a41718b2</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateObjFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a754ea2bbcc2ae639a1b0845eff81e416</anchor>
      <arglist>(const api::RoadNetwork *road_network, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>const Material &amp;</type>
      <name>GetMaterialByName</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>abc52bcf921c4bad34d52a6a7ab2ef42f</anchor>
      <arglist>(const std::string &amp;material_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>GenerateString</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>afdb238631b276c3a1279eedb5230b66e</anchor>
      <arglist>(const api::RoadGeometry &amp;road_geometry, const GenerateStringOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GenerateUrdfFile</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a50a9da17ca42fa31f909ba4748f8531b</anchor>
      <arglist>(const api::RoadGeometry *road_geometry, const std::string &amp;dirpath, const std::string &amp;fileroot, const ObjFeatures &amp;features)</arglist>
    </member>
    <member kind="function">
      <type>std::unordered_set&lt; const api::Segment * &gt;</type>
      <name>FindConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a407ac8e9552f10055497d8676432e300</anchor>
      <arglist>(const api::Segment *seed_segment)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unordered_set&lt; const api::Segment * &gt; &gt;</type>
      <name>AnalyzeConfluentSegments</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a477f4cdef136a1c784cd6a639b6c52b0</anchor>
      <arglist>(const api::RoadGeometry *road_geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_str</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>a1b9b7a9a7488d5d4addde728fa4ac82d</anchor>
      <arglist>(double value, int precision)</arglist>
    </member>
    <member kind="function">
      <type>Material</type>
      <name>GetMaterialFromMesh</name>
      <anchorfile>namespacemaliput_1_1utility.html</anchorfile>
      <anchor>aaffd8a62d03cb0fd748d3f3304b0306b</anchor>
      <arglist>(const MaterialType mesh_material)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>maliput::utility::mesh</name>
    <filename>namespacemaliput_1_1utility_1_1mesh.html</filename>
    <class kind="struct">maliput::utility::mesh::DirectedEdgeIndex</class>
    <class kind="struct">maliput::utility::mesh::FaceEdgeIndex</class>
    <class kind="struct">maliput::utility::mesh::FaceVertexIndex</class>
    <class kind="class">maliput::utility::mesh::GeoFace</class>
    <class kind="class">maliput::utility::mesh::GeoMesh</class>
    <class kind="class">maliput::utility::mesh::GeoNormal</class>
    <class kind="class">maliput::utility::mesh::GeoVertex</class>
    <class kind="class">maliput::utility::mesh::IndexFace</class>
    <class kind="class">maliput::utility::mesh::SrhFace</class>
    <class kind="class">maliput::utility::mesh::UniqueIndexer</class>
    <member kind="typedef">
      <type>std::unordered_map&lt; DirectedEdgeIndex, FaceEdgeIndex, maliput::common::DefaultHash &gt;</type>
      <name>InverseFaceEdgeMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a83f3d8cd29f06d414cc5fcc8a8718a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; int, std::vector&lt; FaceEdgeIndex &gt; &gt;</type>
      <name>FaceAdjacencyMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1f052e0b8f2e37cd7b5bbf88aa3f3f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DistanceToAPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>ae6e6580251dde893b43a4ed26c108ad6</anchor>
      <arglist>(const math::Vector3 n, const math::Vector3 p, const math::Vector3 q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>DistanceToALine</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a23497997c2e46655d8f921074440f7e1</anchor>
      <arglist>(const math::Vector3 &amp;p, const math::Vector3 &amp;r, const math::Vector3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a0705bc6329e73d0b7ee738ca2fd2d590</anchor>
      <arglist>(const DirectedEdgeIndex &amp;lhs, const DirectedEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a3a2ca0b552c66ea28ba0c9f83796048d</anchor>
      <arglist>(const DirectedEdgeIndex &amp;lhs, const DirectedEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_append</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a382fd642950e26e3cae0cc2c52723e8a</anchor>
      <arglist>(HashAlgorithm &amp;hasher, const DirectedEdgeIndex &amp;item) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a9a8962fcc82c75e1f6a7406773e97752</anchor>
      <arglist>(const FaceEdgeIndex &amp;lhs, const FaceEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a2265f079a1b89a718188e8a67765595f</anchor>
      <arglist>(const FaceEdgeIndex &amp;lhs, const FaceEdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>InverseFaceEdgeMap</type>
      <name>ComputeInverseFaceEdgeMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4ec9c63109996e947e543024bbe97a66</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>FaceAdjacencyMap</type>
      <name>ComputeFaceAdjacencyMap</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a78c154886288f7baff88baaa6db62187</anchor>
      <arglist>(const std::vector&lt; IndexFace &gt; &amp;faces)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexPosition</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af29781b271fd07c9369805d9d3d6b37f</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>const math::Vector3 &amp;</type>
      <name>GetMeshFaceVertexNormal</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a7f9a0114f0084b27234129f41a38b822</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace::Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>DoMeshVerticesLieOnPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a6c5db97c41ee4de1d66e82a36aabd606</anchor>
      <arglist>(const GeoMesh &amp;mesh, InputIt first, InputIt last, const math::Vector3 &amp;n, const math::Vector3 &amp;p, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFaceCoplanarWithPlane</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaf8c31be76386a45724fb375e38a890b</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, const math::Vector3 &amp;n, const math::Vector3 &amp;p, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsMeshFacePlanar</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a3c9b3b4c9e5c0a0679b51b2a6c752f88</anchor>
      <arglist>(const GeoMesh &amp;mesh, const IndexFace &amp;face, double tolerance, math::Vector3 *n, math::Vector3 *p)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; int &gt;</type>
      <name>AggregateAdjacentCoplanarMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a85f7866b6c3ed71ee6882c943b63c869</anchor>
      <arglist>(const GeoMesh &amp;mesh, int start_face_index, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance, std::set&lt; int &gt; *visited_faces_indices)</arglist>
    </member>
    <member kind="function">
      <type>FaceEdgeIndex</type>
      <name>FindOuterFaceEdgeIndex</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4941b76cb69d136a39d4ef014d6e74e2</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>ComputeMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1b2e80aea3e5eb6ba14352362220d658</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;simply_connected_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map)</arglist>
    </member>
    <member kind="function">
      <type>const IndexFace::Vertex &amp;</type>
      <name>MeshFaceVertexAt</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>af68da2fa1cf69840d3ab532a2eaca6ab</anchor>
      <arglist>(const GeoMesh &amp;mesh, const FaceVertexIndex &amp;face_vertex_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ApplyDouglasPeuckerSimplification</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a997a1a822ff6cc86c61826a852f688b8</anchor>
      <arglist>(InputIt first, InputIt last, VertexFn to_vertex, EdgeFn to_edge, double tolerance, OutputIt output)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FaceVertexIndex &gt;</type>
      <name>SimplifyMeshFacesContour</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>aaa02ac8a38e63f82760f2bb81113cdc5</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::vector&lt; FaceVertexIndex &gt; &amp;contour_indices, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoFace</type>
      <name>MergeMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a4597a0b90338ac00cd3da265c0cd852a</anchor>
      <arglist>(const GeoMesh &amp;mesh, const std::set&lt; int &gt; &amp;mergeable_faces_indices, const FaceAdjacencyMap &amp;adjacent_faces_map, double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>GeoMesh</type>
      <name>SimplifyMeshFaces</name>
      <anchorfile>namespacemaliput_1_1utility_1_1mesh.html</anchorfile>
      <anchor>a1a072cc288bb47405029aed3f5e95134</anchor>
      <arglist>(const GeoMesh &amp;input_mesh, double tolerance)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>YAML</name>
    <filename>namespace_y_a_m_l.html</filename>
    <class kind="struct">YAML::convert&lt; maliput::api::SRange &gt;</class>
  </compound>
  <compound kind="group">
    <name>default_scalars</name>
    <title>Default Scalars</title>
    <filename>group__default__scalars.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gad69d96bfd76d7750f2d40ebe0a546b3c</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>gab6234c37b7596964a364d799933f4a17</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3a791089d1bcf2fe7724f81ebc0a79e0</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga6333534b3097a37c55fbacf434491e2e</anchor>
      <arglist>(SomeType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga3273477e81e9dcb7d96cfb28382798b6</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DRAKE_DEFINE_FUNCTION_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_NONSYMBOLIC_SCALARS</name>
      <anchorfile>group__default__scalars.html</anchorfile>
      <anchor>ga9f6a41d03cbe6efaef098ae88ccbed6e</anchor>
      <arglist>(FunctionPointersTuple)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hash_append</name>
    <title>hash_append generic hashing</title>
    <filename>group__hash__append.html</filename>
  </compound>
  <compound kind="group">
    <name>simulation</name>
    <title>Simulation</title>
    <filename>group__simulation.html</filename>
    <subgroup>integrators</subgroup>
  </compound>
  <compound kind="group">
    <name>integrators</name>
    <title>Integrators</title>
    <filename>group__integrators.html</filename>
    <class kind="class">maliput::drake::systems::IntegratorBase</class>
    <class kind="class">maliput::drake::systems::RungeKutta3Integrator</class>
    <docanchor file="group__integrators.html" title="Integrator selection">integrator-selection</docanchor>
    <docanchor file="group__integrators.html" title="Integrator settings">settings</docanchor>
    <docanchor file="group__integrators.html" title="Dense sampling (interpolation)">dense-sampling</docanchor>
    <docanchor file="group__integrators.html" title="References">references</docanchor>
  </compound>
  <compound kind="group">
    <name>cache_design_notes</name>
    <title>System Cache Design and Implementation Notes</title>
    <filename>group__cache__design__notes.html</filename>
    <docanchor file="group__cache__design__notes.html">cache_design_goals</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_architecture</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_value_sources</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_output_ports</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_input_ports</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_known_computations</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_declaring</docanchor>
    <docanchor file="group__cache__design__notes.html">predefined_dependency_tickets</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_handling_composite_trackers</docanchor>
    <docanchor file="group__cache__design__notes.html">caching_implementation_for_diagrams</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_trackers_figure</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_implementation</docanchor>
    <docanchor file="group__cache__design__notes.html">cache_design_loose_ends</docanchor>
  </compound>
  <compound kind="group">
    <name>events_description</name>
    <title>System Events</title>
    <filename>group__events__description.html</filename>
    <docanchor file="group__events__description.html">event_glossary</docanchor>
  </compound>
  <compound kind="group">
    <name>event_callbacks</name>
    <title>Event Callbacks</title>
    <filename>group__event__callbacks.html</filename>
  </compound>
  <compound kind="group">
    <name>system_compatibility</name>
    <title>System Compatibility</title>
    <filename>group__system__compatibility.html</filename>
  </compound>
  <compound kind="group">
    <name>system_scalar_conversion</name>
    <title>System Scalar Conversion</title>
    <filename>group__system__scalar__conversion.html</filename>
    <docanchor file="group__system__scalar__conversion.html">system_scalar_conversion_how_to_write_a_system</docanchor>
  </compound>
  <compound kind="group">
    <name>systems</name>
    <title>Systems</title>
    <filename>group__systems.html</filename>
    <subgroup>events_description</subgroup>
    <subgroup>primitive_systems</subgroup>
    <subgroup>control_systems</subgroup>
    <subgroup>estimator_systems</subgroup>
    <subgroup>sensor_systems</subgroup>
    <subgroup>manipulation_systems</subgroup>
    <subgroup>message_passing</subgroup>
    <subgroup>multibody_systems</subgroup>
    <subgroup>perception_systems</subgroup>
    <subgroup>discrete_systems</subgroup>
    <subgroup>stochastic_systems</subgroup>
    <subgroup>visualization</subgroup>
    <subgroup>example_systems</subgroup>
  </compound>
  <compound kind="group">
    <name>primitive_systems</name>
    <title>Primitives</title>
    <filename>group__primitive__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>control_systems</name>
    <title>Controllers</title>
    <filename>group__control__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>estimator_systems</name>
    <title>Estimators</title>
    <filename>group__estimator__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>sensor_systems</name>
    <title>Sensors</title>
    <filename>group__sensor__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>manipulation_systems</name>
    <title>Manipulation</title>
    <filename>group__manipulation__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>message_passing</name>
    <title>Message Passing</title>
    <filename>group__message__passing.html</filename>
  </compound>
  <compound kind="group">
    <name>multibody_systems</name>
    <title>Multibody Systems</title>
    <filename>group__multibody__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>perception_systems</name>
    <title>Perception</title>
    <filename>group__perception__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>discrete_systems</name>
    <title>Discrete Systems</title>
    <filename>group__discrete__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>stochastic_systems</name>
    <title>Stochastic Systems</title>
    <filename>group__stochastic__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>visualization</name>
    <title>Visualization</title>
    <filename>group__visualization.html</filename>
  </compound>
  <compound kind="group">
    <name>example_systems</name>
    <title>Examples</title>
    <filename>group__example__systems.html</filename>
  </compound>
  <compound kind="group">
    <name>levelmethods</name>
    <title>Logging Level Methods.</title>
    <filename>group__levelmethods.html</filename>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gaad76e8446fb03a2f45e502092d96a376</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gae99b323afab58fbf83f92c6d679e1276</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>info</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gaca46af6ad7e486edceb7ad7752f02d6a</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warn</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>gad70e2d016bdb487c04f8299fe395d42e</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>ga899f1968fcde75e69f00e0053e8a9e9d</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>critical</name>
      <anchorfile>group__levelmethods.html</anchorfile>
      <anchor>ga1a9b8a013bffc28ce8587b34e653ff7f</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>constcoeffgettersquaternion</name>
    <title>Constant coefficient getters of Quaternion.</title>
    <filename>group__constcoeffgettersquaternion.html</filename>
  </compound>
  <compound kind="group">
    <name>mutablecoeffgettersquaternion</name>
    <title>Mutable coefficient getters of Quaternion.</title>
    <filename>group__mutablecoeffgettersquaternion.html</filename>
  </compound>
  <compound kind="page">
    <name>maliput_design</name>
    <title>Maliput Design</title>
    <filename>maliput_design</filename>
    <docanchor file="maliput_design.html" title="Modeling Road Networks for Simulation">modeling_road_networks_for_simulation</docanchor>
    <docanchor file="maliput_design.html" title="Objectives">objectives</docanchor>
    <docanchor file="maliput_design.html" title="Road Network Geometry">road_network_goemetry</docanchor>
    <docanchor file="maliput_design.html" title="Geometry Model">geometry_model</docanchor>
    <docanchor file="maliput_design.html" title="Overview">overview</docanchor>
    <docanchor file="maliput_design.html" title="Scale Length and Tolerances">scale_length_and_tolerances</docanchor>
    <docanchor file="maliput_design.html" title="Inertial-frame versus Lane-frame">inertial_frame_versus_lane_frame</docanchor>
    <docanchor file="maliput_design.html" title="Lanes as Lanes">lanes_as_lanes</docanchor>
    <docanchor file="maliput_design.html" title="Lanes Joined End-to-End via BranchPoints">lanes_joined_via_branchpoints</docanchor>
    <docanchor file="maliput_design.html" title="Adjacent Lanes Grouped into Segments">adjacent_lanes_grouped_into_segments</docanchor>
    <docanchor file="maliput_design.html" title="Intersecting Segments Grouped into Junction">intersecting_segments_grouped_into_junctions</docanchor>
    <docanchor file="maliput_design.html" title="Abstract Geometry API: RoadGeometry">abstract_geometry_api_roadgeometry</docanchor>
    <docanchor file="maliput_design.html" title="Basic Types">basic_types</docanchor>
    <docanchor file="maliput_design.html" title="RoadGeometry">roadgeometry</docanchor>
    <docanchor file="maliput_design.html" title="Junction">junction</docanchor>
    <docanchor file="maliput_design.html" title="Segment">segment</docanchor>
    <docanchor file="maliput_design.html" title="Lane">lane</docanchor>
    <docanchor file="maliput_design.html" title="BranchPoints">branchpoints</docanchor>
    <docanchor file="maliput_design.html" title="Rules and Features Databases">rules_and_features_databases</docanchor>
    <docanchor file="maliput_design.html" title="Rules of the Road: RoadRulebook">rules_of_the_road</docanchor>
    <docanchor file="maliput_design.html">road-rulebook-outline_img</docanchor>
    <docanchor file="maliput_design.html" title="New Rule API description">new_rules_types</docanchor>
    <docanchor file="maliput_design.html" title="Common rule types and their implementations">new_rule_common_types</docanchor>
    <docanchor file="maliput_design.html" title="Common Region Entities">common_region_entities</docanchor>
    <docanchor file="maliput_design.html" title="Queries to the &lt;tt&gt;RoadRulebook&lt;/tt&gt;">roadrulebook_queries</docanchor>
    <docanchor file="maliput_design.html" title="[DEPRECATED] Old rule API">deprecated_rule_api</docanchor>
    <docanchor file="maliput_design.html" title="SpeedLimitRule: Speed Limits">speed_limit_rules</docanchor>
    <docanchor file="maliput_design.html" title="RightOfWayRule: Stopping and Yielding">right_of_way_rule</docanchor>
    <docanchor file="maliput_design.html">RoWR-lone-crosswalk</docanchor>
    <docanchor file="maliput_design.html">RoWR-one-way-to-two-way</docanchor>
    <docanchor file="maliput_design.html">RoWR-protected-left</docanchor>
    <docanchor file="maliput_design.html">RoWR-freeway-merge</docanchor>
    <docanchor file="maliput_design.html" title="&lt;tt&gt;Phase&lt;/tt&gt; dynamics: how to handle the rule state changes">phase_dynamics</docanchor>
    <docanchor file="maliput_design.html" title="&lt;tt&gt;TafficLight&lt;/tt&gt; modelling and databases">traffic_lights</docanchor>
    <docanchor file="maliput_design.html" title="&lt;tt&gt;Intersections&lt;/tt&gt; to aggregate multiple related entities">intersections_aggregation</docanchor>
  </compound>
  <compound kind="page">
    <name>maliput_plugin_architecture</name>
    <title>Maliput Plugin Architecture</title>
    <filename>maliput_plugin_architecture</filename>
    <docanchor file="maliput_plugin_architecture.html" title="Maliput Plugin Architecture">maliput_plugin_architecture_section</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="Overview">plugin_architecture_overview</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="MaliputPlugin">maliput_plugin</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="MaliputPlugin types">maliput_plugin_types</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="MaliputPluginManager">maliput_plugin_manager</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="Maliput available interfaces">maliput_available_interfaces</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="RoadNetworkLoader plugin">road_network_loader_plugin</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="Using a custom RoadNetworkLoader plugin">using_custom_road_network_loader</docanchor>
    <docanchor file="maliput_plugin_architecture.html" title="Related References">related_references</docanchor>
  </compound>
</tagfile>
