name: Compile

on:
  push:
  pull_request:
  schedule:
    - cron:  '0 9 * * *' # 9:00am UTC, 1:00am PST.


env:
  PACKAGE_NAME: maliput_documentation
  ROS_DISTRO: foxy
  ROS_WS: maliput_ws

jobs:
  compile:
    name: Compile
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    steps:
    # setup-ros first since it installs git, which is needed to fetch all branches from actions/checkout
    - uses: ros-tooling/setup-ros@0.2.1
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    - uses: actions/checkout@v2
      with:
        path: ${{ env.ROS_WS }}/src/${{ env.PACKAGE_NAME }}
    # clone private dependencies
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_py
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_py
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_malidrive
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_malidrive
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_dragway
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_dragway
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_multilane
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_multilane
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_integration
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_integration
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/maliput_integration_tests
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/maliput_integration_tests
        token: ${{ secrets.MALIPUT_TOKEN }}
    - uses: actions/checkout@v2
      with:
        repository: ToyotaResearchInstitute/drake-vendor
        fetch-depth: 0
        path: ${{ env.ROS_WS }}/src/drake_vendor
        token: ${{ secrets.MALIPUT_TOKEN }}
    - name: check if dependencies have a matching branch
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src
      run: ./${PACKAGE_NAME}/.github/try_vcs_checkout ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} .
    # clone public dependencies
    - name: vcs import
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: vcs import src < src/${PACKAGE_NAME}/.github/dependencies.repos
    - run: colcon graph
      shell: bash
      working-directory: ${{ env.ROS_WS }}
    - name: rosdep install
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        rosdep update --include-eol-distros;
        rosdep install  -i -y --rosdistro ${ROS_DISTRO} --skip-keys "pybind11" --from-paths src
    - name: install drake
      shell: bash
      working-directory: ${{ env.ROS_WS }}/src/drake_vendor
      run: ./drake_installer
    - name: colcon build
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        . /opt/ros/${ROS_DISTRO}/setup.bash;
        colcon build --packages-up-to ${PACKAGE_NAME} --event-handlers=console_direct+;
    # checkout to gh-pages
    - uses: actions/checkout@v2
      if: ${{ github.event_name == 'schedule' && matrix.ubuntu == '20.04' }}
      with:
        path: ${{ env.ROS_WS }}/src/${{ env.PACKAGE_NAME }}
        ref: gh-pages
    # dump the content into gh-pages
    - name: push to gh-pages
      if: ${{ github.event_name == 'schedule' && matrix.ubuntu == '20.04' }}
      shell: bash
      working-directory: ${{ env.ROS_WS }}
      run: |
        rm -rf src/${{ env.PACKAGE_NAME }}/*
        cp -r build/maliput_documentation/docs/docs/sphinx/* src/${{ env.PACKAGE_NAME }}/
        echo $(date) > src/${{ env.PACKAGE_NAME }}/build_stamp
        cd src/${{ env.PACKAGE_NAME }}
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add --all
        git commit -m "Github actions build on: $(date)" -a
        git push
